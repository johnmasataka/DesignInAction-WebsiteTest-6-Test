{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useStore from '../store';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [currentValue, setCurrentValue] = useState(1);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    buildingData,\n    updateBuildingData\n  } = useStore();\n  const steps = [{\n    prompt: \"Let's start designing your building. First, please select the number of floors (1-10):\",\n    property: \"floors\",\n    type: \"range\",\n    min: 1,\n    max: 10,\n    systemPrompt: \"You are an architectural design assistant. The user has selected {value} floors for their building. Provide a brief, professional response about this choice and its implications for the design.\"\n  }, {\n    prompt: \"Next, please select the number of bedrooms (1-6):\",\n    property: \"bedrooms\",\n    type: \"range\",\n    min: 1,\n    max: 6,\n    systemPrompt: \"You are an architectural design assistant. The user wants {value} bedrooms in their building. Provide a brief, professional response about this choice and suggest optimal layouts or considerations.\"\n  }, {\n    prompt: \"Now, please select the ceiling height (meters):\",\n    property: \"floor_height\",\n    type: \"range\",\n    min: 2000,\n    max: 4000,\n    step: 100,\n    systemPrompt: \"You are an architectural design assistant. The user has chosen a ceiling height of {value} millimeters. Provide a brief, professional response about this choice and its impact on spatial quality and energy efficiency.\"\n  }, {\n    prompt: \"Finally, please select the roof style:\",\n    property: \"roof_style\",\n    type: \"select\",\n    options: [\"flat\", \"gable\", \"hip\"],\n    systemPrompt: \"You are an architectural design assistant. The user has selected a {value} roof style. Provide a brief, professional response about this choice and its advantages for their building design.\"\n  }];\n  const generateChatResponse = async (value, step) => {\n    try {\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          systemPrompt: step.systemPrompt.replace('{value}', value),\n          userMessage: `I have selected ${value} for my building's ${step.property}.`\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get response');\n      }\n      const data = await response.json();\n      return data.response;\n    } catch (error) {\n      console.error('Error:', error);\n      return `I understand you've selected ${value}. Let's continue with the design process.`;\n    }\n  };\n  const handleValueChange = async value => {\n    setCurrentValue(value);\n    setIsProcessing(true);\n\n    // Update building data\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        [steps[currentStep].property]: value\n      }\n    };\n\n    // Update object list\n    if (steps[currentStep].property === \"floors\") {\n      const floorHeight = buildingData.building.floor_height;\n      const wallThickness = buildingData.building.wall_thickness;\n      const width = buildingData.building.width;\n      const depth = buildingData.building.depth;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * value],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                if (vertex[2] === floorHeight + 100) {\n                  return [vertex[0], vertex[1], floorHeight * value + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"bedrooms\") {\n      // Filter bedroom objects based on selected count\n      updatedData.objects = updatedData.objects.filter(obj => obj.layer !== \"Bedrooms\" || parseInt(obj.id.split('-')[1]) <= value);\n\n      // Update building dimensions based on bedroom count\n      const bedroomWidth = 6000; // Standard bedroom width\n      const bedroomDepth = 4000; // Standard bedroom depth\n      const corridorWidth = 1500; // Corridor width\n      const wallThickness = 150; // Wall thickness\n      const newWidth = value <= 2 ? 12000 : bedroomWidth * value + corridorWidth;\n      const newDepth = 8000; // Keep constant depth for two rows\n\n      // Update building dimensions\n      updatedData.building.width = newWidth;\n      updatedData.building.depth = newDepth;\n\n      // Update outer walls based on new dimensions\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          if (obj.id === \"wall-001\" || obj.id === \"wall-002\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n          if (obj.id === \"wall-004\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                min: [newWidth - wallThickness, obj.bounding_box.min[1], obj.bounding_box.min[2]],\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width - wallThickness) {\n                    return [newWidth - wallThickness, vertex[1], vertex[2]];\n                  }\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[0] === buildingData.building.width) {\n                  return [newWidth, vertex[1], vertex[2]];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"floor_height\") {\n      const floorHeight = value;\n      const numFloors = buildingData.building.floors;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * numFloors],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors + 100) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"roof_style\") {\n      // Update roof style\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            material: {\n              ...obj.material,\n              name: value === \"flat\" ? \"Flat Roof\" : value === \"gable\" ? \"Gable Roof\" : \"Hip Roof\"\n            }\n          };\n        }\n        return obj;\n      });\n    }\n    updateBuildingData(updatedData);\n\n    // Print updated JSON data to console\n    console.log('Updated Building Data:', JSON.stringify(updatedData, null, 2));\n\n    // Add user message to chat history\n    setChatHistory(prev => [...prev, {\n      type: 'user',\n      content: `${value}`\n    }]);\n    setIsProcessing(false);\n  };\n  const handleConfirm = async () => {\n    setIsLoading(true);\n    try {\n      // Generate a confirmation message\n      const response = await generateChatResponse(currentValue, steps[currentStep]);\n      setChatHistory(prev => [...prev, {\n        type: 'assistant',\n        content: response\n      }]);\n\n      // Move to next step if not on the last step\n      if (currentStep < steps.length - 1) {\n        setCurrentStep(prev => prev + 1);\n        setCurrentValue(1);\n      }\n    } catch (error) {\n      console.error('Error in handleConfirm:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const startDesignProcess = () => {\n    setCurrentStep(0);\n    setCurrentValue(1);\n    setChatHistory([]);\n    setIsProcessing(false);\n  };\n  useEffect(() => {\n    startDesignProcess();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      ref: messagesEndRef,\n      children: [chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this)), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-pulse\",\n          children: \"Thinking...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: currentStep < steps.length ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"confirm-button\",\n        onClick: handleConfirm,\n        disabled: isLoading,\n        children: isLoading ? 'Processing...' : 'Confirm'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-gray-800 mb-4\",\n          children: \"Design Complete!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setCurrentStep(0);\n            setCurrentValue(1);\n            setChatHistory([]);\n          },\n          className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"envRqIIcCIM6IDRX2y8+cHOh4L8=\", false, function () {\n  return [useStore];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useStore","jsxDEV","_jsxDEV","ChatInterface","_s","currentStep","setCurrentStep","currentValue","setCurrentValue","chatHistory","setChatHistory","isProcessing","setIsProcessing","isLoading","setIsLoading","buildingData","updateBuildingData","steps","prompt","property","type","min","max","systemPrompt","step","options","generateChatResponse","value","response","fetch","method","headers","body","JSON","stringify","replace","userMessage","ok","Error","data","json","error","console","handleValueChange","updatedData","building","floorHeight","floor_height","wallThickness","wall_thickness","width","depth","objects","map","obj","layer","bounding_box","geometry","vertices","vertex","filter","parseInt","id","split","bedroomWidth","bedroomDepth","corridorWidth","newWidth","newDepth","numFloors","floors","material","name","log","prev","content","handleConfirm","length","startDesignProcess","className","children","ref","messagesEndRef","message","index","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useStore from '../store';\nimport './ChatInterface.css';\n\nconst ChatInterface = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [currentValue, setCurrentValue] = useState(1);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { buildingData, updateBuildingData } = useStore();\n\n  const steps = [\n    {\n      prompt: \"Let's start designing your building. First, please select the number of floors (1-10):\",\n      property: \"floors\",\n      type: \"range\",\n      min: 1,\n      max: 10,\n      systemPrompt: \"You are an architectural design assistant. The user has selected {value} floors for their building. Provide a brief, professional response about this choice and its implications for the design.\"\n    },\n    {\n      prompt: \"Next, please select the number of bedrooms (1-6):\",\n      property: \"bedrooms\",\n      type: \"range\",\n      min: 1,\n      max: 6,\n      systemPrompt: \"You are an architectural design assistant. The user wants {value} bedrooms in their building. Provide a brief, professional response about this choice and suggest optimal layouts or considerations.\"\n    },\n    {\n      prompt: \"Now, please select the ceiling height (meters):\",\n      property: \"floor_height\",\n      type: \"range\",\n      min: 2000,\n      max: 4000,\n      step: 100,\n      systemPrompt: \"You are an architectural design assistant. The user has chosen a ceiling height of {value} millimeters. Provide a brief, professional response about this choice and its impact on spatial quality and energy efficiency.\"\n    },\n    {\n      prompt: \"Finally, please select the roof style:\",\n      property: \"roof_style\",\n      type: \"select\",\n      options: [\"flat\", \"gable\", \"hip\"],\n      systemPrompt: \"You are an architectural design assistant. The user has selected a {value} roof style. Provide a brief, professional response about this choice and its advantages for their building design.\"\n    }\n  ];\n\n  const generateChatResponse = async (value, step) => {\n    try {\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          systemPrompt: step.systemPrompt.replace('{value}', value),\n          userMessage: `I have selected ${value} for my building's ${step.property}.`\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get response');\n      }\n\n      const data = await response.json();\n      return data.response;\n    } catch (error) {\n      console.error('Error:', error);\n      return `I understand you've selected ${value}. Let's continue with the design process.`;\n    }\n  };\n\n  const handleValueChange = async (value) => {\n    setCurrentValue(value);\n    setIsProcessing(true);\n\n    // Update building data\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        [steps[currentStep].property]: value\n      }\n    };\n\n    // Update object list\n    if (steps[currentStep].property === \"floors\") {\n      const floorHeight = buildingData.building.floor_height;\n      const wallThickness = buildingData.building.wall_thickness;\n      const width = buildingData.building.width;\n      const depth = buildingData.building.depth;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * value],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                if (vertex[2] === floorHeight + 100) {\n                  return [vertex[0], vertex[1], floorHeight * value + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"bedrooms\") {\n      // Filter bedroom objects based on selected count\n      updatedData.objects = updatedData.objects.filter(obj => \n        obj.layer !== \"Bedrooms\" || \n        parseInt(obj.id.split('-')[1]) <= value\n      );\n\n      // Update building dimensions based on bedroom count\n      const bedroomWidth = 6000; // Standard bedroom width\n      const bedroomDepth = 4000; // Standard bedroom depth\n      const corridorWidth = 1500; // Corridor width\n      const wallThickness = 150; // Wall thickness\n      const newWidth = value <= 2 ? 12000 : bedroomWidth * value + corridorWidth;\n      const newDepth = 8000; // Keep constant depth for two rows\n\n      // Update building dimensions\n      updatedData.building.width = newWidth;\n      updatedData.building.depth = newDepth;\n\n      // Update outer walls based on new dimensions\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          if (obj.id === \"wall-001\" || obj.id === \"wall-002\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n          if (obj.id === \"wall-004\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                min: [newWidth - wallThickness, obj.bounding_box.min[1], obj.bounding_box.min[2]],\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width - wallThickness) {\n                    return [newWidth - wallThickness, vertex[1], vertex[2]];\n                  }\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[0] === buildingData.building.width) {\n                  return [newWidth, vertex[1], vertex[2]];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"floor_height\") {\n      const floorHeight = value;\n      const numFloors = buildingData.building.floors;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * numFloors],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors + 100) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"roof_style\") {\n      // Update roof style\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            material: {\n              ...obj.material,\n              name: value === \"flat\" ? \"Flat Roof\" : value === \"gable\" ? \"Gable Roof\" : \"Hip Roof\"\n            }\n          };\n        }\n        return obj;\n      });\n    }\n\n    updateBuildingData(updatedData);\n\n    // Print updated JSON data to console\n    console.log('Updated Building Data:', JSON.stringify(updatedData, null, 2));\n\n    // Add user message to chat history\n    setChatHistory(prev => [...prev, { type: 'user', content: `${value}` }]);\n\n    setIsProcessing(false);\n  };\n\n  const handleConfirm = async () => {\n    setIsLoading(true);\n    try {\n      // Generate a confirmation message\n      const response = await generateChatResponse(currentValue, steps[currentStep]);\n      setChatHistory(prev => [...prev, { type: 'assistant', content: response }]);\n      \n      // Move to next step if not on the last step\n      if (currentStep < steps.length - 1) {\n        setCurrentStep(prev => prev + 1);\n        setCurrentValue(1);\n      }\n    } catch (error) {\n      console.error('Error in handleConfirm:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const startDesignProcess = () => {\n    setCurrentStep(0);\n    setCurrentValue(1);\n    setChatHistory([]);\n    setIsProcessing(false);\n  };\n\n  useEffect(() => {\n    startDesignProcess();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-messages\" ref={messagesEndRef}>\n        {chatHistory.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            {message.content}\n          </div>\n        ))}\n        {isProcessing && (\n          <div className=\"message assistant\">\n            <div className=\"animate-pulse\">Thinking...</div>\n          </div>\n        )}\n      </div>\n      <div className=\"chat-input\">\n        {currentStep < steps.length ? (\n          <button \n            className=\"confirm-button\"\n            onClick={handleConfirm}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Processing...' : 'Confirm'}\n          </button>\n        ) : (\n          <div className=\"text-center\">\n            <div className=\"text-gray-800 mb-4\">Design Complete!</div>\n            <button\n              onClick={() => {\n                setCurrentStep(0);\n                setCurrentValue(1);\n                setChatHistory([]);\n              }}\n              className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n            >\n              Start Over\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAEiB,YAAY;IAAEC;EAAmB,CAAC,GAAGhB,QAAQ,CAAC,CAAC;EAEvD,MAAMiB,KAAK,GAAG,CACZ;IACEC,MAAM,EAAE,wFAAwF;IAChGC,QAAQ,EAAE,QAAQ;IAClBC,IAAI,EAAE,OAAO;IACbC,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,EAAE;IACPC,YAAY,EAAE;EAChB,CAAC,EACD;IACEL,MAAM,EAAE,mDAAmD;IAC3DC,QAAQ,EAAE,UAAU;IACpBC,IAAI,EAAE,OAAO;IACbC,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,CAAC;IACNC,YAAY,EAAE;EAChB,CAAC,EACD;IACEL,MAAM,EAAE,iDAAiD;IACzDC,QAAQ,EAAE,cAAc;IACxBC,IAAI,EAAE,OAAO;IACbC,GAAG,EAAE,IAAI;IACTC,GAAG,EAAE,IAAI;IACTE,IAAI,EAAE,GAAG;IACTD,YAAY,EAAE;EAChB,CAAC,EACD;IACEL,MAAM,EAAE,wCAAwC;IAChDC,QAAQ,EAAE,YAAY;IACtBC,IAAI,EAAE,QAAQ;IACdK,OAAO,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC;IACjCF,YAAY,EAAE;EAChB,CAAC,CACF;EAED,MAAMG,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEH,IAAI,KAAK;IAClD,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBX,YAAY,EAAEC,IAAI,CAACD,YAAY,CAACY,OAAO,CAAC,SAAS,EAAER,KAAK,CAAC;UACzDS,WAAW,EAAE,mBAAmBT,KAAK,sBAAsBH,IAAI,CAACL,QAAQ;QAC1E,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACS,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACX,QAAQ;IACtB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B,OAAO,gCAAgCd,KAAK,2CAA2C;IACzF;EACF,CAAC;EAED,MAAMgB,iBAAiB,GAAG,MAAOhB,KAAK,IAAK;IACzCnB,eAAe,CAACmB,KAAK,CAAC;IACtBf,eAAe,CAAC,IAAI,CAAC;;IAErB;IACA,MAAMgC,WAAW,GAAG;MAClB,GAAG7B,YAAY;MACf8B,QAAQ,EAAE;QACR,GAAG9B,YAAY,CAAC8B,QAAQ;QACxB,CAAC5B,KAAK,CAACZ,WAAW,CAAC,CAACc,QAAQ,GAAGQ;MACjC;IACF,CAAC;;IAED;IACA,IAAIV,KAAK,CAACZ,WAAW,CAAC,CAACc,QAAQ,KAAK,QAAQ,EAAE;MAC5C,MAAM2B,WAAW,GAAG/B,YAAY,CAAC8B,QAAQ,CAACE,YAAY;MACtD,MAAMC,aAAa,GAAGjC,YAAY,CAAC8B,QAAQ,CAACI,cAAc;MAC1D,MAAMC,KAAK,GAAGnC,YAAY,CAAC8B,QAAQ,CAACK,KAAK;MACzC,MAAMC,KAAK,GAAGpC,YAAY,CAAC8B,QAAQ,CAACM,KAAK;;MAEzC;MACAP,WAAW,CAACQ,OAAO,GAAGR,WAAW,CAACQ,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI;QACnD,IAAIA,GAAG,CAACC,KAAK,KAAK,OAAO,EAAE;UACzB,OAAO;YACL,GAAGD,GAAG;YACNE,YAAY,EAAE;cACZ,GAAGF,GAAG,CAACE,YAAY;cACnBlC,GAAG,EAAE,CAACgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEwB,WAAW,GAAGnB,KAAK;YAC7E,CAAC;YACD8B,QAAQ,EAAE;cACR,GAAGH,GAAG,CAACG,QAAQ;cACfC,QAAQ,EAAEJ,GAAG,CAACG,QAAQ,CAACC,QAAQ,CAACL,GAAG,CAACM,MAAM,IAAI;gBAC5C,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAKb,WAAW,EAAE;kBAC7B,OAAO,CAACa,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEb,WAAW,GAAGnB,KAAK,CAAC;gBACpD;gBACA,OAAOgC,MAAM;cACf,CAAC;YACH;UACF,CAAC;QACH;QACA,IAAIL,GAAG,CAACC,KAAK,KAAK,MAAM,EAAE;UACxB,OAAO;YACL,GAAGD,GAAG;YACNE,YAAY,EAAE;cACZ,GAAGF,GAAG,CAACE,YAAY;cACnBnC,GAAG,EAAE,CAACiC,GAAG,CAACE,YAAY,CAACnC,GAAG,CAAC,CAAC,CAAC,EAAEiC,GAAG,CAACE,YAAY,CAACnC,GAAG,CAAC,CAAC,CAAC,EAAEyB,WAAW,GAAGnB,KAAK,CAAC;cAC5EL,GAAG,EAAE,CAACgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEwB,WAAW,GAAGnB,KAAK,GAAG,GAAG;YACnF,CAAC;YACD8B,QAAQ,EAAE;cACR,GAAGH,GAAG,CAACG,QAAQ;cACfC,QAAQ,EAAEJ,GAAG,CAACG,QAAQ,CAACC,QAAQ,CAACL,GAAG,CAACM,MAAM,IAAI;gBAC5C,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAKb,WAAW,EAAE;kBAC7B,OAAO,CAACa,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEb,WAAW,GAAGnB,KAAK,CAAC;gBACpD;gBACA,IAAIgC,MAAM,CAAC,CAAC,CAAC,KAAKb,WAAW,GAAG,GAAG,EAAE;kBACnC,OAAO,CAACa,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEb,WAAW,GAAGnB,KAAK,GAAG,GAAG,CAAC;gBAC1D;gBACA,OAAOgC,MAAM;cACf,CAAC;YACH;UACF,CAAC;QACH;QACA,OAAOL,GAAG;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIrC,KAAK,CAACZ,WAAW,CAAC,CAACc,QAAQ,KAAK,UAAU,EAAE;MACrD;MACAyB,WAAW,CAACQ,OAAO,GAAGR,WAAW,CAACQ,OAAO,CAACQ,MAAM,CAACN,GAAG,IAClDA,GAAG,CAACC,KAAK,KAAK,UAAU,IACxBM,QAAQ,CAACP,GAAG,CAACQ,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIpC,KACpC,CAAC;;MAED;MACA,MAAMqC,YAAY,GAAG,IAAI,CAAC,CAAC;MAC3B,MAAMC,YAAY,GAAG,IAAI,CAAC,CAAC;MAC3B,MAAMC,aAAa,GAAG,IAAI,CAAC,CAAC;MAC5B,MAAMlB,aAAa,GAAG,GAAG,CAAC,CAAC;MAC3B,MAAMmB,QAAQ,GAAGxC,KAAK,IAAI,CAAC,GAAG,KAAK,GAAGqC,YAAY,GAAGrC,KAAK,GAAGuC,aAAa;MAC1E,MAAME,QAAQ,GAAG,IAAI,CAAC,CAAC;;MAEvB;MACAxB,WAAW,CAACC,QAAQ,CAACK,KAAK,GAAGiB,QAAQ;MACrCvB,WAAW,CAACC,QAAQ,CAACM,KAAK,GAAGiB,QAAQ;;MAErC;MACAxB,WAAW,CAACQ,OAAO,GAAGR,WAAW,CAACQ,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI;QACnD,IAAIA,GAAG,CAACC,KAAK,KAAK,OAAO,EAAE;UACzB,IAAID,GAAG,CAACQ,EAAE,KAAK,UAAU,IAAIR,GAAG,CAACQ,EAAE,KAAK,UAAU,EAAE;YAClD,OAAO;cACL,GAAGR,GAAG;cACNE,YAAY,EAAE;gBACZ,GAAGF,GAAG,CAACE,YAAY;gBACnBlC,GAAG,EAAE,CAAC6C,QAAQ,EAAEb,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC;cAClE,CAAC;cACDmC,QAAQ,EAAE;gBACR,GAAGH,GAAG,CAACG,QAAQ;gBACfC,QAAQ,EAAEJ,GAAG,CAACG,QAAQ,CAACC,QAAQ,CAACL,GAAG,CAACM,MAAM,IAAI;kBAC5C,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK5C,YAAY,CAAC8B,QAAQ,CAACK,KAAK,EAAE;oBAC7C,OAAO,CAACiB,QAAQ,EAAER,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;kBACzC;kBACA,OAAOA,MAAM;gBACf,CAAC;cACH;YACF,CAAC;UACH;UACA,IAAIL,GAAG,CAACQ,EAAE,KAAK,UAAU,EAAE;YACzB,OAAO;cACL,GAAGR,GAAG;cACNE,YAAY,EAAE;gBACZ,GAAGF,GAAG,CAACE,YAAY;gBACnBnC,GAAG,EAAE,CAAC8C,QAAQ,GAAGnB,aAAa,EAAEM,GAAG,CAACE,YAAY,CAACnC,GAAG,CAAC,CAAC,CAAC,EAAEiC,GAAG,CAACE,YAAY,CAACnC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACjFC,GAAG,EAAE,CAAC6C,QAAQ,EAAEb,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC;cAClE,CAAC;cACDmC,QAAQ,EAAE;gBACR,GAAGH,GAAG,CAACG,QAAQ;gBACfC,QAAQ,EAAEJ,GAAG,CAACG,QAAQ,CAACC,QAAQ,CAACL,GAAG,CAACM,MAAM,IAAI;kBAC5C,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK5C,YAAY,CAAC8B,QAAQ,CAACK,KAAK,GAAGF,aAAa,EAAE;oBAC7D,OAAO,CAACmB,QAAQ,GAAGnB,aAAa,EAAEW,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;kBACzD;kBACA,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK5C,YAAY,CAAC8B,QAAQ,CAACK,KAAK,EAAE;oBAC7C,OAAO,CAACiB,QAAQ,EAAER,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;kBACzC;kBACA,OAAOA,MAAM;gBACf,CAAC;cACH;YACF,CAAC;UACH;QACF;QACA,IAAIL,GAAG,CAACC,KAAK,KAAK,MAAM,EAAE;UACxB,OAAO;YACL,GAAGD,GAAG;YACNE,YAAY,EAAE;cACZ,GAAGF,GAAG,CAACE,YAAY;cACnBlC,GAAG,EAAE,CAAC6C,QAAQ,EAAEb,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC;YAClE,CAAC;YACDmC,QAAQ,EAAE;cACR,GAAGH,GAAG,CAACG,QAAQ;cACfC,QAAQ,EAAEJ,GAAG,CAACG,QAAQ,CAACC,QAAQ,CAACL,GAAG,CAACM,MAAM,IAAI;gBAC5C,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK5C,YAAY,CAAC8B,QAAQ,CAACK,KAAK,EAAE;kBAC7C,OAAO,CAACiB,QAAQ,EAAER,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;gBACzC;gBACA,OAAOA,MAAM;cACf,CAAC;YACH;UACF,CAAC;QACH;QACA,OAAOL,GAAG;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIrC,KAAK,CAACZ,WAAW,CAAC,CAACc,QAAQ,KAAK,cAAc,EAAE;MACzD,MAAM2B,WAAW,GAAGnB,KAAK;MACzB,MAAM0C,SAAS,GAAGtD,YAAY,CAAC8B,QAAQ,CAACyB,MAAM;;MAE9C;MACA1B,WAAW,CAACQ,OAAO,GAAGR,WAAW,CAACQ,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI;QACnD,IAAIA,GAAG,CAACC,KAAK,KAAK,OAAO,EAAE;UACzB,OAAO;YACL,GAAGD,GAAG;YACNE,YAAY,EAAE;cACZ,GAAGF,GAAG,CAACE,YAAY;cACnBlC,GAAG,EAAE,CAACgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEwB,WAAW,GAAGuB,SAAS;YACjF,CAAC;YACDZ,QAAQ,EAAE;cACR,GAAGH,GAAG,CAACG,QAAQ;cACfC,QAAQ,EAAEJ,GAAG,CAACG,QAAQ,CAACC,QAAQ,CAACL,GAAG,CAACM,MAAM,IAAI;gBAC5C,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK5C,YAAY,CAAC8B,QAAQ,CAACE,YAAY,EAAE;kBACpD,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEb,WAAW,CAAC;gBAC5C;gBACA,IAAIa,MAAM,CAAC,CAAC,CAAC,KAAK5C,YAAY,CAAC8B,QAAQ,CAACE,YAAY,GAAGsB,SAAS,EAAE;kBAChE,OAAO,CAACV,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEb,WAAW,GAAGuB,SAAS,CAAC;gBACxD;gBACA,OAAOV,MAAM;cACf,CAAC;YACH;UACF,CAAC;QACH;QACA,IAAIL,GAAG,CAACC,KAAK,KAAK,MAAM,EAAE;UACxB,OAAO;YACL,GAAGD,GAAG;YACNE,YAAY,EAAE;cACZ,GAAGF,GAAG,CAACE,YAAY;cACnBnC,GAAG,EAAE,CAACiC,GAAG,CAACE,YAAY,CAACnC,GAAG,CAAC,CAAC,CAAC,EAAEiC,GAAG,CAACE,YAAY,CAACnC,GAAG,CAAC,CAAC,CAAC,EAAEyB,WAAW,GAAGuB,SAAS,CAAC;cAChF/C,GAAG,EAAE,CAACgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEgC,GAAG,CAACE,YAAY,CAAClC,GAAG,CAAC,CAAC,CAAC,EAAEwB,WAAW,GAAGuB,SAAS,GAAG,GAAG;YACvF,CAAC;YACDZ,QAAQ,EAAE;cACR,GAAGH,GAAG,CAACG,QAAQ;cACfC,QAAQ,EAAEJ,GAAG,CAACG,QAAQ,CAACC,QAAQ,CAACL,GAAG,CAACM,MAAM,IAAI;gBAC5C,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK5C,YAAY,CAAC8B,QAAQ,CAACE,YAAY,EAAE;kBACpD,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEb,WAAW,CAAC;gBAC5C;gBACA,IAAIa,MAAM,CAAC,CAAC,CAAC,KAAK5C,YAAY,CAAC8B,QAAQ,CAACE,YAAY,GAAGsB,SAAS,EAAE;kBAChE,OAAO,CAACV,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEb,WAAW,GAAGuB,SAAS,CAAC;gBACxD;gBACA,IAAIV,MAAM,CAAC,CAAC,CAAC,KAAK5C,YAAY,CAAC8B,QAAQ,CAACE,YAAY,GAAGsB,SAAS,GAAG,GAAG,EAAE;kBACtE,OAAO,CAACV,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEb,WAAW,GAAGuB,SAAS,GAAG,GAAG,CAAC;gBAC9D;gBACA,OAAOV,MAAM;cACf,CAAC;YACH;UACF,CAAC;QACH;QACA,OAAOL,GAAG;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIrC,KAAK,CAACZ,WAAW,CAAC,CAACc,QAAQ,KAAK,YAAY,EAAE;MACvD;MACAyB,WAAW,CAACQ,OAAO,GAAGR,WAAW,CAACQ,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI;QACnD,IAAIA,GAAG,CAACC,KAAK,KAAK,MAAM,EAAE;UACxB,OAAO;YACL,GAAGD,GAAG;YACNiB,QAAQ,EAAE;cACR,GAAGjB,GAAG,CAACiB,QAAQ;cACfC,IAAI,EAAE7C,KAAK,KAAK,MAAM,GAAG,WAAW,GAAGA,KAAK,KAAK,OAAO,GAAG,YAAY,GAAG;YAC5E;UACF,CAAC;QACH;QACA,OAAO2B,GAAG;MACZ,CAAC,CAAC;IACJ;IAEAtC,kBAAkB,CAAC4B,WAAW,CAAC;;IAE/B;IACAF,OAAO,CAAC+B,GAAG,CAAC,wBAAwB,EAAExC,IAAI,CAACC,SAAS,CAACU,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;IAE3E;IACAlC,cAAc,CAACgE,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEtD,IAAI,EAAE,MAAM;MAAEuD,OAAO,EAAE,GAAGhD,KAAK;IAAG,CAAC,CAAC,CAAC;IAExEf,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMgE,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC9D,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF;MACA,MAAMc,QAAQ,GAAG,MAAMF,oBAAoB,CAACnB,YAAY,EAAEU,KAAK,CAACZ,WAAW,CAAC,CAAC;MAC7EK,cAAc,CAACgE,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAAEtD,IAAI,EAAE,WAAW;QAAEuD,OAAO,EAAE/C;MAAS,CAAC,CAAC,CAAC;;MAE3E;MACA,IAAIvB,WAAW,GAAGY,KAAK,CAAC4D,MAAM,GAAG,CAAC,EAAE;QAClCvE,cAAc,CAACoE,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QAChClE,eAAe,CAAC,CAAC,CAAC;MACpB;IACF,CAAC,CAAC,OAAOiC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,SAAS;MACR3B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMgE,kBAAkB,GAAGA,CAAA,KAAM;IAC/BxE,cAAc,CAAC,CAAC,CAAC;IACjBE,eAAe,CAAC,CAAC,CAAC;IAClBE,cAAc,CAAC,EAAE,CAAC;IAClBE,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAEDb,SAAS,CAAC,MAAM;IACd+E,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACE5E,OAAA;IAAK6E,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B9E,OAAA;MAAK6E,SAAS,EAAC,eAAe;MAACE,GAAG,EAAEC,cAAe;MAAAF,QAAA,GAChDvE,WAAW,CAAC4C,GAAG,CAAC,CAAC8B,OAAO,EAAEC,KAAK,kBAC9BlF,OAAA;QAAiB6E,SAAS,EAAE,WAAWI,OAAO,CAAC/D,IAAI,EAAG;QAAA4D,QAAA,EACnDG,OAAO,CAACR;MAAO,GADRS,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN,CAAC,EACD7E,YAAY,iBACXT,OAAA;QAAK6E,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eAChC9E,OAAA;UAAK6E,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAAW;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACNtF,OAAA;MAAK6E,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxB3E,WAAW,GAAGY,KAAK,CAAC4D,MAAM,gBACzB3E,OAAA;QACE6E,SAAS,EAAC,gBAAgB;QAC1BU,OAAO,EAAEb,aAAc;QACvBc,QAAQ,EAAE7E,SAAU;QAAAmE,QAAA,EAEnBnE,SAAS,GAAG,eAAe,GAAG;MAAS;QAAAwE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,gBAETtF,OAAA;QAAK6E,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1B9E,OAAA;UAAK6E,SAAS,EAAC,oBAAoB;UAAAC,QAAA,EAAC;QAAgB;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC1DtF,OAAA;UACEuF,OAAO,EAAEA,CAAA,KAAM;YACbnF,cAAc,CAAC,CAAC,CAAC;YACjBE,eAAe,CAAC,CAAC,CAAC;YAClBE,cAAc,CAAC,EAAE,CAAC;UACpB,CAAE;UACFqE,SAAS,EAAC,4DAA4D;UAAAC,QAAA,EACvE;QAED;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpF,EAAA,CA/WID,aAAa;EAAA,QAM4BH,QAAQ;AAAA;AAAA2F,EAAA,GANjDxF,aAAa;AAiXnB,eAAeA,aAAa;AAAC,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}