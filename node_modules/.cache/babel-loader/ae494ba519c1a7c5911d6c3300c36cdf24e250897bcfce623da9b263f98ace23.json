{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useStore } from '../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [currentValue, setCurrentValue] = useState(1);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const {\n    buildingData,\n    updateBuildingData\n  } = useStore();\n  const steps = [{\n    prompt: \"Let's start designing your building. First, please select the number of floors (1-10):\",\n    property: \"floors\",\n    type: \"range\",\n    min: 1,\n    max: 10,\n    response: \"Great! You've selected {value} floors.\"\n  }, {\n    prompt: \"Next, please select the number of bedrooms (1-6):\",\n    property: \"bedrooms\",\n    type: \"range\",\n    min: 1,\n    max: 6,\n    response: \"Great! You've selected {value} bedrooms.\"\n  }, {\n    prompt: \"Now, please select the ceiling height (meters):\",\n    property: \"floor_height\",\n    type: \"range\",\n    min: 2000,\n    max: 4000,\n    step: 100,\n    response: \"Ceiling height set to {value} meters.\"\n  }, {\n    prompt: \"Finally, please select the roof style:\",\n    property: \"roof_style\",\n    type: \"select\",\n    options: [\"flat\", \"gable\", \"hip\"],\n    response: \"You've selected a {value} roof.\"\n  }];\n  const handleValueChange = value => {\n    setCurrentValue(value);\n    setIsProcessing(true);\n\n    // Update JSON data\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        [steps[currentStep].property]: value\n      }\n    };\n\n    // Update object list\n    if (steps[currentStep].property === \"floors\") {\n      const floorHeight = buildingData.building.floor_height;\n      const wallThickness = buildingData.building.wall_thickness;\n      const width = buildingData.building.width;\n      const depth = buildingData.building.depth;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * value],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                if (vertex[2] === floorHeight + 100) {\n                  return [vertex[0], vertex[1], floorHeight * value + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"bedrooms\") {\n      // Remove existing bedrooms\n      updatedData.objects = updatedData.objects.filter(obj => obj.layer !== \"Bedrooms\");\n\n      // Add new bedrooms based on count\n      const bedroomWidth = 6000; // Standard bedroom width\n      const bedroomDepth = 4000; // Standard bedroom depth\n      const corridorWidth = 1500; // Corridor width\n      const wallThickness = 150; // Wall thickness\n\n      // Calculate new building width based on bedroom count\n      const newWidth = value <= 2 ? 12000 : bedroomWidth * value + corridorWidth;\n      const newDepth = 8000; // Keep constant depth for two rows\n\n      // Update building dimensions\n      updatedData.building.width = newWidth;\n      updatedData.building.depth = newDepth;\n\n      // Add new bedrooms\n      for (let i = 0; i < value; i++) {\n        const row = Math.floor(i / 2);\n        const col = i % 2;\n        const xStart = col === 0 ? 150 : 6150;\n        const yStart = row === 0 ? 150 : 4150;\n        const xEnd = col === 0 ? 6000 : 11850;\n        const yEnd = row === 0 ? 4000 : 7850;\n        updatedData.objects.push({\n          id: `bedroom-${String(i + 1).padStart(3, '0')}`,\n          layer: \"Bedrooms\",\n          type: \"Bedroom\",\n          material: {\n            name: \"Interior Wall\",\n            color: \"#E8E8E8\",\n            texture: \"wallpaper\"\n          },\n          bounding_box: {\n            min: [xStart, yStart, 0],\n            max: [xEnd, yEnd, 2500]\n          },\n          geometry: {\n            vertices: [[xStart, yStart, 0], [xEnd, yStart, 0], [xEnd, yEnd, 0], [xStart, yEnd, 0], [xStart, yStart, 2500], [xEnd, yStart, 2500], [xEnd, yEnd, 2500], [xStart, yEnd, 2500]],\n            faces: [[0, 1, 2, 3], [4, 5, 6, 7], [0, 1, 5, 4], [1, 2, 6, 5], [2, 3, 7, 6], [3, 0, 4, 7]]\n          }\n        });\n      }\n\n      // Update living room size\n      const livingRoom = updatedData.objects.find(obj => obj.id === \"living-room\");\n      if (livingRoom) {\n        livingRoom.bounding_box.max = [newWidth - wallThickness, newDepth - wallThickness, 2500];\n        livingRoom.geometry.vertices = [[150, 150, 0], [newWidth - wallThickness, 150, 0], [newWidth - wallThickness, newDepth - wallThickness, 0], [150, newDepth - wallThickness, 0], [150, 150, 2500], [newWidth - wallThickness, 150, 2500], [newWidth - wallThickness, newDepth - wallThickness, 2500], [150, newDepth - wallThickness, 2500]];\n      }\n\n      // Update outer walls based on new dimensions\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          if (obj.id === \"wall-001\" || obj.id === \"wall-002\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n          if (obj.id === \"wall-004\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                min: [newWidth - wallThickness, obj.bounding_box.min[1], obj.bounding_box.min[2]],\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width - wallThickness) {\n                    return [newWidth - wallThickness, vertex[1], vertex[2]];\n                  }\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[0] === buildingData.building.width) {\n                  return [newWidth, vertex[1], vertex[2]];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"floor_height\") {\n      const floorHeight = value;\n      const numFloors = buildingData.building.floors;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * numFloors],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors + 100) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"roof_style\") {\n      // Update roof style\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            material: {\n              ...obj.material,\n              name: value === \"flat\" ? \"Flat Roof\" : value === \"gable\" ? \"Gable Roof\" : \"Hip Roof\"\n            }\n          };\n        }\n        return obj;\n      });\n    }\n    updateBuildingData(updatedData);\n\n    // Print updated JSON data to console\n    console.log('Updated Building Data:', JSON.stringify(updatedData, null, 2));\n\n    // Add user selection to chat history\n    setChatHistory(prev => [...prev, {\n      type: 'user',\n      content: `${value}`\n    }, {\n      type: 'assistant',\n      content: steps[currentStep].response.replace('{value}', value)\n    }]);\n\n    // Simulate LLM processing time\n    setTimeout(() => {\n      setIsProcessing(false);\n      if (currentStep < steps.length - 1) {\n        setCurrentStep(prev => prev + 1);\n        setCurrentValue(1);\n      }\n    }, 1000);\n  };\n  const startDesignProcess = () => {\n    setCurrentStep(0);\n    setCurrentValue(1);\n    setChatHistory([]);\n    setIsProcessing(false);\n  };\n  useEffect(() => {\n    startDesignProcess();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleBedroomCountChange = count => {\n    // 更新状态\n    setCurrentValue(count);\n\n    // 构建用户消息\n    const userMessage = {\n      type: 'user',\n      content: `I want ${count} bedrooms in the building.`\n    };\n\n    // 添加到聊天历史\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // 构建 ChatGPT 响应\n    const chatGPTResponse = {\n      type: 'assistant',\n      content: `Great! You've selected ${count} bedrooms. ${count === 0 ? 'This will create a spacious open-plan living area.' : count === 1 ? 'A single bedroom provides a cozy living space.' : count === 2 ? 'Two bedrooms offer a good balance for a small family.' : count === 3 ? 'Three bedrooms are perfect for a growing family.' : count === 4 ? 'Four bedrooms provide ample space for a large family or guests.' : count === 5 ? 'Five bedrooms create a luxurious living space.' : 'Six bedrooms make this a truly expansive residence.'} Design suggestion: Consider adding ${count > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms, and ensure each bedroom has access to natural light and ventilation.`\n    };\n\n    // 添加到聊天历史\n    setChatHistory(prev => [...prev, chatGPTResponse]);\n\n    // 更新建筑数据\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        bedrooms: count\n      }\n    };\n    updateBuildingData(updatedData);\n  };\n\n  // 添加新的对话处理函数\n  const handleUserInput = input => {\n    if (!input.trim()) return;\n\n    // 添加用户消息\n    const userMessage = {\n      type: 'user',\n      content: input\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // 处理用户输入并生成响应\n    let response = '';\n    let updatedData = {\n      ...buildingData\n    };\n\n    // 简单的意图识别\n    if (input.toLowerCase().includes('bedroom')) {\n      var _input$match;\n      const count = parseInt(((_input$match = input.match(/\\d+/)) === null || _input$match === void 0 ? void 0 : _input$match[0]) || '0');\n      if (count >= 0 && count <= 6) {\n        response = `I'll update the design to include ${count} bedrooms. ${count === 0 ? 'This will create a spacious open-plan living area.' : count === 1 ? 'A single bedroom provides a cozy living space.' : count === 2 ? 'Two bedrooms offer a good balance for a small family.' : count === 3 ? 'Three bedrooms are perfect for a growing family.' : count === 4 ? 'Four bedrooms provide ample space for a large family or guests.' : count === 5 ? 'Five bedrooms create a luxurious living space.' : 'Six bedrooms make this a truly expansive residence.'} Design suggestion: Consider adding ${count > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms, and ensure each bedroom has access to natural light and ventilation.`;\n        updatedData.building.bedrooms = count;\n      }\n    } else if (input.toLowerCase().includes('floor')) {\n      var _input$match2;\n      const count = parseInt(((_input$match2 = input.match(/\\d+/)) === null || _input$match2 === void 0 ? void 0 : _input$match2[0]) || '0');\n      if (count >= 1 && count <= 10) {\n        response = `I'll update the building to have ${count} floors. ${count === 1 ? 'A single-story building provides easy access and maintenance.' : count === 2 ? 'A two-story building offers good separation of living and sleeping areas.' : count === 3 ? 'A three-story building creates a more urban living experience.' : count === 4 ? 'A four-story building maximizes land use while maintaining comfort.' : count === 5 ? 'A five-story building provides a good balance of space and accessibility.' : count === 6 ? 'A six-story building creates a more vertical living experience.' : count === 7 ? 'A seven-story building offers panoramic views.' : count === 8 ? 'An eight-story building provides extensive living space.' : count === 9 ? 'A nine-story building creates a significant presence in the landscape.' : 'A ten-story building makes a bold architectural statement.'} Design suggestion: Consider adding ${count > 3 ? 'an elevator' : 'a central staircase'} for vertical circulation, and ensure proper fire safety measures are in place.`;\n        updatedData.building.floors = count;\n      }\n    } else if (input.toLowerCase().includes('width')) {\n      var _input$match3;\n      const width = parseInt(((_input$match3 = input.match(/\\d+/)) === null || _input$match3 === void 0 ? void 0 : _input$match3[0]) || '0');\n      if (width >= 5000 && width <= 20000) {\n        response = `I'll update the building width to ${width}mm. ${width <= 8000 ? 'A narrow building creates an efficient, compact living space.' : width <= 12000 ? 'A medium-width building provides comfortable room sizes.' : 'A wide building offers spacious living areas and flexibility in room arrangement.'} Design suggestion: Consider the orientation of the building to maximize natural light and ventilation based on the site conditions.`;\n        updatedData.building.width = width;\n      }\n    } else if (input.toLowerCase().includes('depth')) {\n      var _input$match4;\n      const depth = parseInt(((_input$match4 = input.match(/\\d+/)) === null || _input$match4 === void 0 ? void 0 : _input$match4[0]) || '0');\n      if (depth >= 5000 && depth <= 20000) {\n        response = `I'll update the building depth to ${depth}mm. ${depth <= 8000 ? 'A shallow building ensures good natural light penetration.' : depth <= 12000 ? 'A medium-depth building provides balanced room proportions.' : 'A deep building offers extensive living space but requires careful lighting design.'} Design suggestion: Consider adding ${depth > 10000 ? 'internal courtyards or light wells' : 'strategically placed windows'} to ensure adequate natural lighting throughout the space.`;\n        updatedData.building.depth = depth;\n      }\n    } else {\n      response = \"I'm not sure how to interpret that. Could you please specify what aspect of the building you'd like to modify? You can mention bedrooms, floors, width, or depth.\";\n    }\n\n    // 添加助手响应\n    const assistantMessage = {\n      type: 'assistant',\n      content: response\n    };\n    setChatHistory(prev => [...prev, assistantMessage]);\n\n    // 更新建筑数据\n    updateBuildingData(updatedData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-full bg-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto p-4 space-y-4\",\n      children: [chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `max-w-[80%] rounded-lg p-3 ${message.type === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`,\n          children: message.type === 'user' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-right\",\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 11\n      }, this)), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-start\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-200 text-gray-800 rounded-lg p-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"animate-pulse\",\n            children: \"Thinking...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 border-t\",\n      children: currentStep < steps.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-gray-800\",\n          children: steps[currentStep].prompt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }, this), steps[currentStep].type === \"range\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: steps[currentStep].min,\n            max: steps[currentStep].max,\n            step: steps[currentStep].step || 1,\n            value: currentValue,\n            onChange: e => handleValueChange(Number(e.target.value)),\n            className: \"w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-gray-600\",\n            children: currentValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 15\n        }, this), steps[currentStep].type === \"select\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-3 gap-2\",\n          children: steps[currentStep].options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleValueChange(option),\n            className: `p-2 rounded ${currentValue === option ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`,\n            children: option\n          }, option, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-gray-800 mb-4\",\n          children: \"Design Complete!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startDesignProcess,\n          className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 484,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"nOnK39OA3J7IOYgldnSRKVsdJig=\", false, function () {\n  return [useStore];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useStore","jsxDEV","_jsxDEV","ChatInterface","_s","currentStep","setCurrentStep","currentValue","setCurrentValue","chatHistory","setChatHistory","isProcessing","setIsProcessing","buildingData","updateBuildingData","steps","prompt","property","type","min","max","response","step","options","handleValueChange","value","updatedData","building","floorHeight","floor_height","wallThickness","wall_thickness","width","depth","objects","map","obj","layer","bounding_box","geometry","vertices","vertex","filter","bedroomWidth","bedroomDepth","corridorWidth","newWidth","newDepth","i","row","Math","floor","col","xStart","yStart","xEnd","yEnd","push","id","String","padStart","material","name","color","texture","faces","livingRoom","find","numFloors","floors","console","log","JSON","stringify","prev","content","replace","setTimeout","length","startDesignProcess","handleBedroomCountChange","count","userMessage","chatGPTResponse","bedrooms","handleUserInput","input","trim","toLowerCase","includes","_input$match","parseInt","match","_input$match2","_input$match3","_input$match4","assistantMessage","className","children","message","index","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","Number","target","option","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useStore } from '../store';\n\nconst ChatInterface = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [currentValue, setCurrentValue] = useState(1);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { buildingData, updateBuildingData } = useStore();\n\n  const steps = [\n    {\n      prompt: \"Let's start designing your building. First, please select the number of floors (1-10):\",\n      property: \"floors\",\n      type: \"range\",\n      min: 1,\n      max: 10,\n      response: \"Great! You've selected {value} floors.\"\n    },\n    {\n      prompt: \"Next, please select the number of bedrooms (1-6):\",\n      property: \"bedrooms\",\n      type: \"range\",\n      min: 1,\n      max: 6,\n      response: \"Great! You've selected {value} bedrooms.\"\n    },\n    {\n      prompt: \"Now, please select the ceiling height (meters):\",\n      property: \"floor_height\",\n      type: \"range\",\n      min: 2000,\n      max: 4000,\n      step: 100,\n      response: \"Ceiling height set to {value} meters.\"\n    },\n    {\n      prompt: \"Finally, please select the roof style:\",\n      property: \"roof_style\",\n      type: \"select\",\n      options: [\"flat\", \"gable\", \"hip\"],\n      response: \"You've selected a {value} roof.\"\n    }\n  ];\n\n  const handleValueChange = (value) => {\n    setCurrentValue(value);\n    setIsProcessing(true);\n\n    // Update JSON data\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        [steps[currentStep].property]: value\n      }\n    };\n\n    // Update object list\n    if (steps[currentStep].property === \"floors\") {\n      const floorHeight = buildingData.building.floor_height;\n      const wallThickness = buildingData.building.wall_thickness;\n      const width = buildingData.building.width;\n      const depth = buildingData.building.depth;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * value],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                if (vertex[2] === floorHeight + 100) {\n                  return [vertex[0], vertex[1], floorHeight * value + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"bedrooms\") {\n      // Remove existing bedrooms\n      updatedData.objects = updatedData.objects.filter(obj => obj.layer !== \"Bedrooms\");\n\n      // Add new bedrooms based on count\n      const bedroomWidth = 6000; // Standard bedroom width\n      const bedroomDepth = 4000; // Standard bedroom depth\n      const corridorWidth = 1500; // Corridor width\n      const wallThickness = 150; // Wall thickness\n\n      // Calculate new building width based on bedroom count\n      const newWidth = value <= 2 ? 12000 : bedroomWidth * value + corridorWidth;\n      const newDepth = 8000; // Keep constant depth for two rows\n\n      // Update building dimensions\n      updatedData.building.width = newWidth;\n      updatedData.building.depth = newDepth;\n\n      // Add new bedrooms\n      for (let i = 0; i < value; i++) {\n        const row = Math.floor(i / 2);\n        const col = i % 2;\n        const xStart = col === 0 ? 150 : 6150;\n        const yStart = row === 0 ? 150 : 4150;\n        const xEnd = col === 0 ? 6000 : 11850;\n        const yEnd = row === 0 ? 4000 : 7850;\n\n        updatedData.objects.push({\n          id: `bedroom-${String(i + 1).padStart(3, '0')}`,\n          layer: \"Bedrooms\",\n          type: \"Bedroom\",\n          material: {\n            name: \"Interior Wall\",\n            color: \"#E8E8E8\",\n            texture: \"wallpaper\"\n          },\n          bounding_box: {\n            min: [xStart, yStart, 0],\n            max: [xEnd, yEnd, 2500]\n          },\n          geometry: {\n            vertices: [\n              [xStart, yStart, 0],\n              [xEnd, yStart, 0],\n              [xEnd, yEnd, 0],\n              [xStart, yEnd, 0],\n              [xStart, yStart, 2500],\n              [xEnd, yStart, 2500],\n              [xEnd, yEnd, 2500],\n              [xStart, yEnd, 2500]\n            ],\n            faces: [\n              [0, 1, 2, 3],\n              [4, 5, 6, 7],\n              [0, 1, 5, 4],\n              [1, 2, 6, 5],\n              [2, 3, 7, 6],\n              [3, 0, 4, 7]\n            ]\n          }\n        });\n      }\n\n      // Update living room size\n      const livingRoom = updatedData.objects.find(obj => obj.id === \"living-room\");\n      if (livingRoom) {\n        livingRoom.bounding_box.max = [newWidth - wallThickness, newDepth - wallThickness, 2500];\n        livingRoom.geometry.vertices = [\n          [150, 150, 0],\n          [newWidth - wallThickness, 150, 0],\n          [newWidth - wallThickness, newDepth - wallThickness, 0],\n          [150, newDepth - wallThickness, 0],\n          [150, 150, 2500],\n          [newWidth - wallThickness, 150, 2500],\n          [newWidth - wallThickness, newDepth - wallThickness, 2500],\n          [150, newDepth - wallThickness, 2500]\n        ];\n      }\n\n      // Update outer walls based on new dimensions\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          if (obj.id === \"wall-001\" || obj.id === \"wall-002\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n          if (obj.id === \"wall-004\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                min: [newWidth - wallThickness, obj.bounding_box.min[1], obj.bounding_box.min[2]],\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width - wallThickness) {\n                    return [newWidth - wallThickness, vertex[1], vertex[2]];\n                  }\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[0] === buildingData.building.width) {\n                  return [newWidth, vertex[1], vertex[2]];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"floor_height\") {\n      const floorHeight = value;\n      const numFloors = buildingData.building.floors;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * numFloors],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors + 100) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"roof_style\") {\n      // Update roof style\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            material: {\n              ...obj.material,\n              name: value === \"flat\" ? \"Flat Roof\" : value === \"gable\" ? \"Gable Roof\" : \"Hip Roof\"\n            }\n          };\n        }\n        return obj;\n      });\n    }\n\n    updateBuildingData(updatedData);\n\n    // Print updated JSON data to console\n    console.log('Updated Building Data:', JSON.stringify(updatedData, null, 2));\n\n    // Add user selection to chat history\n    setChatHistory(prev => [\n      ...prev,\n      { type: 'user', content: `${value}` },\n      { type: 'assistant', content: steps[currentStep].response.replace('{value}', value) }\n    ]);\n\n    // Simulate LLM processing time\n    setTimeout(() => {\n      setIsProcessing(false);\n      if (currentStep < steps.length - 1) {\n        setCurrentStep(prev => prev + 1);\n        setCurrentValue(1);\n      }\n    }, 1000);\n  };\n\n  const startDesignProcess = () => {\n    setCurrentStep(0);\n    setCurrentValue(1);\n    setChatHistory([]);\n    setIsProcessing(false);\n  };\n\n  useEffect(() => {\n    startDesignProcess();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleBedroomCountChange = (count) => {\n    // 更新状态\n    setCurrentValue(count);\n    \n    // 构建用户消息\n    const userMessage = {\n      type: 'user',\n      content: `I want ${count} bedrooms in the building.`\n    };\n    \n    // 添加到聊天历史\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // 构建 ChatGPT 响应\n    const chatGPTResponse = {\n      type: 'assistant',\n      content: `Great! You've selected ${count} bedrooms. ${\n        count === 0 ? 'This will create a spacious open-plan living area.' :\n        count === 1 ? 'A single bedroom provides a cozy living space.' :\n        count === 2 ? 'Two bedrooms offer a good balance for a small family.' :\n        count === 3 ? 'Three bedrooms are perfect for a growing family.' :\n        count === 4 ? 'Four bedrooms provide ample space for a large family or guests.' :\n        count === 5 ? 'Five bedrooms create a luxurious living space.' :\n        'Six bedrooms make this a truly expansive residence.'\n      } Design suggestion: Consider adding ${count > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms, and ensure each bedroom has access to natural light and ventilation.`\n    };\n\n    // 添加到聊天历史\n    setChatHistory(prev => [...prev, chatGPTResponse]);\n\n    // 更新建筑数据\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        bedrooms: count\n      }\n    };\n    updateBuildingData(updatedData);\n  };\n\n  // 添加新的对话处理函数\n  const handleUserInput = (input) => {\n    if (!input.trim()) return;\n\n    // 添加用户消息\n    const userMessage = {\n      type: 'user',\n      content: input\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // 处理用户输入并生成响应\n    let response = '';\n    let updatedData = { ...buildingData };\n\n    // 简单的意图识别\n    if (input.toLowerCase().includes('bedroom')) {\n      const count = parseInt(input.match(/\\d+/)?.[0] || '0');\n      if (count >= 0 && count <= 6) {\n        response = `I'll update the design to include ${count} bedrooms. ${\n          count === 0 ? 'This will create a spacious open-plan living area.' :\n          count === 1 ? 'A single bedroom provides a cozy living space.' :\n          count === 2 ? 'Two bedrooms offer a good balance for a small family.' :\n          count === 3 ? 'Three bedrooms are perfect for a growing family.' :\n          count === 4 ? 'Four bedrooms provide ample space for a large family or guests.' :\n          count === 5 ? 'Five bedrooms create a luxurious living space.' :\n          'Six bedrooms make this a truly expansive residence.'\n        } Design suggestion: Consider adding ${count > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms, and ensure each bedroom has access to natural light and ventilation.`;\n        \n        updatedData.building.bedrooms = count;\n      }\n    } else if (input.toLowerCase().includes('floor')) {\n      const count = parseInt(input.match(/\\d+/)?.[0] || '0');\n      if (count >= 1 && count <= 10) {\n        response = `I'll update the building to have ${count} floors. ${\n          count === 1 ? 'A single-story building provides easy access and maintenance.' :\n          count === 2 ? 'A two-story building offers good separation of living and sleeping areas.' :\n          count === 3 ? 'A three-story building creates a more urban living experience.' :\n          count === 4 ? 'A four-story building maximizes land use while maintaining comfort.' :\n          count === 5 ? 'A five-story building provides a good balance of space and accessibility.' :\n          count === 6 ? 'A six-story building creates a more vertical living experience.' :\n          count === 7 ? 'A seven-story building offers panoramic views.' :\n          count === 8 ? 'An eight-story building provides extensive living space.' :\n          count === 9 ? 'A nine-story building creates a significant presence in the landscape.' :\n          'A ten-story building makes a bold architectural statement.'\n        } Design suggestion: Consider adding ${count > 3 ? 'an elevator' : 'a central staircase'} for vertical circulation, and ensure proper fire safety measures are in place.`;\n        \n        updatedData.building.floors = count;\n      }\n    } else if (input.toLowerCase().includes('width')) {\n      const width = parseInt(input.match(/\\d+/)?.[0] || '0');\n      if (width >= 5000 && width <= 20000) {\n        response = `I'll update the building width to ${width}mm. ${\n          width <= 8000 ? 'A narrow building creates an efficient, compact living space.' :\n          width <= 12000 ? 'A medium-width building provides comfortable room sizes.' :\n          'A wide building offers spacious living areas and flexibility in room arrangement.'\n        } Design suggestion: Consider the orientation of the building to maximize natural light and ventilation based on the site conditions.`;\n        \n        updatedData.building.width = width;\n      }\n    } else if (input.toLowerCase().includes('depth')) {\n      const depth = parseInt(input.match(/\\d+/)?.[0] || '0');\n      if (depth >= 5000 && depth <= 20000) {\n        response = `I'll update the building depth to ${depth}mm. ${\n          depth <= 8000 ? 'A shallow building ensures good natural light penetration.' :\n          depth <= 12000 ? 'A medium-depth building provides balanced room proportions.' :\n          'A deep building offers extensive living space but requires careful lighting design.'\n        } Design suggestion: Consider adding ${depth > 10000 ? 'internal courtyards or light wells' : 'strategically placed windows'} to ensure adequate natural lighting throughout the space.`;\n        \n        updatedData.building.depth = depth;\n      }\n    } else {\n      response = \"I'm not sure how to interpret that. Could you please specify what aspect of the building you'd like to modify? You can mention bedrooms, floors, width, or depth.\";\n    }\n\n    // 添加助手响应\n    const assistantMessage = {\n      type: 'assistant',\n      content: response\n    };\n    setChatHistory(prev => [...prev, assistantMessage]);\n\n    // 更新建筑数据\n    updateBuildingData(updatedData);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-white\">\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {chatHistory.map((message, index) => (\n          <div\n            key={index}\n            className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n          >\n            <div\n              className={`max-w-[80%] rounded-lg p-3 ${\n                message.type === 'user'\n                  ? 'bg-blue-500 text-white'\n                  : 'bg-gray-200 text-gray-800'\n              }`}\n            >\n              {message.type === 'user' ? (\n                <div className=\"text-right\">{message.content}</div>\n              ) : (\n                <div>{message.content}</div>\n              )}\n            </div>\n          </div>\n        ))}\n        {isProcessing && (\n          <div className=\"flex justify-start\">\n            <div className=\"bg-gray-200 text-gray-800 rounded-lg p-3\">\n              <div className=\"animate-pulse\">Thinking...</div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"p-4 border-t\">\n        {currentStep < steps.length ? (\n          <div className=\"space-y-4\">\n            <div className=\"text-gray-800\">{steps[currentStep].prompt}</div>\n            {steps[currentStep].type === \"range\" && (\n              <div className=\"space-y-2\">\n                <input\n                  type=\"range\"\n                  min={steps[currentStep].min}\n                  max={steps[currentStep].max}\n                  step={steps[currentStep].step || 1}\n                  value={currentValue}\n                  onChange={(e) => handleValueChange(Number(e.target.value))}\n                  className=\"w-full\"\n                />\n                <div className=\"text-center text-gray-600\">{currentValue}</div>\n              </div>\n            )}\n            {steps[currentStep].type === \"select\" && (\n              <div className=\"grid grid-cols-3 gap-2\">\n                {steps[currentStep].options.map((option) => (\n                  <button\n                    key={option}\n                    onClick={() => handleValueChange(option)}\n                    className={`p-2 rounded ${\n                      currentValue === option\n                        ? 'bg-blue-500 text-white'\n                        : 'bg-gray-200 text-gray-800'\n                    }`}\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"text-center\">\n            <div className=\"text-gray-800 mb-4\">Design Complete!</div>\n            <button\n              onClick={startDesignProcess}\n              className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n            >\n              Start Over\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}