{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\DesignStudio.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\nimport { useStore } from '../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DesignStudio = () => {\n  _s();\n  const containerRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const transformControlsRef = useRef(null);\n  const meshesRef = useRef([]);\n  const selectedObjectRef = useRef(null);\n  const {\n    buildingData,\n    updateBuildingData\n  } = useStore();\n\n  // 更新模型函数\n  const updateModel = data => {\n    if (!sceneRef.current) return;\n    const scene = sceneRef.current;\n\n    // 清除现有网格\n    meshesRef.current.forEach(mesh => scene.remove(mesh));\n    meshesRef.current = [];\n\n    // 加载模型\n    data.objects.forEach((obj, index) => {\n      if (obj.geometry.vertices) {\n        // 计算几何体的边界框\n        const boundingBox = {\n          min: new THREE.Vector3(Infinity, Infinity, Infinity),\n          max: new THREE.Vector3(-Infinity, -Infinity, -Infinity)\n        };\n\n        // 找出边界框\n        obj.geometry.vertices.forEach(vertex => {\n          boundingBox.min.x = Math.min(boundingBox.min.x, vertex[0]);\n          boundingBox.min.y = Math.min(boundingBox.min.y, vertex[2]);\n          boundingBox.min.z = Math.min(boundingBox.min.z, vertex[1]);\n          boundingBox.max.x = Math.max(boundingBox.max.x, vertex[0]);\n          boundingBox.max.y = Math.max(boundingBox.max.y, vertex[2]);\n          boundingBox.max.z = Math.max(boundingBox.max.z, vertex[1]);\n        });\n\n        // 计算中心点\n        const center = new THREE.Vector3((boundingBox.min.x + boundingBox.max.x) / 2, (boundingBox.min.y + boundingBox.max.y) / 2, (boundingBox.min.z + boundingBox.max.z) / 2);\n\n        // 创建顶点\n        const vertexArray = new Float32Array(obj.geometry.vertices.flatMap(vertex => [vertex[0] - center.x, vertex[2] - center.y, vertex[1] - center.z]));\n        const geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\n\n        // 创建面索引\n        const indices = [];\n        obj.geometry.faces.forEach(face => {\n          if (face.length === 4) {\n            indices.push(face[0], face[1], face[2]);\n            indices.push(face[2], face[3], face[0]);\n          } else {\n            indices.push(...face);\n          }\n        });\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\n        geometry.computeVertexNormals();\n\n        // 创建材质\n        const material = new THREE.MeshPhongMaterial({\n          transparent: obj.material.transparency > 0,\n          opacity: 1 - obj.material.transparency,\n          side: THREE.DoubleSide,\n          roughness: obj.material.roughness || 0.5\n        });\n\n        // 加载纹理或设置颜色\n        if (obj.material.texture) {\n          const textureLoader = new THREE.TextureLoader();\n          textureLoader.load(obj.material.texture, texture => {\n            material.map = texture;\n            material.needsUpdate = true;\n          });\n        } else {\n          material.color = new THREE.Color(obj.material.color[0] / 255, obj.material.color[1] / 255, obj.material.color[2] / 255);\n        }\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.position.copy(center);\n        mesh.userData.id = obj.id;\n        mesh.userData.layer = obj.layer;\n        mesh.castShadow = true;\n        mesh.receiveShadow = true;\n        scene.add(mesh);\n        meshesRef.current.push(mesh);\n      }\n    });\n  };\n\n  // 监听 buildingData 变化\n  useEffect(() => {\n    if (buildingData) {\n      updateModel(buildingData);\n    }\n  }, [buildingData]);\n\n  // 更新 JSON 数据\n  const updateJSONData = (object, transform) => {\n    if (!buildingData) return;\n    const updatedData = {\n      ...buildingData,\n      objects: buildingData.objects.map(obj => {\n        if (obj.id === object.userData.id) {\n          return {\n            ...obj,\n            transform: {\n              position: [transform.position.x, transform.position.z, transform.position.y],\n              rotation: [transform.rotation.x, transform.rotation.z, transform.rotation.y],\n              scale: [transform.scale.x, transform.scale.z, transform.scale.y]\n            }\n          };\n        }\n        return obj;\n      })\n    };\n    updateBuildingData(updatedData);\n  };\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Initialize scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf0f0f0);\n\n    // Initialize camera\n    const camera = new THREE.PerspectiveCamera(75, containerRef.current.clientWidth / containerRef.current.clientHeight, 0.1, 1000);\n    camera.position.set(15, 15, 15);\n    camera.lookAt(0, 0, 0);\n\n    // Initialize renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n    renderer.shadowMap.enabled = true;\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Add lights\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 20, 10);\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n\n    // Add grid helper\n    const gridHelper = new THREE.GridHelper(20, 20);\n    scene.add(gridHelper);\n\n    // Add orbit controls\n    const orbitControls = new OrbitControls(camera, renderer.domElement);\n    orbitControls.enableDamping = true;\n    orbitControls.dampingFactor = 0.05;\n\n    // Add transform controls\n    const transformControls = new TransformControls(camera, renderer.domElement);\n    transformControls.addEventListener('dragging-changed', event => {\n      orbitControls.enabled = !event.value;\n    });\n    scene.add(transformControls);\n\n    // Load initial model\n    loadModel(scene, buildingData);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      orbitControls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!containerRef.current) return;\n      const width = containerRef.current.clientWidth;\n      const height = containerRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Handle object selection\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    const onPointerDown = event => {\n      if (!containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      mouse.x = (event.clientX - rect.left) / containerRef.current.clientWidth * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / containerRef.current.clientHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(scene.children, true);\n      if (intersects.length > 0) {\n        const object = intersects[0].object;\n        if (object && object.parent && object.parent.type === 'Group') {\n          transformControls.attach(object.parent);\n        } else if (object) {\n          transformControls.attach(object);\n        }\n      } else {\n        transformControls.detach();\n      }\n    };\n    renderer.domElement.addEventListener('pointerdown', onPointerDown);\n\n    // Cleanup\n    return () => {\n      var _containerRef$current;\n      window.removeEventListener('resize', handleResize);\n      renderer.domElement.removeEventListener('pointerdown', onPointerDown);\n      (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.removeChild(renderer.domElement);\n      scene.traverse(object => {\n        if (object.geometry) {\n          object.geometry.dispose();\n        }\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n      renderer.dispose();\n    };\n  }, [updateBuildingData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const loadModel = (scene, data) => {\n    // Clear existing objects\n    scene.children = scene.children.filter(child => child.type === 'GridHelper' || child.type === 'TransformControls' || child.type === 'DirectionalLight' || child.type === 'AmbientLight');\n\n    // Create a group for the building\n    const buildingGroup = new THREE.Group();\n    scene.add(buildingGroup);\n\n    // Create materials\n    const materials = {};\n    data.objects.forEach(obj => {\n      if (!materials[obj.material.name]) {\n        materials[obj.material.name] = new THREE.MeshStandardMaterial({\n          color: obj.material.color,\n          side: THREE.DoubleSide\n        });\n      }\n    });\n\n    // Create objects\n    data.objects.forEach(obj => {\n      const geometry = new THREE.BoxGeometry(obj.bounding_box.max[0] - obj.bounding_box.min[0], obj.bounding_box.max[1] - obj.bounding_box.min[1], obj.bounding_box.max[2] - obj.bounding_box.min[2]);\n      const mesh = new THREE.Mesh(geometry, materials[obj.material.name]);\n      mesh.position.set((obj.bounding_box.max[0] + obj.bounding_box.min[0]) / 2, (obj.bounding_box.max[1] + obj.bounding_box.min[1]) / 2, (obj.bounding_box.max[2] + obj.bounding_box.min[2]) / 2);\n      mesh.userData = {\n        id: obj.id,\n        layer: obj.layer,\n        type: obj.type\n      };\n      buildingGroup.add(mesh);\n    });\n  };\n\n  // 添加键盘快捷键支持\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (!selectedObjectRef.current || !transformControlsRef.current) return;\n      switch (event.key.toLowerCase()) {\n        case 'g':\n          transformControlsRef.current.setMode('translate');\n          break;\n        case 'r':\n          transformControlsRef.current.setMode('rotate');\n          break;\n        case 's':\n          transformControlsRef.current.setMode('scale');\n          break;\n        case 'escape':\n          if (selectedObjectRef.current) {\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\n            selectedObjectRef.current = null;\n            transformControlsRef.current.detach();\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"w-full h-full\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n};\n_s(DesignStudio, \"yht3jtjp6WssB2RyJu1SesDk9TI=\", false, function () {\n  return [useStore];\n});\n_c = DesignStudio;\nexport default DesignStudio;\nvar _c;\n$RefreshReg$(_c, \"DesignStudio\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","TransformControls","useStore","jsxDEV","_jsxDEV","DesignStudio","_s","containerRef","sceneRef","cameraRef","rendererRef","controlsRef","transformControlsRef","meshesRef","selectedObjectRef","buildingData","updateBuildingData","updateModel","data","current","scene","forEach","mesh","remove","objects","obj","index","geometry","vertices","boundingBox","min","Vector3","Infinity","max","vertex","x","Math","y","z","center","vertexArray","Float32Array","flatMap","BufferGeometry","setAttribute","BufferAttribute","indices","faces","face","length","push","setIndex","Uint16Array","computeVertexNormals","material","MeshPhongMaterial","transparent","transparency","opacity","side","DoubleSide","roughness","texture","textureLoader","TextureLoader","load","map","needsUpdate","color","Color","Mesh","position","copy","userData","id","layer","castShadow","receiveShadow","add","updateJSONData","object","transform","updatedData","rotation","scale","Scene","background","camera","PerspectiveCamera","clientWidth","clientHeight","set","lookAt","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","directionalLight","DirectionalLight","gridHelper","GridHelper","orbitControls","enableDamping","dampingFactor","transformControls","addEventListener","event","value","loadModel","animate","requestAnimationFrame","update","render","handleResize","width","height","aspect","updateProjectionMatrix","window","raycaster","Raycaster","mouse","Vector2","onPointerDown","rect","getBoundingClientRect","clientX","left","clientY","top","setFromCamera","intersects","intersectObjects","children","parent","type","attach","detach","_containerRef$current","removeEventListener","removeChild","traverse","dispose","Array","isArray","filter","child","buildingGroup","Group","materials","name","MeshStandardMaterial","BoxGeometry","bounding_box","handleKeyDown","key","toLowerCase","setMode","emissive","setHex","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/DesignStudio.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\r\nimport { useStore } from '../store';\r\n\r\nconst DesignStudio = () => {\r\n  const containerRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const controlsRef = useRef(null);\r\n  const transformControlsRef = useRef(null);\r\n  const meshesRef = useRef([]);\r\n  const selectedObjectRef = useRef(null);\r\n  const { buildingData, updateBuildingData } = useStore();\r\n\r\n  // 更新模型函数\r\n  const updateModel = (data) => {\r\n    if (!sceneRef.current) return;\r\n\r\n    const scene = sceneRef.current;\r\n    \r\n    // 清除现有网格\r\n    meshesRef.current.forEach(mesh => scene.remove(mesh));\r\n    meshesRef.current = [];\r\n\r\n    // 加载模型\r\n    data.objects.forEach((obj, index) => {\r\n      if (obj.geometry.vertices) {\r\n        // 计算几何体的边界框\r\n        const boundingBox = {\r\n          min: new THREE.Vector3(Infinity, Infinity, Infinity),\r\n          max: new THREE.Vector3(-Infinity, -Infinity, -Infinity)\r\n        };\r\n        \r\n        // 找出边界框\r\n        obj.geometry.vertices.forEach(vertex => {\r\n          boundingBox.min.x = Math.min(boundingBox.min.x, vertex[0]);\r\n          boundingBox.min.y = Math.min(boundingBox.min.y, vertex[2]);\r\n          boundingBox.min.z = Math.min(boundingBox.min.z, vertex[1]);\r\n          boundingBox.max.x = Math.max(boundingBox.max.x, vertex[0]);\r\n          boundingBox.max.y = Math.max(boundingBox.max.y, vertex[2]);\r\n          boundingBox.max.z = Math.max(boundingBox.max.z, vertex[1]);\r\n        });\r\n        \r\n        // 计算中心点\r\n        const center = new THREE.Vector3(\r\n          (boundingBox.min.x + boundingBox.max.x) / 2,\r\n          (boundingBox.min.y + boundingBox.max.y) / 2,\r\n          (boundingBox.min.z + boundingBox.max.z) / 2\r\n        );\r\n\r\n        // 创建顶点\r\n        const vertexArray = new Float32Array(\r\n          obj.geometry.vertices.flatMap(vertex => [\r\n            vertex[0] - center.x,\r\n            vertex[2] - center.y,\r\n            vertex[1] - center.z\r\n          ])\r\n        );\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\r\n\r\n        // 创建面索引\r\n        const indices = [];\r\n        obj.geometry.faces.forEach(face => {\r\n          if (face.length === 4) {\r\n            indices.push(face[0], face[1], face[2]);\r\n            indices.push(face[2], face[3], face[0]);\r\n          } else {\r\n            indices.push(...face);\r\n          }\r\n        });\r\n\r\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\r\n        geometry.computeVertexNormals();\r\n\r\n        // 创建材质\r\n        const material = new THREE.MeshPhongMaterial({\r\n          transparent: obj.material.transparency > 0,\r\n          opacity: 1 - obj.material.transparency,\r\n          side: THREE.DoubleSide,\r\n          roughness: obj.material.roughness || 0.5\r\n        });\r\n\r\n        // 加载纹理或设置颜色\r\n        if (obj.material.texture) {\r\n          const textureLoader = new THREE.TextureLoader();\r\n          textureLoader.load(obj.material.texture, (texture) => {\r\n            material.map = texture;\r\n            material.needsUpdate = true;\r\n          });\r\n        } else {\r\n          material.color = new THREE.Color(\r\n            obj.material.color[0] / 255,\r\n            obj.material.color[1] / 255,\r\n            obj.material.color[2] / 255\r\n          );\r\n        }\r\n\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.position.copy(center);\r\n        mesh.userData.id = obj.id;\r\n        mesh.userData.layer = obj.layer;\r\n        mesh.castShadow = true;\r\n        mesh.receiveShadow = true;\r\n\r\n        scene.add(mesh);\r\n        meshesRef.current.push(mesh);\r\n      }\r\n    });\r\n  };\r\n\r\n  // 监听 buildingData 变化\r\n  useEffect(() => {\r\n    if (buildingData) {\r\n      updateModel(buildingData);\r\n    }\r\n  }, [buildingData]);\r\n\r\n  // 更新 JSON 数据\r\n  const updateJSONData = (object, transform) => {\r\n    if (!buildingData) return;\r\n\r\n    const updatedData = {\r\n      ...buildingData,\r\n      objects: buildingData.objects.map(obj => {\r\n        if (obj.id === object.userData.id) {\r\n          return {\r\n            ...obj,\r\n            transform: {\r\n              position: [\r\n                transform.position.x,\r\n                transform.position.z,\r\n                transform.position.y\r\n              ],\r\n              rotation: [\r\n                transform.rotation.x,\r\n                transform.rotation.z,\r\n                transform.rotation.y\r\n              ],\r\n              scale: [\r\n                transform.scale.x,\r\n                transform.scale.z,\r\n                transform.scale.y\r\n              ]\r\n            }\r\n          };\r\n        }\r\n        return obj;\r\n      })\r\n    };\r\n\r\n    updateBuildingData(updatedData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    // Initialize scene\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xf0f0f0);\r\n\r\n    // Initialize camera\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      containerRef.current.clientWidth / containerRef.current.clientHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    camera.position.set(15, 15, 15);\r\n    camera.lookAt(0, 0, 0);\r\n\r\n    // Initialize renderer\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    containerRef.current.appendChild(renderer.domElement);\r\n\r\n    // Add lights\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(10, 20, 10);\r\n    directionalLight.castShadow = true;\r\n    scene.add(directionalLight);\r\n\r\n    // Add grid helper\r\n    const gridHelper = new THREE.GridHelper(20, 20);\r\n    scene.add(gridHelper);\r\n\r\n    // Add orbit controls\r\n    const orbitControls = new OrbitControls(camera, renderer.domElement);\r\n    orbitControls.enableDamping = true;\r\n    orbitControls.dampingFactor = 0.05;\r\n\r\n    // Add transform controls\r\n    const transformControls = new TransformControls(camera, renderer.domElement);\r\n    transformControls.addEventListener('dragging-changed', (event) => {\r\n      orbitControls.enabled = !event.value;\r\n    });\r\n    scene.add(transformControls);\r\n\r\n    // Load initial model\r\n    loadModel(scene, buildingData);\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      orbitControls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      if (!containerRef.current) return;\r\n      const width = containerRef.current.clientWidth;\r\n      const height = containerRef.current.clientHeight;\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(width, height);\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // Handle object selection\r\n    const raycaster = new THREE.Raycaster();\r\n    const mouse = new THREE.Vector2();\r\n\r\n    const onPointerDown = (event) => {\r\n      if (!containerRef.current) return;\r\n      \r\n      const rect = containerRef.current.getBoundingClientRect();\r\n      mouse.x = ((event.clientX - rect.left) / containerRef.current.clientWidth) * 2 - 1;\r\n      mouse.y = -((event.clientY - rect.top) / containerRef.current.clientHeight) * 2 + 1;\r\n\r\n      raycaster.setFromCamera(mouse, camera);\r\n      const intersects = raycaster.intersectObjects(scene.children, true);\r\n\r\n      if (intersects.length > 0) {\r\n        const object = intersects[0].object;\r\n        if (object && object.parent && object.parent.type === 'Group') {\r\n          transformControls.attach(object.parent);\r\n        } else if (object) {\r\n          transformControls.attach(object);\r\n        }\r\n      } else {\r\n        transformControls.detach();\r\n      }\r\n    };\r\n\r\n    renderer.domElement.addEventListener('pointerdown', onPointerDown);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      renderer.domElement.removeEventListener('pointerdown', onPointerDown);\r\n      containerRef.current?.removeChild(renderer.domElement);\r\n      scene.traverse((object) => {\r\n        if (object.geometry) {\r\n          object.geometry.dispose();\r\n        }\r\n        if (object.material) {\r\n          if (Array.isArray(object.material)) {\r\n            object.material.forEach(material => material.dispose());\r\n          } else {\r\n            object.material.dispose();\r\n          }\r\n        }\r\n      });\r\n      renderer.dispose();\r\n    };\r\n  }, [updateBuildingData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const loadModel = (scene, data) => {\r\n    // Clear existing objects\r\n    scene.children = scene.children.filter(child => \r\n      child.type === 'GridHelper' || \r\n      child.type === 'TransformControls' || \r\n      child.type === 'DirectionalLight' || \r\n      child.type === 'AmbientLight'\r\n    );\r\n\r\n    // Create a group for the building\r\n    const buildingGroup = new THREE.Group();\r\n    scene.add(buildingGroup);\r\n\r\n    // Create materials\r\n    const materials = {};\r\n    data.objects.forEach(obj => {\r\n      if (!materials[obj.material.name]) {\r\n        materials[obj.material.name] = new THREE.MeshStandardMaterial({\r\n          color: obj.material.color,\r\n          side: THREE.DoubleSide\r\n        });\r\n      }\r\n    });\r\n\r\n    // Create objects\r\n    data.objects.forEach(obj => {\r\n      const geometry = new THREE.BoxGeometry(\r\n        obj.bounding_box.max[0] - obj.bounding_box.min[0],\r\n        obj.bounding_box.max[1] - obj.bounding_box.min[1],\r\n        obj.bounding_box.max[2] - obj.bounding_box.min[2]\r\n      );\r\n\r\n      const mesh = new THREE.Mesh(geometry, materials[obj.material.name]);\r\n      mesh.position.set(\r\n        (obj.bounding_box.max[0] + obj.bounding_box.min[0]) / 2,\r\n        (obj.bounding_box.max[1] + obj.bounding_box.min[1]) / 2,\r\n        (obj.bounding_box.max[2] + obj.bounding_box.min[2]) / 2\r\n      );\r\n\r\n      mesh.userData = {\r\n        id: obj.id,\r\n        layer: obj.layer,\r\n        type: obj.type\r\n      };\r\n\r\n      buildingGroup.add(mesh);\r\n    });\r\n  };\r\n\r\n  // 添加键盘快捷键支持\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if (!selectedObjectRef.current || !transformControlsRef.current) return;\r\n      \r\n      switch (event.key.toLowerCase()) {\r\n        case 'g':\r\n          transformControlsRef.current.setMode('translate');\r\n          break;\r\n        case 'r':\r\n          transformControlsRef.current.setMode('rotate');\r\n          break;\r\n        case 's':\r\n          transformControlsRef.current.setMode('scale');\r\n          break;\r\n        case 'escape':\r\n          if (selectedObjectRef.current) {\r\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\r\n            selectedObjectRef.current = null;\r\n            transformControlsRef.current.detach();\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, []);\r\n\r\n  return (\r\n    <div \r\n      ref={containerRef} \r\n      className=\"w-full h-full\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default DesignStudio; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}