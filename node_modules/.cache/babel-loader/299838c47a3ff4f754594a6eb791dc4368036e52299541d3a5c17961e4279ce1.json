{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useStore } from '../store';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [currentValue, setCurrentValue] = useState(1);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const {\n    buildingData,\n    updateBuildingData\n  } = useStore();\n  const [userInput, setUserInput] = useState('');\n  const [bedroomCount, setBedroomCount] = useState(0);\n  const [floorCount, setFloorCount] = useState(1);\n  const [floorHeight, setFloorHeight] = useState(2500);\n  const messagesEndRef = useRef(null);\n  const steps = [{\n    prompt: \"Let's start designing your building. First, please select the number of floors (1-10):\",\n    property: \"floors\",\n    type: \"range\",\n    min: 1,\n    max: 10,\n    response: \"Great! You've selected {value} floors.\"\n  }, {\n    prompt: \"Next, please select the number of bedrooms (1-6):\",\n    property: \"bedrooms\",\n    type: \"range\",\n    min: 1,\n    max: 6,\n    response: \"Great! You've selected {value} bedrooms.\"\n  }, {\n    prompt: \"Now, please select the ceiling height (meters):\",\n    property: \"floor_height\",\n    type: \"range\",\n    min: 2000,\n    max: 4000,\n    step: 100,\n    response: \"Ceiling height set to {value} meters.\"\n  }, {\n    prompt: \"Finally, please select the roof style:\",\n    property: \"roof_style\",\n    type: \"select\",\n    options: [\"flat\", \"gable\", \"hip\"],\n    response: \"You've selected a {value} roof.\"\n  }];\n  const handleValueChange = value => {\n    setCurrentValue(value);\n    setIsProcessing(true);\n\n    // Update JSON data\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        [steps[currentStep].property]: value\n      }\n    };\n\n    // Update object list\n    if (steps[currentStep].property === \"floors\") {\n      const floorHeight = buildingData.building.floor_height;\n      const wallThickness = buildingData.building.wall_thickness;\n      const width = buildingData.building.width;\n      const depth = buildingData.building.depth;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * value],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                if (vertex[2] === floorHeight + 100) {\n                  return [vertex[0], vertex[1], floorHeight * value + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"bedrooms\") {\n      // Remove existing bedrooms\n      updatedData.objects = updatedData.objects.filter(obj => obj.layer !== \"Bedrooms\");\n\n      // Add new bedrooms based on count\n      const bedroomWidth = 6000; // Standard bedroom width\n      const bedroomDepth = 4000; // Standard bedroom depth\n      const corridorWidth = 1500; // Corridor width\n      const wallThickness = 150; // Wall thickness\n\n      // Calculate new building width based on bedroom count\n      const newWidth = value <= 2 ? 12000 : bedroomWidth * value + corridorWidth;\n      const newDepth = 8000; // Keep constant depth for two rows\n\n      // Update building dimensions\n      updatedData.building.width = newWidth;\n      updatedData.building.depth = newDepth;\n\n      // Add new bedrooms\n      for (let i = 0; i < value; i++) {\n        const row = Math.floor(i / 2);\n        const col = i % 2;\n        const xStart = col === 0 ? 150 : 6150;\n        const yStart = row === 0 ? 150 : 4150;\n        const xEnd = col === 0 ? 6000 : 11850;\n        const yEnd = row === 0 ? 4000 : 7850;\n        updatedData.objects.push({\n          id: `bedroom-${String(i + 1).padStart(3, '0')}`,\n          layer: \"Bedrooms\",\n          type: \"Bedroom\",\n          material: {\n            name: \"Interior Wall\",\n            color: \"#E8E8E8\",\n            texture: \"wallpaper\"\n          },\n          bounding_box: {\n            min: [xStart, yStart, 0],\n            max: [xEnd, yEnd, 2500]\n          },\n          geometry: {\n            vertices: [[xStart, yStart, 0], [xEnd, yStart, 0], [xEnd, yEnd, 0], [xStart, yEnd, 0], [xStart, yStart, 2500], [xEnd, yStart, 2500], [xEnd, yEnd, 2500], [xStart, yEnd, 2500]],\n            faces: [[0, 1, 2, 3], [4, 5, 6, 7], [0, 1, 5, 4], [1, 2, 6, 5], [2, 3, 7, 6], [3, 0, 4, 7]]\n          }\n        });\n      }\n\n      // Update living room size\n      const livingRoom = updatedData.objects.find(obj => obj.id === \"living-room\");\n      if (livingRoom) {\n        livingRoom.bounding_box.max = [newWidth - wallThickness, newDepth - wallThickness, 2500];\n        livingRoom.geometry.vertices = [[150, 150, 0], [newWidth - wallThickness, 150, 0], [newWidth - wallThickness, newDepth - wallThickness, 0], [150, newDepth - wallThickness, 0], [150, 150, 2500], [newWidth - wallThickness, 150, 2500], [newWidth - wallThickness, newDepth - wallThickness, 2500], [150, newDepth - wallThickness, 2500]];\n      }\n\n      // Update outer walls based on new dimensions\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          if (obj.id === \"wall-001\" || obj.id === \"wall-002\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n          if (obj.id === \"wall-004\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                min: [newWidth - wallThickness, obj.bounding_box.min[1], obj.bounding_box.min[2]],\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width - wallThickness) {\n                    return [newWidth - wallThickness, vertex[1], vertex[2]];\n                  }\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[0] === buildingData.building.width) {\n                  return [newWidth, vertex[1], vertex[2]];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"floor_height\") {\n      const floorHeight = value;\n      const numFloors = buildingData.building.floors;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * numFloors],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors + 100) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"roof_style\") {\n      // Update roof style\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            material: {\n              ...obj.material,\n              name: value === \"flat\" ? \"Flat Roof\" : value === \"gable\" ? \"Gable Roof\" : \"Hip Roof\"\n            }\n          };\n        }\n        return obj;\n      });\n    }\n    updateBuildingData(updatedData);\n\n    // Print updated JSON data to console\n    console.log('Updated Building Data:', JSON.stringify(updatedData, null, 2));\n\n    // Add user selection to chat history\n    setChatHistory(prev => [...prev, {\n      type: 'user',\n      content: `${value}`\n    }, {\n      type: 'assistant',\n      content: steps[currentStep].response.replace('{value}', value)\n    }]);\n\n    // Simulate LLM processing time\n    setTimeout(() => {\n      setIsProcessing(false);\n      if (currentStep < steps.length - 1) {\n        setCurrentStep(prev => prev + 1);\n        setCurrentValue(1);\n      }\n    }, 1000);\n  };\n  const startDesignProcess = () => {\n    setCurrentStep(0);\n    setCurrentValue(1);\n    setChatHistory([]);\n    setIsProcessing(false);\n  };\n  useEffect(() => {\n    startDesignProcess();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleBedroomCountChange = count => {\n    // 更新状态\n    setBedroomCount(count);\n\n    // 构建用户消息\n    const userMessage = {\n      type: 'user',\n      content: `I want ${count} bedrooms in the building.`\n    };\n\n    // 添加到聊天历史\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // 构建 ChatGPT 响应\n    const chatGPTResponse = {\n      type: 'assistant',\n      content: `Great! You've selected ${count} bedrooms. ${count === 0 ? 'This will create a spacious open-plan living area.' : count === 1 ? 'A single bedroom provides a cozy living space.' : count === 2 ? 'Two bedrooms offer a good balance for a small family.' : count === 3 ? 'Three bedrooms are perfect for a growing family.' : count === 4 ? 'Four bedrooms provide ample space for a large family or guests.' : count === 5 ? 'Five bedrooms create a luxurious living space.' : 'Six bedrooms make this a truly expansive residence.'} Design suggestion: Consider adding ${count > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms, and ensure each bedroom has access to natural light and ventilation.`\n    };\n\n    // 添加到聊天历史\n    setChatHistory(prev => [...prev, chatGPTResponse]);\n\n    // 更新建筑数据\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        bedrooms: count\n      }\n    };\n    updateBuildingData(updatedData);\n  };\n  const handleFloorCountChange = count => {\n    setFloorCount(count);\n    const userMessage = {\n      type: 'user',\n      content: `I want ${count} floors in the building.`\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n    const chatGPTResponse = {\n      type: 'assistant',\n      content: `Great! You've selected ${count} floors. ${count === 1 ? 'A single-story building provides easy access and maintenance.' : count === 2 ? 'A two-story building offers good separation of living and sleeping areas.' : count === 3 ? 'A three-story building creates a more urban living experience.' : count === 4 ? 'A four-story building maximizes land use while maintaining comfort.' : count === 5 ? 'A five-story building provides a good balance of space and accessibility.' : count === 6 ? 'A six-story building creates a more vertical living experience.' : count === 7 ? 'A seven-story building offers panoramic views.' : count === 8 ? 'An eight-story building provides extensive living space.' : count === 9 ? 'A nine-story building creates a significant presence in the landscape.' : 'A ten-story building makes a bold architectural statement.'} Design suggestion: Consider adding ${count > 3 ? 'an elevator' : 'a central staircase'} for vertical circulation, and ensure proper fire safety measures are in place.`\n    };\n    setChatHistory(prev => [...prev, chatGPTResponse]);\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        floors: count\n      }\n    };\n    updateBuildingData(updatedData);\n  };\n  const handleFloorHeightChange = height => {\n    setFloorHeight(height);\n    const userMessage = {\n      type: 'user',\n      content: `I want the floor height to be ${height}mm.`\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n    const chatGPTResponse = {\n      type: 'assistant',\n      content: `I'll update the floor height to ${height}mm. ${height <= 2500 ? 'A lower ceiling height creates a cozy atmosphere.' : height <= 3000 ? 'A standard ceiling height provides good comfort.' : 'A higher ceiling height creates a more spacious and luxurious feel.'} Design suggestion: Consider the placement of windows and lighting fixtures to complement the ceiling height.`\n    };\n    setChatHistory(prev => [...prev, chatGPTResponse]);\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        floor_height: height\n      }\n    };\n    updateBuildingData(updatedData);\n  };\n\n  // 添加新的对话处理函数\n  const handleUserInput = () => {\n    if (!userInput.trim()) return;\n\n    // 添加用户消息\n    const userMessage = {\n      type: 'user',\n      content: userInput\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // 处理用户输入并生成响应\n    let response = '';\n    let updatedData = {\n      ...buildingData\n    };\n\n    // 简单的意图识别\n    if (userInput.toLowerCase().includes('bedroom')) {\n      var _userInput$match;\n      const count = parseInt(((_userInput$match = userInput.match(/\\d+/)) === null || _userInput$match === void 0 ? void 0 : _userInput$match[0]) || '0');\n      if (count >= 0 && count <= 6) {\n        response = `I'll update the design to include ${count} bedrooms. ${count === 0 ? 'This will create a spacious open-plan living area.' : count === 1 ? 'A single bedroom provides a cozy living space.' : count === 2 ? 'Two bedrooms offer a good balance for a small family.' : count === 3 ? 'Three bedrooms are perfect for a growing family.' : count === 4 ? 'Four bedrooms provide ample space for a large family or guests.' : count === 5 ? 'Five bedrooms create a luxurious living space.' : 'Six bedrooms make this a truly expansive residence.'} Design suggestion: Consider adding ${count > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms, and ensure each bedroom has access to natural light and ventilation.`;\n        updatedData.building.bedrooms = count;\n      }\n    } else if (userInput.toLowerCase().includes('floor')) {\n      var _userInput$match2;\n      const count = parseInt(((_userInput$match2 = userInput.match(/\\d+/)) === null || _userInput$match2 === void 0 ? void 0 : _userInput$match2[0]) || '0');\n      if (count >= 1 && count <= 10) {\n        response = `I'll update the building to have ${count} floors. ${count === 1 ? 'A single-story building provides easy access and maintenance.' : count === 2 ? 'A two-story building offers good separation of living and sleeping areas.' : count === 3 ? 'A three-story building creates a more urban living experience.' : count === 4 ? 'A four-story building maximizes land use while maintaining comfort.' : count === 5 ? 'A five-story building provides a good balance of space and accessibility.' : count === 6 ? 'A six-story building creates a more vertical living experience.' : count === 7 ? 'A seven-story building offers panoramic views.' : count === 8 ? 'An eight-story building provides extensive living space.' : count === 9 ? 'A nine-story building creates a significant presence in the landscape.' : 'A ten-story building makes a bold architectural statement.'} Design suggestion: Consider adding ${count > 3 ? 'an elevator' : 'a central staircase'} for vertical circulation, and ensure proper fire safety measures are in place.`;\n        updatedData.building.floors = count;\n      }\n    } else if (userInput.toLowerCase().includes('width')) {\n      var _userInput$match3;\n      const width = parseInt(((_userInput$match3 = userInput.match(/\\d+/)) === null || _userInput$match3 === void 0 ? void 0 : _userInput$match3[0]) || '0');\n      if (width >= 5000 && width <= 20000) {\n        response = `I'll update the building width to ${width}mm. ${width <= 8000 ? 'A narrow building creates an efficient, compact living space.' : width <= 12000 ? 'A medium-width building provides comfortable room sizes.' : 'A wide building offers spacious living areas and flexibility in room arrangement.'} Design suggestion: Consider the orientation of the building to maximize natural light and ventilation based on the site conditions.`;\n        updatedData.building.width = width;\n      }\n    } else if (userInput.toLowerCase().includes('depth')) {\n      var _userInput$match4;\n      const depth = parseInt(((_userInput$match4 = userInput.match(/\\d+/)) === null || _userInput$match4 === void 0 ? void 0 : _userInput$match4[0]) || '0');\n      if (depth >= 5000 && depth <= 20000) {\n        response = `I'll update the building depth to ${depth}mm. ${depth <= 8000 ? 'A shallow building ensures good natural light penetration.' : depth <= 12000 ? 'A medium-depth building provides balanced room proportions.' : 'A deep building offers extensive living space but requires careful lighting design.'} Design suggestion: Consider adding ${depth > 10000 ? 'internal courtyards or light wells' : 'strategically placed windows'} to ensure adequate natural lighting throughout the space.`;\n        updatedData.building.depth = depth;\n      }\n    } else {\n      response = \"I'm not sure how to interpret that. Could you please specify what aspect of the building you'd like to modify? You can mention bedrooms, floors, width, or depth.\";\n    }\n\n    // 添加助手响应\n    const assistantMessage = {\n      type: 'assistant',\n      content: response\n    };\n    setChatHistory(prev => [...prev, assistantMessage]);\n\n    // 更新建筑数据\n    updateBuildingData(updatedData);\n\n    // 滚动到最新消息\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollTop = messagesEndRef.current.scrollHeight;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      ref: messagesEndRef,\n      children: chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Number of Bedrooms: \", bedroomCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"6\",\n            value: bedroomCount,\n            onChange: e => handleBedroomCountChange(parseInt(e.target.value)),\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Number of Floors: \", floorCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"10\",\n            value: floorCount,\n            onChange: e => handleFloorCountChange(parseInt(e.target.value)),\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Floor Height: \", floorHeight, \"mm\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"2000\",\n            max: \"4000\",\n            step: \"100\",\n            value: floorHeight,\n            onChange: e => handleFloorHeightChange(parseInt(e.target.value)),\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyPress: e => e.key === 'Enter' && handleUserInput(),\n          placeholder: \"Type your message...\",\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUserInput,\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 564,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"ykBDEcVBnL72BeqbwCdqS1M3SLQ=\", false, function () {\n  return [useStore];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useStore","jsxDEV","_jsxDEV","ChatInterface","_s","currentStep","setCurrentStep","currentValue","setCurrentValue","chatHistory","setChatHistory","isProcessing","setIsProcessing","buildingData","updateBuildingData","userInput","setUserInput","bedroomCount","setBedroomCount","floorCount","setFloorCount","floorHeight","setFloorHeight","messagesEndRef","steps","prompt","property","type","min","max","response","step","options","handleValueChange","value","updatedData","building","floor_height","wallThickness","wall_thickness","width","depth","objects","map","obj","layer","bounding_box","geometry","vertices","vertex","filter","bedroomWidth","bedroomDepth","corridorWidth","newWidth","newDepth","i","row","Math","floor","col","xStart","yStart","xEnd","yEnd","push","id","String","padStart","material","name","color","texture","faces","livingRoom","find","numFloors","floors","console","log","JSON","stringify","prev","content","replace","setTimeout","length","startDesignProcess","handleBedroomCountChange","count","userMessage","chatGPTResponse","bedrooms","handleFloorCountChange","handleFloorHeightChange","height","handleUserInput","trim","toLowerCase","includes","_userInput$match","parseInt","match","_userInput$match2","_userInput$match3","_userInput$match4","assistantMessage","current","scrollTop","scrollHeight","className","children","ref","message","index","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useStore } from '../store';\nimport './ChatInterface.css';\n\nconst ChatInterface = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [currentValue, setCurrentValue] = useState(1);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { buildingData, updateBuildingData } = useStore();\n  const [userInput, setUserInput] = useState('');\n  const [bedroomCount, setBedroomCount] = useState(0);\n  const [floorCount, setFloorCount] = useState(1);\n  const [floorHeight, setFloorHeight] = useState(2500);\n  const messagesEndRef = useRef(null);\n\n  const steps = [\n    {\n      prompt: \"Let's start designing your building. First, please select the number of floors (1-10):\",\n      property: \"floors\",\n      type: \"range\",\n      min: 1,\n      max: 10,\n      response: \"Great! You've selected {value} floors.\"\n    },\n    {\n      prompt: \"Next, please select the number of bedrooms (1-6):\",\n      property: \"bedrooms\",\n      type: \"range\",\n      min: 1,\n      max: 6,\n      response: \"Great! You've selected {value} bedrooms.\"\n    },\n    {\n      prompt: \"Now, please select the ceiling height (meters):\",\n      property: \"floor_height\",\n      type: \"range\",\n      min: 2000,\n      max: 4000,\n      step: 100,\n      response: \"Ceiling height set to {value} meters.\"\n    },\n    {\n      prompt: \"Finally, please select the roof style:\",\n      property: \"roof_style\",\n      type: \"select\",\n      options: [\"flat\", \"gable\", \"hip\"],\n      response: \"You've selected a {value} roof.\"\n    }\n  ];\n\n  const handleValueChange = (value) => {\n    setCurrentValue(value);\n    setIsProcessing(true);\n\n    // Update JSON data\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        [steps[currentStep].property]: value\n      }\n    };\n\n    // Update object list\n    if (steps[currentStep].property === \"floors\") {\n      const floorHeight = buildingData.building.floor_height;\n      const wallThickness = buildingData.building.wall_thickness;\n      const width = buildingData.building.width;\n      const depth = buildingData.building.depth;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * value],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * value + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === floorHeight) {\n                  return [vertex[0], vertex[1], floorHeight * value];\n                }\n                if (vertex[2] === floorHeight + 100) {\n                  return [vertex[0], vertex[1], floorHeight * value + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"bedrooms\") {\n      // Remove existing bedrooms\n      updatedData.objects = updatedData.objects.filter(obj => obj.layer !== \"Bedrooms\");\n\n      // Add new bedrooms based on count\n      const bedroomWidth = 6000; // Standard bedroom width\n      const bedroomDepth = 4000; // Standard bedroom depth\n      const corridorWidth = 1500; // Corridor width\n      const wallThickness = 150; // Wall thickness\n\n      // Calculate new building width based on bedroom count\n      const newWidth = value <= 2 ? 12000 : bedroomWidth * value + corridorWidth;\n      const newDepth = 8000; // Keep constant depth for two rows\n\n      // Update building dimensions\n      updatedData.building.width = newWidth;\n      updatedData.building.depth = newDepth;\n\n      // Add new bedrooms\n      for (let i = 0; i < value; i++) {\n        const row = Math.floor(i / 2);\n        const col = i % 2;\n        const xStart = col === 0 ? 150 : 6150;\n        const yStart = row === 0 ? 150 : 4150;\n        const xEnd = col === 0 ? 6000 : 11850;\n        const yEnd = row === 0 ? 4000 : 7850;\n\n        updatedData.objects.push({\n          id: `bedroom-${String(i + 1).padStart(3, '0')}`,\n          layer: \"Bedrooms\",\n          type: \"Bedroom\",\n          material: {\n            name: \"Interior Wall\",\n            color: \"#E8E8E8\",\n            texture: \"wallpaper\"\n          },\n          bounding_box: {\n            min: [xStart, yStart, 0],\n            max: [xEnd, yEnd, 2500]\n          },\n          geometry: {\n            vertices: [\n              [xStart, yStart, 0],\n              [xEnd, yStart, 0],\n              [xEnd, yEnd, 0],\n              [xStart, yEnd, 0],\n              [xStart, yStart, 2500],\n              [xEnd, yStart, 2500],\n              [xEnd, yEnd, 2500],\n              [xStart, yEnd, 2500]\n            ],\n            faces: [\n              [0, 1, 2, 3],\n              [4, 5, 6, 7],\n              [0, 1, 5, 4],\n              [1, 2, 6, 5],\n              [2, 3, 7, 6],\n              [3, 0, 4, 7]\n            ]\n          }\n        });\n      }\n\n      // Update living room size\n      const livingRoom = updatedData.objects.find(obj => obj.id === \"living-room\");\n      if (livingRoom) {\n        livingRoom.bounding_box.max = [newWidth - wallThickness, newDepth - wallThickness, 2500];\n        livingRoom.geometry.vertices = [\n          [150, 150, 0],\n          [newWidth - wallThickness, 150, 0],\n          [newWidth - wallThickness, newDepth - wallThickness, 0],\n          [150, newDepth - wallThickness, 0],\n          [150, 150, 2500],\n          [newWidth - wallThickness, 150, 2500],\n          [newWidth - wallThickness, newDepth - wallThickness, 2500],\n          [150, newDepth - wallThickness, 2500]\n        ];\n      }\n\n      // Update outer walls based on new dimensions\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          if (obj.id === \"wall-001\" || obj.id === \"wall-002\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n          if (obj.id === \"wall-004\") {\n            return {\n              ...obj,\n              bounding_box: {\n                ...obj.bounding_box,\n                min: [newWidth - wallThickness, obj.bounding_box.min[1], obj.bounding_box.min[2]],\n                max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n              },\n              geometry: {\n                ...obj.geometry,\n                vertices: obj.geometry.vertices.map(vertex => {\n                  if (vertex[0] === buildingData.building.width - wallThickness) {\n                    return [newWidth - wallThickness, vertex[1], vertex[2]];\n                  }\n                  if (vertex[0] === buildingData.building.width) {\n                    return [newWidth, vertex[1], vertex[2]];\n                  }\n                  return vertex;\n                })\n              }\n            };\n          }\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [newWidth, obj.bounding_box.max[1], obj.bounding_box.max[2]]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[0] === buildingData.building.width) {\n                  return [newWidth, vertex[1], vertex[2]];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"floor_height\") {\n      const floorHeight = value;\n      const numFloors = buildingData.building.floors;\n\n      // Update all wall heights\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Walls\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            bounding_box: {\n              ...obj.bounding_box,\n              min: [obj.bounding_box.min[0], obj.bounding_box.min[1], floorHeight * numFloors],\n              max: [obj.bounding_box.max[0], obj.bounding_box.max[1], floorHeight * numFloors + 100]\n            },\n            geometry: {\n              ...obj.geometry,\n              vertices: obj.geometry.vertices.map(vertex => {\n                if (vertex[2] === buildingData.building.floor_height) {\n                  return [vertex[0], vertex[1], floorHeight];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors];\n                }\n                if (vertex[2] === buildingData.building.floor_height * numFloors + 100) {\n                  return [vertex[0], vertex[1], floorHeight * numFloors + 100];\n                }\n                return vertex;\n              })\n            }\n          };\n        }\n        return obj;\n      });\n    } else if (steps[currentStep].property === \"roof_style\") {\n      // Update roof style\n      updatedData.objects = updatedData.objects.map(obj => {\n        if (obj.layer === \"Roof\") {\n          return {\n            ...obj,\n            material: {\n              ...obj.material,\n              name: value === \"flat\" ? \"Flat Roof\" : value === \"gable\" ? \"Gable Roof\" : \"Hip Roof\"\n            }\n          };\n        }\n        return obj;\n      });\n    }\n\n    updateBuildingData(updatedData);\n\n    // Print updated JSON data to console\n    console.log('Updated Building Data:', JSON.stringify(updatedData, null, 2));\n\n    // Add user selection to chat history\n    setChatHistory(prev => [\n      ...prev,\n      { type: 'user', content: `${value}` },\n      { type: 'assistant', content: steps[currentStep].response.replace('{value}', value) }\n    ]);\n\n    // Simulate LLM processing time\n    setTimeout(() => {\n      setIsProcessing(false);\n      if (currentStep < steps.length - 1) {\n        setCurrentStep(prev => prev + 1);\n        setCurrentValue(1);\n      }\n    }, 1000);\n  };\n\n  const startDesignProcess = () => {\n    setCurrentStep(0);\n    setCurrentValue(1);\n    setChatHistory([]);\n    setIsProcessing(false);\n  };\n\n  useEffect(() => {\n    startDesignProcess();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleBedroomCountChange = (count) => {\n    // 更新状态\n    setBedroomCount(count);\n    \n    // 构建用户消息\n    const userMessage = {\n      type: 'user',\n      content: `I want ${count} bedrooms in the building.`\n    };\n    \n    // 添加到聊天历史\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // 构建 ChatGPT 响应\n    const chatGPTResponse = {\n      type: 'assistant',\n      content: `Great! You've selected ${count} bedrooms. ${\n        count === 0 ? 'This will create a spacious open-plan living area.' :\n        count === 1 ? 'A single bedroom provides a cozy living space.' :\n        count === 2 ? 'Two bedrooms offer a good balance for a small family.' :\n        count === 3 ? 'Three bedrooms are perfect for a growing family.' :\n        count === 4 ? 'Four bedrooms provide ample space for a large family or guests.' :\n        count === 5 ? 'Five bedrooms create a luxurious living space.' :\n        'Six bedrooms make this a truly expansive residence.'\n      } Design suggestion: Consider adding ${count > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms, and ensure each bedroom has access to natural light and ventilation.`\n    };\n\n    // 添加到聊天历史\n    setChatHistory(prev => [...prev, chatGPTResponse]);\n\n    // 更新建筑数据\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        bedrooms: count\n      }\n    };\n    updateBuildingData(updatedData);\n  };\n\n  const handleFloorCountChange = (count) => {\n    setFloorCount(count);\n    \n    const userMessage = {\n      type: 'user',\n      content: `I want ${count} floors in the building.`\n    };\n    \n    setChatHistory(prev => [...prev, userMessage]);\n\n    const chatGPTResponse = {\n      type: 'assistant',\n      content: `Great! You've selected ${count} floors. ${\n        count === 1 ? 'A single-story building provides easy access and maintenance.' :\n        count === 2 ? 'A two-story building offers good separation of living and sleeping areas.' :\n        count === 3 ? 'A three-story building creates a more urban living experience.' :\n        count === 4 ? 'A four-story building maximizes land use while maintaining comfort.' :\n        count === 5 ? 'A five-story building provides a good balance of space and accessibility.' :\n        count === 6 ? 'A six-story building creates a more vertical living experience.' :\n        count === 7 ? 'A seven-story building offers panoramic views.' :\n        count === 8 ? 'An eight-story building provides extensive living space.' :\n        count === 9 ? 'A nine-story building creates a significant presence in the landscape.' :\n        'A ten-story building makes a bold architectural statement.'\n      } Design suggestion: Consider adding ${count > 3 ? 'an elevator' : 'a central staircase'} for vertical circulation, and ensure proper fire safety measures are in place.`\n    };\n\n    setChatHistory(prev => [...prev, chatGPTResponse]);\n\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        floors: count\n      }\n    };\n    updateBuildingData(updatedData);\n  };\n\n  const handleFloorHeightChange = (height) => {\n    setFloorHeight(height);\n    \n    const userMessage = {\n      type: 'user',\n      content: `I want the floor height to be ${height}mm.`\n    };\n    \n    setChatHistory(prev => [...prev, userMessage]);\n\n    const chatGPTResponse = {\n      type: 'assistant',\n      content: `I'll update the floor height to ${height}mm. ${\n        height <= 2500 ? 'A lower ceiling height creates a cozy atmosphere.' :\n        height <= 3000 ? 'A standard ceiling height provides good comfort.' :\n        'A higher ceiling height creates a more spacious and luxurious feel.'\n      } Design suggestion: Consider the placement of windows and lighting fixtures to complement the ceiling height.`\n    };\n\n    setChatHistory(prev => [...prev, chatGPTResponse]);\n\n    const updatedData = {\n      ...buildingData,\n      building: {\n        ...buildingData.building,\n        floor_height: height\n      }\n    };\n    updateBuildingData(updatedData);\n  };\n\n  // 添加新的对话处理函数\n  const handleUserInput = () => {\n    if (!userInput.trim()) return;\n\n    // 添加用户消息\n    const userMessage = {\n      type: 'user',\n      content: userInput\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // 处理用户输入并生成响应\n    let response = '';\n    let updatedData = { ...buildingData };\n\n    // 简单的意图识别\n    if (userInput.toLowerCase().includes('bedroom')) {\n      const count = parseInt(userInput.match(/\\d+/)?.[0] || '0');\n      if (count >= 0 && count <= 6) {\n        response = `I'll update the design to include ${count} bedrooms. ${\n          count === 0 ? 'This will create a spacious open-plan living area.' :\n          count === 1 ? 'A single bedroom provides a cozy living space.' :\n          count === 2 ? 'Two bedrooms offer a good balance for a small family.' :\n          count === 3 ? 'Three bedrooms are perfect for a growing family.' :\n          count === 4 ? 'Four bedrooms provide ample space for a large family or guests.' :\n          count === 5 ? 'Five bedrooms create a luxurious living space.' :\n          'Six bedrooms make this a truly expansive residence.'\n        } Design suggestion: Consider adding ${count > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms, and ensure each bedroom has access to natural light and ventilation.`;\n        \n        updatedData.building.bedrooms = count;\n      }\n    } else if (userInput.toLowerCase().includes('floor')) {\n      const count = parseInt(userInput.match(/\\d+/)?.[0] || '0');\n      if (count >= 1 && count <= 10) {\n        response = `I'll update the building to have ${count} floors. ${\n          count === 1 ? 'A single-story building provides easy access and maintenance.' :\n          count === 2 ? 'A two-story building offers good separation of living and sleeping areas.' :\n          count === 3 ? 'A three-story building creates a more urban living experience.' :\n          count === 4 ? 'A four-story building maximizes land use while maintaining comfort.' :\n          count === 5 ? 'A five-story building provides a good balance of space and accessibility.' :\n          count === 6 ? 'A six-story building creates a more vertical living experience.' :\n          count === 7 ? 'A seven-story building offers panoramic views.' :\n          count === 8 ? 'An eight-story building provides extensive living space.' :\n          count === 9 ? 'A nine-story building creates a significant presence in the landscape.' :\n          'A ten-story building makes a bold architectural statement.'\n        } Design suggestion: Consider adding ${count > 3 ? 'an elevator' : 'a central staircase'} for vertical circulation, and ensure proper fire safety measures are in place.`;\n        \n        updatedData.building.floors = count;\n      }\n    } else if (userInput.toLowerCase().includes('width')) {\n      const width = parseInt(userInput.match(/\\d+/)?.[0] || '0');\n      if (width >= 5000 && width <= 20000) {\n        response = `I'll update the building width to ${width}mm. ${\n          width <= 8000 ? 'A narrow building creates an efficient, compact living space.' :\n          width <= 12000 ? 'A medium-width building provides comfortable room sizes.' :\n          'A wide building offers spacious living areas and flexibility in room arrangement.'\n        } Design suggestion: Consider the orientation of the building to maximize natural light and ventilation based on the site conditions.`;\n        \n        updatedData.building.width = width;\n      }\n    } else if (userInput.toLowerCase().includes('depth')) {\n      const depth = parseInt(userInput.match(/\\d+/)?.[0] || '0');\n      if (depth >= 5000 && depth <= 20000) {\n        response = `I'll update the building depth to ${depth}mm. ${\n          depth <= 8000 ? 'A shallow building ensures good natural light penetration.' :\n          depth <= 12000 ? 'A medium-depth building provides balanced room proportions.' :\n          'A deep building offers extensive living space but requires careful lighting design.'\n        } Design suggestion: Consider adding ${depth > 10000 ? 'internal courtyards or light wells' : 'strategically placed windows'} to ensure adequate natural lighting throughout the space.`;\n        \n        updatedData.building.depth = depth;\n      }\n    } else {\n      response = \"I'm not sure how to interpret that. Could you please specify what aspect of the building you'd like to modify? You can mention bedrooms, floors, width, or depth.\";\n    }\n\n    // 添加助手响应\n    const assistantMessage = {\n      type: 'assistant',\n      content: response\n    };\n    setChatHistory(prev => [...prev, assistantMessage]);\n\n    // 更新建筑数据\n    updateBuildingData(updatedData);\n\n    // 滚动到最新消息\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollTop = messagesEndRef.current.scrollHeight;\n    }\n  };\n\n  return (\n    <div className=\"chat-interface\">\n      <div className=\"chat-messages\" ref={messagesEndRef}>\n        {chatHistory.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            <div className=\"message-content\">{message.content}</div>\n          </div>\n        ))}\n      </div>\n      <div className=\"chat-input-container\">\n        <div className=\"slider-controls\">\n          <div className=\"slider-group\">\n            <label>Number of Bedrooms: {bedroomCount}</label>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"6\"\n              value={bedroomCount}\n              onChange={(e) => handleBedroomCountChange(parseInt(e.target.value))}\n              className=\"slider\"\n            />\n          </div>\n          <div className=\"slider-group\">\n            <label>Number of Floors: {floorCount}</label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"10\"\n              value={floorCount}\n              onChange={(e) => handleFloorCountChange(parseInt(e.target.value))}\n              className=\"slider\"\n            />\n          </div>\n          <div className=\"slider-group\">\n            <label>Floor Height: {floorHeight}mm</label>\n            <input\n              type=\"range\"\n              min=\"2000\"\n              max=\"4000\"\n              step=\"100\"\n              value={floorHeight}\n              onChange={(e) => handleFloorHeightChange(parseInt(e.target.value))}\n              className=\"slider\"\n            />\n          </div>\n        </div>\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && handleUserInput()}\n            placeholder=\"Type your message...\"\n            className=\"chat-input\"\n          />\n          <button onClick={handleUserInput} className=\"send-button\">\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}