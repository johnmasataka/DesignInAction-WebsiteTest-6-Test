{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\DesignStudio.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\nimport { useStore } from '../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DesignStudio = () => {\n  _s();\n  const containerRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const transformControlsRef = useRef(null);\n  const meshesRef = useRef([]);\n  const selectedObjectRef = useRef(null);\n  const {\n    buildingData,\n    updateBuildingData\n  } = useStore();\n\n  // 更新模型函数\n  const updateModel = data => {\n    if (!sceneRef.current) return;\n    const scene = sceneRef.current;\n\n    // 清除现有网格\n    meshesRef.current.forEach(mesh => scene.remove(mesh));\n    meshesRef.current = [];\n\n    // 加载模型\n    data.objects.forEach((obj, index) => {\n      if (obj.geometry.vertices) {\n        // 计算几何体的边界框\n        const boundingBox = {\n          min: new THREE.Vector3(Infinity, Infinity, Infinity),\n          max: new THREE.Vector3(-Infinity, -Infinity, -Infinity)\n        };\n\n        // 找出边界框\n        obj.geometry.vertices.forEach(vertex => {\n          boundingBox.min.x = Math.min(boundingBox.min.x, vertex[0]);\n          boundingBox.min.y = Math.min(boundingBox.min.y, vertex[2]);\n          boundingBox.min.z = Math.min(boundingBox.min.z, vertex[1]);\n          boundingBox.max.x = Math.max(boundingBox.max.x, vertex[0]);\n          boundingBox.max.y = Math.max(boundingBox.max.y, vertex[2]);\n          boundingBox.max.z = Math.max(boundingBox.max.z, vertex[1]);\n        });\n\n        // 计算中心点\n        const center = new THREE.Vector3((boundingBox.min.x + boundingBox.max.x) / 2, (boundingBox.min.y + boundingBox.max.y) / 2, (boundingBox.min.z + boundingBox.max.z) / 2);\n\n        // 创建顶点\n        const vertexArray = new Float32Array(obj.geometry.vertices.flatMap(vertex => [vertex[0] - center.x, vertex[2] - center.y, vertex[1] - center.z]));\n        const geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\n\n        // 创建面索引\n        const indices = [];\n        obj.geometry.faces.forEach(face => {\n          if (face.length === 4) {\n            indices.push(face[0], face[1], face[2]);\n            indices.push(face[2], face[3], face[0]);\n          } else {\n            indices.push(...face);\n          }\n        });\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\n        geometry.computeVertexNormals();\n\n        // 创建材质\n        const material = new THREE.MeshPhongMaterial({\n          transparent: obj.material.transparency > 0,\n          opacity: 1 - obj.material.transparency,\n          side: THREE.DoubleSide,\n          roughness: obj.material.roughness || 0.5\n        });\n\n        // 加载纹理或设置颜色\n        if (obj.material.texture) {\n          const textureLoader = new THREE.TextureLoader();\n          textureLoader.load(obj.material.texture, texture => {\n            material.map = texture;\n            material.needsUpdate = true;\n          });\n        } else {\n          material.color = new THREE.Color(obj.material.color[0] / 255, obj.material.color[1] / 255, obj.material.color[2] / 255);\n        }\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.position.copy(center);\n        mesh.userData.id = obj.id;\n        mesh.userData.layer = obj.layer;\n        mesh.castShadow = true;\n        mesh.receiveShadow = true;\n        scene.add(mesh);\n        meshesRef.current.push(mesh);\n      }\n    });\n  };\n\n  // 监听 buildingData 变化\n  useEffect(() => {\n    if (buildingData) {\n      updateModel(buildingData);\n    }\n  }, [buildingData]);\n\n  // 更新 JSON 数据\n  const updateJSONData = (object, transform) => {\n    if (!buildingData) return;\n    const updatedData = {\n      ...buildingData,\n      objects: buildingData.objects.map(obj => {\n        if (obj.id === object.userData.id) {\n          return {\n            ...obj,\n            transform: {\n              position: [transform.position.x, transform.position.z, transform.position.y],\n              rotation: [transform.rotation.x, transform.rotation.z, transform.rotation.y],\n              scale: [transform.scale.x, transform.scale.z, transform.scale.y]\n            }\n          };\n        }\n        return obj;\n      })\n    };\n    updateBuildingData(updatedData);\n  };\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // 初始化场景\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf0f0f0);\n    sceneRef.current = scene;\n\n    // 初始化相机\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth * 0.8 / window.innerHeight, 0.1, 50000);\n    camera.position.set(15000, 15000, 15000);\n    camera.lookAt(0, 0, 0);\n    cameraRef.current = camera;\n\n    // 初始化渲染器\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // 添加光源\n    const ambientLight = new THREE.AmbientLight(0x404040, 2);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 2);\n    directionalLight.position.set(10000, 20000, 10000);\n    scene.add(directionalLight);\n\n    // 添加网格\n    const gridHelper = new THREE.GridHelper(30000, 30);\n    scene.add(gridHelper);\n\n    // 初始化控制器\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.mouseButtons = {\n      LEFT: null,\n      MIDDLE: null,\n      RIGHT: THREE.MOUSE.ROTATE\n    };\n    controls.enablePan = true;\n    controls.enableZoom = true;\n    controls.panButton = THREE.MOUSE.MIDDLE;\n    controlsRef.current = controls;\n\n    // 初始化变换控制器\n    const transformControls = new TransformControls(camera, renderer.domElement);\n    transformControls.setSize(1);\n    transformControls.setTranslationSnap(100);\n    transformControls.setRotationSnap(THREE.MathUtils.degToRad(15));\n    transformControls.setScaleSnap(0.1);\n    scene.add(transformControls);\n    transformControlsRef.current = transformControls;\n\n    // 添加变换控制器事件监听\n    transformControls.addEventListener('dragging-changed', event => {\n      controls.enabled = !event.value;\n      if (!event.value && selectedObjectRef.current) {\n        updateJSONData(selectedObjectRef.current, {\n          position: selectedObjectRef.current.position,\n          rotation: selectedObjectRef.current.rotation,\n          scale: selectedObjectRef.current.scale\n        });\n      }\n    });\n\n    // 加载初始模型\n    fetch('/building.json').then(response => response.json()).then(jsonModel => {\n      updateBuildingData(jsonModel);\n    }).catch(error => console.error('Error loading model:', error));\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 窗口大小调整\n    const handleResize = () => {\n      if (!camera || !renderer) return;\n      camera.aspect = window.innerWidth * 0.8 / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // 清理函数\n    const container = containerRef.current;\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (container) {\n        container.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, [updateBuildingData]);\n\n  // 添加键盘快捷键支持\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (!selectedObjectRef.current || !transformControlsRef.current) return;\n      switch (event.key.toLowerCase()) {\n        case 'g':\n          transformControlsRef.current.setMode('translate');\n          break;\n        case 'r':\n          transformControlsRef.current.setMode('rotate');\n          break;\n        case 's':\n          transformControlsRef.current.setMode('scale');\n          break;\n        case 'escape':\n          if (selectedObjectRef.current) {\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\n            selectedObjectRef.current = null;\n            transformControlsRef.current.detach();\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"w-full h-full\",\n    onMouseDown: e => {\n      if (e.button === 0) {\n        // 左键点击\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2();\n        const rect = rendererRef.current.domElement.getBoundingClientRect();\n        mouse.x = (e.clientX - rect.left) / rect.width * 2 - 1;\n        mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\n        raycaster.setFromCamera(mouse, cameraRef.current);\n        const intersects = raycaster.intersectObjects(meshesRef.current);\n        if (intersects.length > 0) {\n          const object = intersects[0].object;\n          if (selectedObjectRef.current !== object) {\n            if (selectedObjectRef.current) {\n              selectedObjectRef.current.material.emissive.setHex(0x000000);\n            }\n            selectedObjectRef.current = object;\n            object.material.emissive.setHex(0x333333);\n            transformControlsRef.current.attach(object);\n          }\n        } else {\n          if (selectedObjectRef.current) {\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\n            selectedObjectRef.current = null;\n            transformControlsRef.current.detach();\n          }\n        }\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n};\n_s(DesignStudio, \"yht3jtjp6WssB2RyJu1SesDk9TI=\", false, function () {\n  return [useStore];\n});\n_c = DesignStudio;\nexport default DesignStudio;\nvar _c;\n$RefreshReg$(_c, \"DesignStudio\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","TransformControls","useStore","jsxDEV","_jsxDEV","DesignStudio","_s","containerRef","sceneRef","cameraRef","rendererRef","controlsRef","transformControlsRef","meshesRef","selectedObjectRef","buildingData","updateBuildingData","updateModel","data","current","scene","forEach","mesh","remove","objects","obj","index","geometry","vertices","boundingBox","min","Vector3","Infinity","max","vertex","x","Math","y","z","center","vertexArray","Float32Array","flatMap","BufferGeometry","setAttribute","BufferAttribute","indices","faces","face","length","push","setIndex","Uint16Array","computeVertexNormals","material","MeshPhongMaterial","transparent","transparency","opacity","side","DoubleSide","roughness","texture","textureLoader","TextureLoader","load","map","needsUpdate","color","Color","Mesh","position","copy","userData","id","layer","castShadow","receiveShadow","add","updateJSONData","object","transform","updatedData","rotation","scale","Scene","background","camera","PerspectiveCamera","window","innerWidth","innerHeight","set","lookAt","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","directionalLight","DirectionalLight","gridHelper","GridHelper","controls","mouseButtons","LEFT","MIDDLE","RIGHT","MOUSE","ROTATE","enablePan","enableZoom","panButton","transformControls","setTranslationSnap","setRotationSnap","MathUtils","degToRad","setScaleSnap","addEventListener","event","value","fetch","then","response","json","jsonModel","catch","error","console","animate","requestAnimationFrame","update","render","handleResize","aspect","updateProjectionMatrix","container","removeEventListener","removeChild","dispose","handleKeyDown","key","toLowerCase","setMode","emissive","setHex","detach","ref","className","onMouseDown","e","button","raycaster","Raycaster","mouse","Vector2","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","setFromCamera","intersects","intersectObjects","attach","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/DesignStudio.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\r\nimport { useStore } from '../store';\r\n\r\nconst DesignStudio = () => {\r\n  const containerRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const controlsRef = useRef(null);\r\n  const transformControlsRef = useRef(null);\r\n  const meshesRef = useRef([]);\r\n  const selectedObjectRef = useRef(null);\r\n  const { buildingData, updateBuildingData } = useStore();\r\n\r\n  // 更新模型函数\r\n  const updateModel = (data) => {\r\n    if (!sceneRef.current) return;\r\n\r\n    const scene = sceneRef.current;\r\n    \r\n    // 清除现有网格\r\n    meshesRef.current.forEach(mesh => scene.remove(mesh));\r\n    meshesRef.current = [];\r\n\r\n    // 加载模型\r\n    data.objects.forEach((obj, index) => {\r\n      if (obj.geometry.vertices) {\r\n        // 计算几何体的边界框\r\n        const boundingBox = {\r\n          min: new THREE.Vector3(Infinity, Infinity, Infinity),\r\n          max: new THREE.Vector3(-Infinity, -Infinity, -Infinity)\r\n        };\r\n        \r\n        // 找出边界框\r\n        obj.geometry.vertices.forEach(vertex => {\r\n          boundingBox.min.x = Math.min(boundingBox.min.x, vertex[0]);\r\n          boundingBox.min.y = Math.min(boundingBox.min.y, vertex[2]);\r\n          boundingBox.min.z = Math.min(boundingBox.min.z, vertex[1]);\r\n          boundingBox.max.x = Math.max(boundingBox.max.x, vertex[0]);\r\n          boundingBox.max.y = Math.max(boundingBox.max.y, vertex[2]);\r\n          boundingBox.max.z = Math.max(boundingBox.max.z, vertex[1]);\r\n        });\r\n        \r\n        // 计算中心点\r\n        const center = new THREE.Vector3(\r\n          (boundingBox.min.x + boundingBox.max.x) / 2,\r\n          (boundingBox.min.y + boundingBox.max.y) / 2,\r\n          (boundingBox.min.z + boundingBox.max.z) / 2\r\n        );\r\n\r\n        // 创建顶点\r\n        const vertexArray = new Float32Array(\r\n          obj.geometry.vertices.flatMap(vertex => [\r\n            vertex[0] - center.x,\r\n            vertex[2] - center.y,\r\n            vertex[1] - center.z\r\n          ])\r\n        );\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\r\n\r\n        // 创建面索引\r\n        const indices = [];\r\n        obj.geometry.faces.forEach(face => {\r\n          if (face.length === 4) {\r\n            indices.push(face[0], face[1], face[2]);\r\n            indices.push(face[2], face[3], face[0]);\r\n          } else {\r\n            indices.push(...face);\r\n          }\r\n        });\r\n\r\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\r\n        geometry.computeVertexNormals();\r\n\r\n        // 创建材质\r\n        const material = new THREE.MeshPhongMaterial({\r\n          transparent: obj.material.transparency > 0,\r\n          opacity: 1 - obj.material.transparency,\r\n          side: THREE.DoubleSide,\r\n          roughness: obj.material.roughness || 0.5\r\n        });\r\n\r\n        // 加载纹理或设置颜色\r\n        if (obj.material.texture) {\r\n          const textureLoader = new THREE.TextureLoader();\r\n          textureLoader.load(obj.material.texture, (texture) => {\r\n            material.map = texture;\r\n            material.needsUpdate = true;\r\n          });\r\n        } else {\r\n          material.color = new THREE.Color(\r\n            obj.material.color[0] / 255,\r\n            obj.material.color[1] / 255,\r\n            obj.material.color[2] / 255\r\n          );\r\n        }\r\n\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.position.copy(center);\r\n        mesh.userData.id = obj.id;\r\n        mesh.userData.layer = obj.layer;\r\n        mesh.castShadow = true;\r\n        mesh.receiveShadow = true;\r\n\r\n        scene.add(mesh);\r\n        meshesRef.current.push(mesh);\r\n      }\r\n    });\r\n  };\r\n\r\n  // 监听 buildingData 变化\r\n  useEffect(() => {\r\n    if (buildingData) {\r\n      updateModel(buildingData);\r\n    }\r\n  }, [buildingData]);\r\n\r\n  // 更新 JSON 数据\r\n  const updateJSONData = (object, transform) => {\r\n    if (!buildingData) return;\r\n\r\n    const updatedData = {\r\n      ...buildingData,\r\n      objects: buildingData.objects.map(obj => {\r\n        if (obj.id === object.userData.id) {\r\n          return {\r\n            ...obj,\r\n            transform: {\r\n              position: [\r\n                transform.position.x,\r\n                transform.position.z,\r\n                transform.position.y\r\n              ],\r\n              rotation: [\r\n                transform.rotation.x,\r\n                transform.rotation.z,\r\n                transform.rotation.y\r\n              ],\r\n              scale: [\r\n                transform.scale.x,\r\n                transform.scale.z,\r\n                transform.scale.y\r\n              ]\r\n            }\r\n          };\r\n        }\r\n        return obj;\r\n      })\r\n    };\r\n\r\n    updateBuildingData(updatedData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    // 初始化场景\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xf0f0f0);\r\n    sceneRef.current = scene;\r\n\r\n    // 初始化相机\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth * 0.8 / window.innerHeight,\r\n      0.1,\r\n      50000\r\n    );\r\n    camera.position.set(15000, 15000, 15000);\r\n    camera.lookAt(0, 0, 0);\r\n    cameraRef.current = camera;\r\n\r\n    // 初始化渲染器\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    containerRef.current.appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n\r\n    // 添加光源\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 2);\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 2);\r\n    directionalLight.position.set(10000, 20000, 10000);\r\n    scene.add(directionalLight);\r\n\r\n    // 添加网格\r\n    const gridHelper = new THREE.GridHelper(30000, 30);\r\n    scene.add(gridHelper);\r\n\r\n    // 初始化控制器\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.mouseButtons = {\r\n      LEFT: null,\r\n      MIDDLE: null,\r\n      RIGHT: THREE.MOUSE.ROTATE\r\n    };\r\n    controls.enablePan = true;\r\n    controls.enableZoom = true;\r\n    controls.panButton = THREE.MOUSE.MIDDLE;\r\n    controlsRef.current = controls;\r\n\r\n    // 初始化变换控制器\r\n    const transformControls = new TransformControls(camera, renderer.domElement);\r\n    transformControls.setSize(1);\r\n    transformControls.setTranslationSnap(100);\r\n    transformControls.setRotationSnap(THREE.MathUtils.degToRad(15));\r\n    transformControls.setScaleSnap(0.1);\r\n    scene.add(transformControls);\r\n    transformControlsRef.current = transformControls;\r\n\r\n    // 添加变换控制器事件监听\r\n    transformControls.addEventListener('dragging-changed', (event) => {\r\n      controls.enabled = !event.value;\r\n      if (!event.value && selectedObjectRef.current) {\r\n        updateJSONData(selectedObjectRef.current, {\r\n          position: selectedObjectRef.current.position,\r\n          rotation: selectedObjectRef.current.rotation,\r\n          scale: selectedObjectRef.current.scale\r\n        });\r\n      }\r\n    });\r\n\r\n    // 加载初始模型\r\n    fetch('/building.json')\r\n      .then(response => response.json())\r\n      .then(jsonModel => {\r\n        updateBuildingData(jsonModel);\r\n      })\r\n      .catch(error => console.error('Error loading model:', error));\r\n\r\n    // 动画循环\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // 窗口大小调整\r\n    const handleResize = () => {\r\n      if (!camera || !renderer) return;\r\n      camera.aspect = window.innerWidth * 0.8 / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // 清理函数\r\n    const container = containerRef.current;\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      if (container) {\r\n        container.removeChild(renderer.domElement);\r\n      }\r\n      renderer.dispose();\r\n    };\r\n  }, [updateBuildingData]);\r\n\r\n  // 添加键盘快捷键支持\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if (!selectedObjectRef.current || !transformControlsRef.current) return;\r\n      \r\n      switch (event.key.toLowerCase()) {\r\n        case 'g':\r\n          transformControlsRef.current.setMode('translate');\r\n          break;\r\n        case 'r':\r\n          transformControlsRef.current.setMode('rotate');\r\n          break;\r\n        case 's':\r\n          transformControlsRef.current.setMode('scale');\r\n          break;\r\n        case 'escape':\r\n          if (selectedObjectRef.current) {\r\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\r\n            selectedObjectRef.current = null;\r\n            transformControlsRef.current.detach();\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, []);\r\n\r\n  return (\r\n    <div \r\n      ref={containerRef} \r\n      className=\"w-full h-full\"\r\n      onMouseDown={(e) => {\r\n        if (e.button === 0) { // 左键点击\r\n          const raycaster = new THREE.Raycaster();\r\n          const mouse = new THREE.Vector2();\r\n          const rect = rendererRef.current.domElement.getBoundingClientRect();\r\n          \r\n          mouse.x = ((e.clientX - rect.left) / rect.width) * 2 - 1;\r\n          mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\r\n          \r\n          raycaster.setFromCamera(mouse, cameraRef.current);\r\n          const intersects = raycaster.intersectObjects(meshesRef.current);\r\n          \r\n          if (intersects.length > 0) {\r\n            const object = intersects[0].object;\r\n            if (selectedObjectRef.current !== object) {\r\n              if (selectedObjectRef.current) {\r\n                selectedObjectRef.current.material.emissive.setHex(0x000000);\r\n              }\r\n              selectedObjectRef.current = object;\r\n              object.material.emissive.setHex(0x333333);\r\n              transformControlsRef.current.attach(object);\r\n            }\r\n          } else {\r\n            if (selectedObjectRef.current) {\r\n              selectedObjectRef.current.material.emissive.setHex(0x000000);\r\n              selectedObjectRef.current = null;\r\n              transformControlsRef.current.detach();\r\n            }\r\n          }\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DesignStudio; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}