{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useStore } from '../store';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [chatHistory, setChatHistory] = useState([]);\n  const {\n    buildingData,\n    updateBuildingData\n  } = useStore();\n  const [bedroomCount, setBedroomCount] = useState(0);\n  const [floorCount, setFloorCount] = useState(1);\n  const [floorHeight, setFloorHeight] = useState(2500);\n  const [roofStyle, setRoofStyle] = useState('flat');\n  const [eaveLength, setEaveLength] = useState(500);\n  const [wallMaterial, setWallMaterial] = useState('brick');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const generateMockResponse = (userMessage, context) => {\n    const {\n      step,\n      currentValues,\n      newValue\n    } = context;\n    const key = Object.keys(newValue)[0];\n    const value = newValue[key];\n    if (step === \"Basic Structure\") {\n      switch (key) {\n        case \"number of bedrooms\":\n          return `I've updated the design to include ${value} bedrooms. ${value === 0 ? 'This creates a spacious open-plan living area.' : value === 1 ? 'A single bedroom provides a cozy living space.' : value === 2 ? 'Two bedrooms offer a good balance for a small family.' : value === 3 ? 'Three bedrooms are perfect for a growing family.' : value === 4 ? 'Four bedrooms provide ample space for a large family or guests.' : value === 5 ? 'Five bedrooms create a luxurious living space.' : 'Six bedrooms make this a truly expansive residence.'} Design suggestion: Consider adding ${value > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms.`;\n        case \"number of floors\":\n          return `I've updated the building to have ${value} floors. ${value === 1 ? 'A single-story building provides easy access and maintenance.' : value === 2 ? 'A two-story building offers good separation of living and sleeping areas.' : value === 3 ? 'A three-story building creates a more urban living experience.' : value === 4 ? 'A four-story building maximizes land use while maintaining comfort.' : value === 5 ? 'A five-story building provides a good balance of space and accessibility.' : value === 6 ? 'A six-story building creates a more vertical living experience.' : value === 7 ? 'A seven-story building offers panoramic views.' : value === 8 ? 'An eight-story building provides extensive living space.' : value === 9 ? 'A nine-story building creates a significant presence in the landscape.' : 'A ten-story building makes a bold architectural statement.'} Design suggestion: Consider adding ${value > 3 ? 'an elevator' : 'a central staircase'} for vertical circulation.`;\n        case \"floor height (mm)\":\n          return `I've updated the floor height to ${value}mm. ${value <= 2500 ? 'A lower ceiling height creates a cozy atmosphere.' : value <= 3000 ? 'A standard ceiling height provides good comfort.' : 'A higher ceiling height creates a more spacious and luxurious feel.'} Design suggestion: Consider the placement of windows and lighting fixtures to complement the ceiling height.`;\n      }\n    } else if (step === \"Exterior Design\") {\n      switch (key) {\n        case \"roof style\":\n          return `I've updated the roof style to ${value}. ${value === 'flat' ? 'A flat roof provides a modern, minimalist look and can be used as a rooftop garden or terrace.' : value === 'gable' ? 'A gable roof offers excellent water drainage and a classic architectural style.' : 'A hip roof provides better wind resistance and a more contemporary appearance.'} Design suggestion: Consider adding ${value === 'flat' ? 'a rooftop garden' : 'solar panels'} to maximize the roof's functionality.`;\n        case \"eave length (mm)\":\n          return `I've updated the eave length to ${value}mm. ${value <= 300 ? 'A shorter eave provides a clean, modern look.' : value <= 600 ? 'A medium eave length offers good protection from the elements.' : 'A longer eave provides excellent protection from sun and rain.'} Design suggestion: Consider the local climate when determining the optimal eave length.`;\n        case \"wall material\":\n          return `I've updated the wall material to ${value}. ${value === 'brick' ? 'Brick provides excellent durability and thermal mass.' : value === 'concrete' ? 'Concrete offers superior strength and modern aesthetics.' : value === 'wood' ? 'Wood creates a warm, natural atmosphere.' : 'Glass provides maximum natural light and modern transparency.'} Design suggestion: Consider the maintenance requirements and local climate when choosing wall materials.`;\n      }\n    }\n    return \"I've updated the design according to your specifications.\";\n  };\n  const generateChatGPTResponse = async (userMessage, context) => {\n    setIsLoading(true);\n    try {\n      // Check if API key is available\n      if (!process.env.REACT_APP_OPENAI_API_KEY) {\n        return generateMockResponse(userMessage, context);\n      }\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [{\n            role: \"system\",\n            content: \"You are an expert architectural designer assistant. Provide concise, professional responses with specific design suggestions based on the user's input.\"\n          }, {\n            role: \"user\",\n            content: `Current building context: ${JSON.stringify(context)}\\nUser message: ${userMessage}`\n          }],\n          temperature: 0.7,\n          max_tokens: 150\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n        throw new Error('Invalid response format from OpenAI API');\n      }\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error generating ChatGPT response:', error);\n      return generateMockResponse(userMessage, context);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const updateBuildingDataWithStep = (step, values) => {\n    let updatedData = {\n      ...buildingData\n    };\n    if (step === 0) {\n      updatedData.building = {\n        ...updatedData.building,\n        bedrooms: values.bedroomCount,\n        floors: values.floorCount,\n        floor_height: values.floorHeight\n      };\n    } else if (step === 1) {\n      updatedData.building = {\n        ...updatedData.building,\n        roof_style: values.roofStyle,\n        eave_length: values.eaveLength,\n        wall_material: values.wallMaterial\n      };\n    }\n    updateBuildingData(updatedData);\n  };\n  const handleControlChange = async (control, value, step) => {\n    // Update local state\n    control.setValue(value);\n\n    // Create user message\n    const userMessage = {\n      type: 'user',\n      content: `I want ${value} ${control.label.toLowerCase()}.`\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // Update building data\n    const context = {\n      step: steps[step].title,\n      currentValues: {\n        bedroomCount,\n        floorCount,\n        floorHeight,\n        roofStyle,\n        eaveLength,\n        wallMaterial\n      },\n      newValue: {\n        [control.label.toLowerCase()]: value\n      }\n    };\n    updateBuildingDataWithStep(step, context.currentValues);\n\n    // Generate and add ChatGPT response\n    const gptResponse = await generateChatGPTResponse(userMessage.content, context);\n    const assistantMessage = {\n      type: 'assistant',\n      content: gptResponse\n    };\n    setChatHistory(prev => [...prev, assistantMessage]);\n  };\n  const steps = [{\n    title: \"Basic Structure\",\n    controls: [{\n      label: \"Number of Bedrooms\",\n      value: bedroomCount,\n      setValue: setBedroomCount,\n      min: 0,\n      max: 6,\n      onChange: value => handleControlChange(steps[0].controls[0], value, 0)\n    }, {\n      label: \"Number of Floors\",\n      value: floorCount,\n      setValue: setFloorCount,\n      min: 1,\n      max: 10,\n      onChange: value => handleControlChange(steps[0].controls[1], value, 0)\n    }, {\n      label: \"Floor Height (mm)\",\n      value: floorHeight,\n      setValue: setFloorHeight,\n      min: 2000,\n      max: 4000,\n      step: 100,\n      onChange: value => handleControlChange(steps[0].controls[2], value, 0)\n    }]\n  }, {\n    title: \"Exterior Design\",\n    controls: [{\n      label: \"Roof Style\",\n      type: \"select\",\n      value: roofStyle,\n      setValue: setRoofStyle,\n      options: [{\n        value: 'flat',\n        label: 'Flat Roof'\n      }, {\n        value: 'gable',\n        label: 'Gable Roof'\n      }, {\n        value: 'hip',\n        label: 'Hip Roof'\n      }],\n      onChange: value => handleControlChange(steps[1].controls[0], value, 1)\n    }, {\n      label: \"Eave Length (mm)\",\n      value: eaveLength,\n      setValue: setEaveLength,\n      min: 0,\n      max: 1000,\n      step: 100,\n      onChange: value => handleControlChange(steps[1].controls[1], value, 1)\n    }, {\n      label: \"Wall Material\",\n      type: \"select\",\n      value: wallMaterial,\n      setValue: setWallMaterial,\n      options: [{\n        value: 'brick',\n        label: 'Brick'\n      }, {\n        value: 'concrete',\n        label: 'Concrete'\n      }, {\n        value: 'wood',\n        label: 'Wood'\n      }, {\n        value: 'glass',\n        label: 'Glass'\n      }],\n      onChange: value => handleControlChange(steps[1].controls[2], value, 1)\n    }]\n  }];\n  const handleConfirm = async () => {\n    const currentStepData = steps[currentStep];\n\n    // Generate confirmation message using ChatGPT\n    const context = {\n      step: currentStepData.title,\n      currentValues: {\n        bedroomCount,\n        floorCount,\n        floorHeight,\n        roofStyle,\n        eaveLength,\n        wallMaterial\n      }\n    };\n    const confirmationMessage = {\n      type: 'assistant',\n      content: await generateChatGPTResponse(`Confirming the ${currentStepData.title} step with current values.`, context)\n    };\n    setChatHistory(prev => [...prev, confirmationMessage]);\n\n    // Move to next step if available\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      ref: messagesEndRef,\n      children: [chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: \"Thinking...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"step-title\",\n        children: steps[currentStep].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-controls\",\n        children: steps[currentStep].controls.map((control, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: control.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this), control.type === 'select' ? /*#__PURE__*/_jsxDEV(\"select\", {\n            value: control.value,\n            onChange: e => control.onChange(e.target.value),\n            className: \"select-input\",\n            children: control.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              children: option.label\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: control.min,\n            max: control.max,\n            step: control.step || 1,\n            value: control.value,\n            onChange: e => control.onChange(parseInt(e.target.value)),\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"value-display\",\n            children: control.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirm,\n        className: \"confirm-button\",\n        disabled: isLoading,\n        children: [\"Confirm \", steps[currentStep].title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"fffIDhcfzIvXl0d1LIwprYI99AE=\", false, function () {\n  return [useStore];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useStore","jsxDEV","_jsxDEV","ChatInterface","_s","currentStep","setCurrentStep","chatHistory","setChatHistory","buildingData","updateBuildingData","bedroomCount","setBedroomCount","floorCount","setFloorCount","floorHeight","setFloorHeight","roofStyle","setRoofStyle","eaveLength","setEaveLength","wallMaterial","setWallMaterial","isLoading","setIsLoading","messagesEndRef","generateMockResponse","userMessage","context","step","currentValues","newValue","key","Object","keys","value","generateChatGPTResponse","process","env","REACT_APP_OPENAI_API_KEY","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","ok","Error","status","data","json","choices","message","error","console","updateBuildingDataWithStep","values","updatedData","building","bedrooms","floors","floor_height","roof_style","eave_length","wall_material","handleControlChange","control","setValue","type","label","toLowerCase","prev","steps","title","gptResponse","assistantMessage","controls","min","max","onChange","options","handleConfirm","currentStepData","confirmationMessage","length","className","children","ref","map","index","fileName","_jsxFileName","lineNumber","columnNumber","e","target","option","parseInt","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useStore } from '../store';\nimport './ChatInterface.css';\n\nconst ChatInterface = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [chatHistory, setChatHistory] = useState([]);\n  const { buildingData, updateBuildingData } = useStore();\n  const [bedroomCount, setBedroomCount] = useState(0);\n  const [floorCount, setFloorCount] = useState(1);\n  const [floorHeight, setFloorHeight] = useState(2500);\n  const [roofStyle, setRoofStyle] = useState('flat');\n  const [eaveLength, setEaveLength] = useState(500);\n  const [wallMaterial, setWallMaterial] = useState('brick');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  const generateMockResponse = (userMessage, context) => {\n    const { step, currentValues, newValue } = context;\n    const key = Object.keys(newValue)[0];\n    const value = newValue[key];\n\n    if (step === \"Basic Structure\") {\n      switch (key) {\n        case \"number of bedrooms\":\n          return `I've updated the design to include ${value} bedrooms. ${\n            value === 0 ? 'This creates a spacious open-plan living area.' :\n            value === 1 ? 'A single bedroom provides a cozy living space.' :\n            value === 2 ? 'Two bedrooms offer a good balance for a small family.' :\n            value === 3 ? 'Three bedrooms are perfect for a growing family.' :\n            value === 4 ? 'Four bedrooms provide ample space for a large family or guests.' :\n            value === 5 ? 'Five bedrooms create a luxurious living space.' :\n            'Six bedrooms make this a truly expansive residence.'\n          } Design suggestion: Consider adding ${value > 2 ? 'a central corridor' : 'an open hallway'} to connect the bedrooms.`;\n        \n        case \"number of floors\":\n          return `I've updated the building to have ${value} floors. ${\n            value === 1 ? 'A single-story building provides easy access and maintenance.' :\n            value === 2 ? 'A two-story building offers good separation of living and sleeping areas.' :\n            value === 3 ? 'A three-story building creates a more urban living experience.' :\n            value === 4 ? 'A four-story building maximizes land use while maintaining comfort.' :\n            value === 5 ? 'A five-story building provides a good balance of space and accessibility.' :\n            value === 6 ? 'A six-story building creates a more vertical living experience.' :\n            value === 7 ? 'A seven-story building offers panoramic views.' :\n            value === 8 ? 'An eight-story building provides extensive living space.' :\n            value === 9 ? 'A nine-story building creates a significant presence in the landscape.' :\n            'A ten-story building makes a bold architectural statement.'\n          } Design suggestion: Consider adding ${value > 3 ? 'an elevator' : 'a central staircase'} for vertical circulation.`;\n        \n        case \"floor height (mm)\":\n          return `I've updated the floor height to ${value}mm. ${\n            value <= 2500 ? 'A lower ceiling height creates a cozy atmosphere.' :\n            value <= 3000 ? 'A standard ceiling height provides good comfort.' :\n            'A higher ceiling height creates a more spacious and luxurious feel.'\n          } Design suggestion: Consider the placement of windows and lighting fixtures to complement the ceiling height.`;\n      }\n    } else if (step === \"Exterior Design\") {\n      switch (key) {\n        case \"roof style\":\n          return `I've updated the roof style to ${value}. ${\n            value === 'flat' ? 'A flat roof provides a modern, minimalist look and can be used as a rooftop garden or terrace.' :\n            value === 'gable' ? 'A gable roof offers excellent water drainage and a classic architectural style.' :\n            'A hip roof provides better wind resistance and a more contemporary appearance.'\n          } Design suggestion: Consider adding ${value === 'flat' ? 'a rooftop garden' : 'solar panels'} to maximize the roof's functionality.`;\n        \n        case \"eave length (mm)\":\n          return `I've updated the eave length to ${value}mm. ${\n            value <= 300 ? 'A shorter eave provides a clean, modern look.' :\n            value <= 600 ? 'A medium eave length offers good protection from the elements.' :\n            'A longer eave provides excellent protection from sun and rain.'\n          } Design suggestion: Consider the local climate when determining the optimal eave length.`;\n        \n        case \"wall material\":\n          return `I've updated the wall material to ${value}. ${\n            value === 'brick' ? 'Brick provides excellent durability and thermal mass.' :\n            value === 'concrete' ? 'Concrete offers superior strength and modern aesthetics.' :\n            value === 'wood' ? 'Wood creates a warm, natural atmosphere.' :\n            'Glass provides maximum natural light and modern transparency.'\n          } Design suggestion: Consider the maintenance requirements and local climate when choosing wall materials.`;\n      }\n    }\n    return \"I've updated the design according to your specifications.\";\n  };\n\n  const generateChatGPTResponse = async (userMessage, context) => {\n    setIsLoading(true);\n    try {\n      // Check if API key is available\n      if (!process.env.REACT_APP_OPENAI_API_KEY) {\n        return generateMockResponse(userMessage, context);\n      }\n\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are an expert architectural designer assistant. Provide concise, professional responses with specific design suggestions based on the user's input.\"\n            },\n            {\n              role: \"user\",\n              content: `Current building context: ${JSON.stringify(context)}\\nUser message: ${userMessage}`\n            }\n          ],\n          temperature: 0.7,\n          max_tokens: 150\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n        throw new Error('Invalid response format from OpenAI API');\n      }\n\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error generating ChatGPT response:', error);\n      return generateMockResponse(userMessage, context);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateBuildingDataWithStep = (step, values) => {\n    let updatedData = { ...buildingData };\n    \n    if (step === 0) {\n      updatedData.building = {\n        ...updatedData.building,\n        bedrooms: values.bedroomCount,\n        floors: values.floorCount,\n        floor_height: values.floorHeight\n      };\n    } else if (step === 1) {\n      updatedData.building = {\n        ...updatedData.building,\n        roof_style: values.roofStyle,\n        eave_length: values.eaveLength,\n        wall_material: values.wallMaterial\n      };\n    }\n    \n    updateBuildingData(updatedData);\n  };\n\n  const handleControlChange = async (control, value, step) => {\n    // Update local state\n    control.setValue(value);\n\n    // Create user message\n    const userMessage = {\n      type: 'user',\n      content: `I want ${value} ${control.label.toLowerCase()}.`\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // Update building data\n    const context = {\n      step: steps[step].title,\n      currentValues: {\n        bedroomCount,\n        floorCount,\n        floorHeight,\n        roofStyle,\n        eaveLength,\n        wallMaterial\n      },\n      newValue: {\n        [control.label.toLowerCase()]: value\n      }\n    };\n\n    updateBuildingDataWithStep(step, context.currentValues);\n\n    // Generate and add ChatGPT response\n    const gptResponse = await generateChatGPTResponse(userMessage.content, context);\n    const assistantMessage = {\n      type: 'assistant',\n      content: gptResponse\n    };\n    setChatHistory(prev => [...prev, assistantMessage]);\n  };\n\n  const steps = [\n    {\n      title: \"Basic Structure\",\n      controls: [\n        {\n          label: \"Number of Bedrooms\",\n          value: bedroomCount,\n          setValue: setBedroomCount,\n          min: 0,\n          max: 6,\n          onChange: (value) => handleControlChange(steps[0].controls[0], value, 0)\n        },\n        {\n          label: \"Number of Floors\",\n          value: floorCount,\n          setValue: setFloorCount,\n          min: 1,\n          max: 10,\n          onChange: (value) => handleControlChange(steps[0].controls[1], value, 0)\n        },\n        {\n          label: \"Floor Height (mm)\",\n          value: floorHeight,\n          setValue: setFloorHeight,\n          min: 2000,\n          max: 4000,\n          step: 100,\n          onChange: (value) => handleControlChange(steps[0].controls[2], value, 0)\n        }\n      ]\n    },\n    {\n      title: \"Exterior Design\",\n      controls: [\n        {\n          label: \"Roof Style\",\n          type: \"select\",\n          value: roofStyle,\n          setValue: setRoofStyle,\n          options: [\n            { value: 'flat', label: 'Flat Roof' },\n            { value: 'gable', label: 'Gable Roof' },\n            { value: 'hip', label: 'Hip Roof' }\n          ],\n          onChange: (value) => handleControlChange(steps[1].controls[0], value, 1)\n        },\n        {\n          label: \"Eave Length (mm)\",\n          value: eaveLength,\n          setValue: setEaveLength,\n          min: 0,\n          max: 1000,\n          step: 100,\n          onChange: (value) => handleControlChange(steps[1].controls[1], value, 1)\n        },\n        {\n          label: \"Wall Material\",\n          type: \"select\",\n          value: wallMaterial,\n          setValue: setWallMaterial,\n          options: [\n            { value: 'brick', label: 'Brick' },\n            { value: 'concrete', label: 'Concrete' },\n            { value: 'wood', label: 'Wood' },\n            { value: 'glass', label: 'Glass' }\n          ],\n          onChange: (value) => handleControlChange(steps[1].controls[2], value, 1)\n        }\n      ]\n    }\n  ];\n\n  const handleConfirm = async () => {\n    const currentStepData = steps[currentStep];\n    \n    // Generate confirmation message using ChatGPT\n    const context = {\n      step: currentStepData.title,\n      currentValues: {\n        bedroomCount,\n        floorCount,\n        floorHeight,\n        roofStyle,\n        eaveLength,\n        wallMaterial\n      }\n    };\n\n    const confirmationMessage = {\n      type: 'assistant',\n      content: await generateChatGPTResponse(\n        `Confirming the ${currentStepData.title} step with current values.`,\n        context\n      )\n    };\n    \n    setChatHistory(prev => [...prev, confirmationMessage]);\n\n    // Move to next step if available\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n\n  return (\n    <div className=\"chat-interface\">\n      <div className=\"chat-messages\" ref={messagesEndRef}>\n        {chatHistory.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            <div className=\"message-content\">{message.content}</div>\n          </div>\n        ))}\n        {isLoading && (\n          <div className=\"message assistant\">\n            <div className=\"message-content\">Thinking...</div>\n          </div>\n        )}\n      </div>\n      <div className=\"chat-input-container\">\n        <div className=\"step-title\">{steps[currentStep].title}</div>\n        <div className=\"slider-controls\">\n          {steps[currentStep].controls.map((control, index) => (\n            <div key={index} className=\"slider-group\">\n              <label>{control.label}</label>\n              {control.type === 'select' ? (\n                <select\n                  value={control.value}\n                  onChange={(e) => control.onChange(e.target.value)}\n                  className=\"select-input\"\n                >\n                  {control.options.map(option => (\n                    <option key={option.value} value={option.value}>\n                      {option.label}\n                    </option>\n                  ))}\n                </select>\n              ) : (\n                <input\n                  type=\"range\"\n                  min={control.min}\n                  max={control.max}\n                  step={control.step || 1}\n                  value={control.value}\n                  onChange={(e) => control.onChange(parseInt(e.target.value))}\n                  className=\"slider\"\n                />\n              )}\n              <div className=\"value-display\">{control.value}</div>\n            </div>\n          ))}\n        </div>\n        <button onClick={handleConfirm} className=\"confirm-button\" disabled={isLoading}>\n          Confirm {steps[currentStep].title}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}