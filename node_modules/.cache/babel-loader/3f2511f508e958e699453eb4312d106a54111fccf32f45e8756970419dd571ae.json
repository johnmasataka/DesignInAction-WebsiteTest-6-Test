{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\DesignStudio.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\nimport { useStore } from '../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DesignStudio = () => {\n  _s();\n  const containerRef = useRef();\n  const {\n    buildingData\n  } = useStore();\n  const sceneRef = useRef();\n  const cameraRef = useRef();\n  const rendererRef = useRef();\n  const controlsRef = useRef();\n  const transformControlsRef = useRef();\n  const meshesRef = useRef([]);\n  const bodiesRef = useRef([]);\n  const selectedObjectRef = useRef(null);\n  useEffect(() => {\n    // 初始化场景\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf0f0f0);\n    sceneRef.current = scene;\n\n    // 初始化相机\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth * 0.8 / window.innerHeight, 0.1, 50000);\n    camera.position.set(15000, 15000, 15000);\n    camera.lookAt(0, 0, 0);\n    cameraRef.current = camera;\n\n    // 初始化渲染器\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // 添加光源\n    const ambientLight = new THREE.AmbientLight(0x404040, 2);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 2);\n    directionalLight.position.set(10000, 20000, 10000);\n    scene.add(directionalLight);\n\n    // 添加网格\n    const gridHelper = new THREE.GridHelper(30000, 30);\n    scene.add(gridHelper);\n\n    // 初始化控制器\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.mouseButtons = {\n      LEFT: null,\n      MIDDLE: null,\n      RIGHT: THREE.MOUSE.ROTATE\n    };\n    controls.enablePan = true;\n    controls.enableZoom = true;\n    controls.panButton = THREE.MOUSE.MIDDLE;\n    controlsRef.current = controls;\n\n    // 初始化变换控制器\n    const transformControls = new TransformControls(camera, renderer.domElement);\n    transformControls.setSize(1);\n    transformControls.setTranslationSnap(100);\n    transformControls.setRotationSnap(THREE.MathUtils.degToRad(15));\n    transformControls.setScaleSnap(0.1);\n    scene.add(transformControls);\n    transformControlsRef.current = transformControls;\n\n    // 加载模型\n    if (buildingData) {\n      loadModel(buildingData);\n    }\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 清理函数\n    return () => {\n      if (containerRef.current) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, [buildingData]);\n\n  // 加载模型函数\n  const loadModel = data => {\n    // 清除现有模型\n    meshesRef.current.forEach(mesh => {\n      sceneRef.current.remove(mesh);\n    });\n    meshesRef.current = [];\n\n    // 加载新模型\n    data.objects.forEach(obj => {\n      if (obj.geometry.vertices) {\n        const geometry = new THREE.BufferGeometry();\n        const vertexArray = new Float32Array(obj.geometry.vertices.flatMap(vertex => [vertex[0], vertex[2], vertex[1]]));\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\n        const indices = [];\n        obj.geometry.faces.forEach(face => {\n          if (face.length === 4) {\n            indices.push(face[0], face[1], face[2]);\n            indices.push(face[2], face[3], face[0]);\n          } else {\n            indices.push(...face);\n          }\n        });\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\n        geometry.computeVertexNormals();\n        const material = new THREE.MeshPhongMaterial({\n          transparent: obj.material.transparency > 0,\n          opacity: 1 - obj.material.transparency,\n          side: THREE.DoubleSide,\n          roughness: obj.material.roughness || 0.5\n        });\n        if (obj.material.texture) {\n          const textureLoader = new THREE.TextureLoader();\n          textureLoader.load(obj.material.texture, texture => {\n            material.map = texture;\n            material.needsUpdate = true;\n          });\n        } else {\n          material.color = new THREE.Color(obj.material.color[0] / 255, obj.material.color[1] / 255, obj.material.color[2] / 255);\n        }\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.position.set(obj.transform.position[0], obj.transform.position[2], obj.transform.position[1]);\n        mesh.rotation.set(obj.transform.rotation[0], obj.transform.rotation[2], obj.transform.rotation[1]);\n        mesh.scale.set(obj.transform.scale[0], obj.transform.scale[2], obj.transform.scale[1]);\n        mesh.userData.id = obj.id;\n        mesh.userData.layer = obj.layer;\n        mesh.castShadow = true;\n        mesh.receiveShadow = true;\n        sceneRef.current.add(mesh);\n        meshesRef.current.push(mesh);\n      }\n    });\n  };\n\n  // 处理窗口大小变化\n  useEffect(() => {\n    const handleResize = () => {\n      if (!cameraRef.current || !rendererRef.current) return;\n      const width = window.innerWidth * 0.8;\n      const height = window.innerHeight;\n      cameraRef.current.aspect = width / height;\n      cameraRef.current.updateProjectionMatrix();\n      rendererRef.current.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // 添加键盘快捷键支持\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (!selectedObjectRef.current || !transformControlsRef.current) return;\n      switch (event.key.toLowerCase()) {\n        case 'g':\n          transformControlsRef.current.setMode('translate');\n          break;\n        case 'r':\n          transformControlsRef.current.setMode('rotate');\n          break;\n        case 's':\n          transformControlsRef.current.setMode('scale');\n          break;\n        case 'escape':\n          if (selectedObjectRef.current) {\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\n            selectedObjectRef.current = null;\n            transformControlsRef.current.detach();\n          }\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"flex-1 relative\",\n    onMouseDown: e => {\n      if (e.button === 0) {\n        // 左键点击\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2();\n        const rect = rendererRef.current.domElement.getBoundingClientRect();\n        mouse.x = (e.clientX - rect.left) / rect.width * 2 - 1;\n        mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\n        raycaster.setFromCamera(mouse, cameraRef.current);\n        const intersects = raycaster.intersectObjects(meshesRef.current);\n        if (intersects.length > 0) {\n          const object = intersects[0].object;\n          if (selectedObjectRef.current !== object) {\n            if (selectedObjectRef.current) {\n              selectedObjectRef.current.material.emissive.setHex(0x000000);\n            }\n            selectedObjectRef.current = object;\n            object.material.emissive.setHex(0x333333);\n            transformControlsRef.current.attach(object);\n          }\n        } else {\n          if (selectedObjectRef.current) {\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\n            selectedObjectRef.current = null;\n            transformControlsRef.current.detach();\n          }\n        }\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(DesignStudio, \"TfLkyWIHsXDUo6emOe3oMnmHTRs=\", false, function () {\n  return [useStore];\n});\n_c = DesignStudio;\nexport default DesignStudio;\nvar _c;\n$RefreshReg$(_c, \"DesignStudio\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","TransformControls","useStore","jsxDEV","_jsxDEV","DesignStudio","_s","containerRef","buildingData","sceneRef","cameraRef","rendererRef","controlsRef","transformControlsRef","meshesRef","bodiesRef","selectedObjectRef","scene","Scene","background","Color","current","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","lookAt","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","gridHelper","GridHelper","controls","mouseButtons","LEFT","MIDDLE","RIGHT","MOUSE","ROTATE","enablePan","enableZoom","panButton","transformControls","setTranslationSnap","setRotationSnap","MathUtils","degToRad","setScaleSnap","loadModel","animate","requestAnimationFrame","update","render","removeChild","dispose","data","forEach","mesh","remove","objects","obj","geometry","vertices","BufferGeometry","vertexArray","Float32Array","flatMap","vertex","setAttribute","BufferAttribute","indices","faces","face","length","push","setIndex","Uint16Array","computeVertexNormals","material","MeshPhongMaterial","transparent","transparency","opacity","side","DoubleSide","roughness","texture","textureLoader","TextureLoader","load","map","needsUpdate","color","Mesh","transform","rotation","scale","userData","id","layer","castShadow","receiveShadow","handleResize","width","height","aspect","updateProjectionMatrix","addEventListener","removeEventListener","handleKeyDown","event","key","toLowerCase","setMode","emissive","setHex","detach","ref","className","onMouseDown","e","button","raycaster","Raycaster","mouse","Vector2","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","setFromCamera","intersects","intersectObjects","object","attach","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/DesignStudio.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\r\nimport { useStore } from '../store';\r\n\r\nconst DesignStudio = () => {\r\n  const containerRef = useRef();\r\n  const { buildingData } = useStore();\r\n  const sceneRef = useRef();\r\n  const cameraRef = useRef();\r\n  const rendererRef = useRef();\r\n  const controlsRef = useRef();\r\n  const transformControlsRef = useRef();\r\n  const meshesRef = useRef([]);\r\n  const bodiesRef = useRef([]);\r\n  const selectedObjectRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // 初始化场景\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xf0f0f0);\r\n    sceneRef.current = scene;\r\n\r\n    // 初始化相机\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth * 0.8 / window.innerHeight, 0.1, 50000);\r\n    camera.position.set(15000, 15000, 15000);\r\n    camera.lookAt(0, 0, 0);\r\n    cameraRef.current = camera;\r\n\r\n    // 初始化渲染器\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    containerRef.current.appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n\r\n    // 添加光源\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 2);\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 2);\r\n    directionalLight.position.set(10000, 20000, 10000);\r\n    scene.add(directionalLight);\r\n    \r\n    // 添加网格\r\n    const gridHelper = new THREE.GridHelper(30000, 30);\r\n    scene.add(gridHelper);\r\n\r\n    // 初始化控制器\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.mouseButtons = {\r\n      LEFT: null,\r\n      MIDDLE: null,\r\n      RIGHT: THREE.MOUSE.ROTATE\r\n    };\r\n    controls.enablePan = true;\r\n    controls.enableZoom = true;\r\n    controls.panButton = THREE.MOUSE.MIDDLE;\r\n    controlsRef.current = controls;\r\n\r\n    // 初始化变换控制器\r\n    const transformControls = new TransformControls(camera, renderer.domElement);\r\n    transformControls.setSize(1);\r\n    transformControls.setTranslationSnap(100);\r\n    transformControls.setRotationSnap(THREE.MathUtils.degToRad(15));\r\n    transformControls.setScaleSnap(0.1);\r\n    scene.add(transformControls);\r\n    transformControlsRef.current = transformControls;\r\n\r\n    // 加载模型\r\n    if (buildingData) {\r\n      loadModel(buildingData);\r\n    }\r\n\r\n    // 动画循环\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // 清理函数\r\n    return () => {\r\n      if (containerRef.current) {\r\n        containerRef.current.removeChild(renderer.domElement);\r\n      }\r\n      renderer.dispose();\r\n    };\r\n  }, [buildingData]);\r\n\r\n  // 加载模型函数\r\n  const loadModel = (data) => {\r\n    // 清除现有模型\r\n    meshesRef.current.forEach(mesh => {\r\n      sceneRef.current.remove(mesh);\r\n    });\r\n    meshesRef.current = [];\r\n\r\n    // 加载新模型\r\n    data.objects.forEach(obj => {\r\n      if (obj.geometry.vertices) {\r\n        const geometry = new THREE.BufferGeometry();\r\n        const vertexArray = new Float32Array(\r\n          obj.geometry.vertices.flatMap(vertex => [\r\n            vertex[0],\r\n            vertex[2],\r\n            vertex[1]\r\n          ])\r\n        );\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\r\n\r\n        const indices = [];\r\n        obj.geometry.faces.forEach(face => {\r\n          if (face.length === 4) {\r\n            indices.push(face[0], face[1], face[2]);\r\n            indices.push(face[2], face[3], face[0]);\r\n          } else {\r\n            indices.push(...face);\r\n          }\r\n        });\r\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\r\n        geometry.computeVertexNormals();\r\n\r\n        const material = new THREE.MeshPhongMaterial({\r\n          transparent: obj.material.transparency > 0,\r\n          opacity: 1 - obj.material.transparency,\r\n          side: THREE.DoubleSide,\r\n          roughness: obj.material.roughness || 0.5\r\n        });\r\n\r\n        if (obj.material.texture) {\r\n          const textureLoader = new THREE.TextureLoader();\r\n          textureLoader.load(obj.material.texture, (texture) => {\r\n            material.map = texture;\r\n            material.needsUpdate = true;\r\n          });\r\n        } else {\r\n          material.color = new THREE.Color(\r\n            obj.material.color[0] / 255,\r\n            obj.material.color[1] / 255,\r\n            obj.material.color[2] / 255\r\n          );\r\n        }\r\n\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.position.set(\r\n          obj.transform.position[0],\r\n          obj.transform.position[2],\r\n          obj.transform.position[1]\r\n        );\r\n        mesh.rotation.set(\r\n          obj.transform.rotation[0],\r\n          obj.transform.rotation[2],\r\n          obj.transform.rotation[1]\r\n        );\r\n        mesh.scale.set(\r\n          obj.transform.scale[0],\r\n          obj.transform.scale[2],\r\n          obj.transform.scale[1]\r\n        );\r\n        \r\n        mesh.userData.id = obj.id;\r\n        mesh.userData.layer = obj.layer;\r\n        mesh.castShadow = true;\r\n        mesh.receiveShadow = true;\r\n\r\n        sceneRef.current.add(mesh);\r\n        meshesRef.current.push(mesh);\r\n      }\r\n    });\r\n  };\r\n\r\n  // 处理窗口大小变化\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (!cameraRef.current || !rendererRef.current) return;\r\n      \r\n      const width = window.innerWidth * 0.8;\r\n      const height = window.innerHeight;\r\n      \r\n      cameraRef.current.aspect = width / height;\r\n      cameraRef.current.updateProjectionMatrix();\r\n      rendererRef.current.setSize(width, height);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  // 添加键盘快捷键支持\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if (!selectedObjectRef.current || !transformControlsRef.current) return;\r\n      \r\n      switch (event.key.toLowerCase()) {\r\n        case 'g':\r\n          transformControlsRef.current.setMode('translate');\r\n          break;\r\n        case 'r':\r\n          transformControlsRef.current.setMode('rotate');\r\n          break;\r\n        case 's':\r\n          transformControlsRef.current.setMode('scale');\r\n          break;\r\n        case 'escape':\r\n          if (selectedObjectRef.current) {\r\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\r\n            selectedObjectRef.current = null;\r\n            transformControlsRef.current.detach();\r\n          }\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, []);\r\n\r\n  return (\r\n    <div \r\n      ref={containerRef} \r\n      className=\"flex-1 relative\"\r\n      onMouseDown={(e) => {\r\n        if (e.button === 0) { // 左键点击\r\n          const raycaster = new THREE.Raycaster();\r\n          const mouse = new THREE.Vector2();\r\n          const rect = rendererRef.current.domElement.getBoundingClientRect();\r\n          \r\n          mouse.x = ((e.clientX - rect.left) / rect.width) * 2 - 1;\r\n          mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\r\n          \r\n          raycaster.setFromCamera(mouse, cameraRef.current);\r\n          const intersects = raycaster.intersectObjects(meshesRef.current);\r\n          \r\n          if (intersects.length > 0) {\r\n            const object = intersects[0].object;\r\n            if (selectedObjectRef.current !== object) {\r\n              if (selectedObjectRef.current) {\r\n                selectedObjectRef.current.material.emissive.setHex(0x000000);\r\n              }\r\n              selectedObjectRef.current = object;\r\n              object.material.emissive.setHex(0x333333);\r\n              transformControlsRef.current.attach(object);\r\n            }\r\n          } else {\r\n            if (selectedObjectRef.current) {\r\n              selectedObjectRef.current.material.emissive.setHex(0x000000);\r\n              selectedObjectRef.current = null;\r\n              transformControlsRef.current.detach();\r\n            }\r\n          }\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DesignStudio; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}