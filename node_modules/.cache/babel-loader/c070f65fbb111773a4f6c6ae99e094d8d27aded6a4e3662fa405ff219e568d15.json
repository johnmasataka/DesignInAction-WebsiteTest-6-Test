{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useStore } from '../store';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [chatHistory, setChatHistory] = useState([]);\n  const {\n    buildingData,\n    updateBuildingData\n  } = useStore();\n  const [bedroomCount, setBedroomCount] = useState(0);\n  const [floorCount, setFloorCount] = useState(1);\n  const [floorHeight, setFloorHeight] = useState(2500);\n  const [roofStyle, setRoofStyle] = useState('flat');\n  const [eaveLength, setEaveLength] = useState(500);\n  const [wallMaterial, setWallMaterial] = useState('brick');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const generateChatGPTResponse = async (userMessage, context) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [{\n            role: \"system\",\n            content: \"You are an expert architectural designer assistant. Provide concise, professional responses with specific design suggestions based on the user's input.\"\n          }, {\n            role: \"user\",\n            content: `Current building context: ${JSON.stringify(context)}\\nUser message: ${userMessage}`\n          }],\n          temperature: 0.7,\n          max_tokens: 150\n        })\n      });\n      const data = await response.json();\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error generating ChatGPT response:', error);\n      return \"I apologize, but I'm having trouble generating a response at the moment.\";\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const updateBuildingDataWithStep = (step, values) => {\n    let updatedData = {\n      ...buildingData\n    };\n    if (step === 0) {\n      updatedData.building = {\n        ...updatedData.building,\n        bedrooms: values.bedroomCount,\n        floors: values.floorCount,\n        floor_height: values.floorHeight\n      };\n    } else if (step === 1) {\n      updatedData.building = {\n        ...updatedData.building,\n        roof_style: values.roofStyle,\n        eave_length: values.eaveLength,\n        wall_material: values.wallMaterial\n      };\n    }\n    updateBuildingData(updatedData);\n  };\n  const handleControlChange = async (control, value, step) => {\n    // Update local state\n    control.setValue(value);\n\n    // Create user message\n    const userMessage = {\n      type: 'user',\n      content: `I want ${value} ${control.label.toLowerCase()}.`\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // Update building data\n    const context = {\n      step: steps[step].title,\n      currentValues: {\n        bedroomCount,\n        floorCount,\n        floorHeight,\n        roofStyle,\n        eaveLength,\n        wallMaterial\n      },\n      newValue: {\n        [control.label.toLowerCase()]: value\n      }\n    };\n    updateBuildingDataWithStep(step, context.currentValues);\n\n    // Generate and add ChatGPT response\n    const gptResponse = await generateChatGPTResponse(userMessage.content, context);\n    const assistantMessage = {\n      type: 'assistant',\n      content: gptResponse\n    };\n    setChatHistory(prev => [...prev, assistantMessage]);\n  };\n  const steps = [{\n    title: \"Basic Structure\",\n    controls: [{\n      label: \"Number of Bedrooms\",\n      value: bedroomCount,\n      setValue: setBedroomCount,\n      min: 0,\n      max: 6,\n      onChange: value => handleControlChange(steps[0].controls[0], value, 0)\n    }, {\n      label: \"Number of Floors\",\n      value: floorCount,\n      setValue: setFloorCount,\n      min: 1,\n      max: 10,\n      onChange: value => handleControlChange(steps[0].controls[1], value, 0)\n    }, {\n      label: \"Floor Height (mm)\",\n      value: floorHeight,\n      setValue: setFloorHeight,\n      min: 2000,\n      max: 4000,\n      step: 100,\n      onChange: value => handleControlChange(steps[0].controls[2], value, 0)\n    }]\n  }, {\n    title: \"Exterior Design\",\n    controls: [{\n      label: \"Roof Style\",\n      type: \"select\",\n      value: roofStyle,\n      setValue: setRoofStyle,\n      options: [{\n        value: 'flat',\n        label: 'Flat Roof'\n      }, {\n        value: 'gable',\n        label: 'Gable Roof'\n      }, {\n        value: 'hip',\n        label: 'Hip Roof'\n      }],\n      onChange: value => handleControlChange(steps[1].controls[0], value, 1)\n    }, {\n      label: \"Eave Length (mm)\",\n      value: eaveLength,\n      setValue: setEaveLength,\n      min: 0,\n      max: 1000,\n      step: 100,\n      onChange: value => handleControlChange(steps[1].controls[1], value, 1)\n    }, {\n      label: \"Wall Material\",\n      type: \"select\",\n      value: wallMaterial,\n      setValue: setWallMaterial,\n      options: [{\n        value: 'brick',\n        label: 'Brick'\n      }, {\n        value: 'concrete',\n        label: 'Concrete'\n      }, {\n        value: 'wood',\n        label: 'Wood'\n      }, {\n        value: 'glass',\n        label: 'Glass'\n      }],\n      onChange: value => handleControlChange(steps[1].controls[2], value, 1)\n    }]\n  }];\n  const handleConfirm = async () => {\n    const currentStepData = steps[currentStep];\n\n    // Generate confirmation message using ChatGPT\n    const context = {\n      step: currentStepData.title,\n      currentValues: {\n        bedroomCount,\n        floorCount,\n        floorHeight,\n        roofStyle,\n        eaveLength,\n        wallMaterial\n      }\n    };\n    const confirmationMessage = {\n      type: 'assistant',\n      content: await generateChatGPTResponse(`Confirming the ${currentStepData.title} step with current values.`, context)\n    };\n    setChatHistory(prev => [...prev, confirmationMessage]);\n\n    // Move to next step if available\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      ref: messagesEndRef,\n      children: [chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: \"Thinking...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"step-title\",\n        children: steps[currentStep].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-controls\",\n        children: steps[currentStep].controls.map((control, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: control.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), control.type === 'select' ? /*#__PURE__*/_jsxDEV(\"select\", {\n            value: control.value,\n            onChange: e => control.onChange(e.target.value),\n            className: \"select-input\",\n            children: control.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              children: option.label\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: control.min,\n            max: control.max,\n            step: control.step || 1,\n            value: control.value,\n            onChange: e => control.onChange(parseInt(e.target.value)),\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"value-display\",\n            children: control.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirm,\n        className: \"confirm-button\",\n        disabled: isLoading,\n        children: [\"Confirm \", steps[currentStep].title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"fffIDhcfzIvXl0d1LIwprYI99AE=\", false, function () {\n  return [useStore];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useStore","jsxDEV","_jsxDEV","ChatInterface","_s","currentStep","setCurrentStep","chatHistory","setChatHistory","buildingData","updateBuildingData","bedroomCount","setBedroomCount","floorCount","setFloorCount","floorHeight","setFloorHeight","roofStyle","setRoofStyle","eaveLength","setEaveLength","wallMaterial","setWallMaterial","isLoading","setIsLoading","messagesEndRef","generateChatGPTResponse","userMessage","context","response","fetch","method","headers","process","env","REACT_APP_OPENAI_API_KEY","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","data","json","choices","message","error","console","updateBuildingDataWithStep","step","values","updatedData","building","bedrooms","floors","floor_height","roof_style","eave_length","wall_material","handleControlChange","control","value","setValue","type","label","toLowerCase","prev","steps","title","currentValues","newValue","gptResponse","assistantMessage","controls","min","max","onChange","options","handleConfirm","currentStepData","confirmationMessage","length","className","children","ref","map","index","fileName","_jsxFileName","lineNumber","columnNumber","e","target","option","parseInt","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useStore } from '../store';\nimport './ChatInterface.css';\n\nconst ChatInterface = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [chatHistory, setChatHistory] = useState([]);\n  const { buildingData, updateBuildingData } = useStore();\n  const [bedroomCount, setBedroomCount] = useState(0);\n  const [floorCount, setFloorCount] = useState(1);\n  const [floorHeight, setFloorHeight] = useState(2500);\n  const [roofStyle, setRoofStyle] = useState('flat');\n  const [eaveLength, setEaveLength] = useState(500);\n  const [wallMaterial, setWallMaterial] = useState('brick');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  const generateChatGPTResponse = async (userMessage, context) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are an expert architectural designer assistant. Provide concise, professional responses with specific design suggestions based on the user's input.\"\n            },\n            {\n              role: \"user\",\n              content: `Current building context: ${JSON.stringify(context)}\\nUser message: ${userMessage}`\n            }\n          ],\n          temperature: 0.7,\n          max_tokens: 150\n        })\n      });\n\n      const data = await response.json();\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error generating ChatGPT response:', error);\n      return \"I apologize, but I'm having trouble generating a response at the moment.\";\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateBuildingDataWithStep = (step, values) => {\n    let updatedData = { ...buildingData };\n    \n    if (step === 0) {\n      updatedData.building = {\n        ...updatedData.building,\n        bedrooms: values.bedroomCount,\n        floors: values.floorCount,\n        floor_height: values.floorHeight\n      };\n    } else if (step === 1) {\n      updatedData.building = {\n        ...updatedData.building,\n        roof_style: values.roofStyle,\n        eave_length: values.eaveLength,\n        wall_material: values.wallMaterial\n      };\n    }\n    \n    updateBuildingData(updatedData);\n  };\n\n  const handleControlChange = async (control, value, step) => {\n    // Update local state\n    control.setValue(value);\n\n    // Create user message\n    const userMessage = {\n      type: 'user',\n      content: `I want ${value} ${control.label.toLowerCase()}.`\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n\n    // Update building data\n    const context = {\n      step: steps[step].title,\n      currentValues: {\n        bedroomCount,\n        floorCount,\n        floorHeight,\n        roofStyle,\n        eaveLength,\n        wallMaterial\n      },\n      newValue: {\n        [control.label.toLowerCase()]: value\n      }\n    };\n\n    updateBuildingDataWithStep(step, context.currentValues);\n\n    // Generate and add ChatGPT response\n    const gptResponse = await generateChatGPTResponse(userMessage.content, context);\n    const assistantMessage = {\n      type: 'assistant',\n      content: gptResponse\n    };\n    setChatHistory(prev => [...prev, assistantMessage]);\n  };\n\n  const steps = [\n    {\n      title: \"Basic Structure\",\n      controls: [\n        {\n          label: \"Number of Bedrooms\",\n          value: bedroomCount,\n          setValue: setBedroomCount,\n          min: 0,\n          max: 6,\n          onChange: (value) => handleControlChange(steps[0].controls[0], value, 0)\n        },\n        {\n          label: \"Number of Floors\",\n          value: floorCount,\n          setValue: setFloorCount,\n          min: 1,\n          max: 10,\n          onChange: (value) => handleControlChange(steps[0].controls[1], value, 0)\n        },\n        {\n          label: \"Floor Height (mm)\",\n          value: floorHeight,\n          setValue: setFloorHeight,\n          min: 2000,\n          max: 4000,\n          step: 100,\n          onChange: (value) => handleControlChange(steps[0].controls[2], value, 0)\n        }\n      ]\n    },\n    {\n      title: \"Exterior Design\",\n      controls: [\n        {\n          label: \"Roof Style\",\n          type: \"select\",\n          value: roofStyle,\n          setValue: setRoofStyle,\n          options: [\n            { value: 'flat', label: 'Flat Roof' },\n            { value: 'gable', label: 'Gable Roof' },\n            { value: 'hip', label: 'Hip Roof' }\n          ],\n          onChange: (value) => handleControlChange(steps[1].controls[0], value, 1)\n        },\n        {\n          label: \"Eave Length (mm)\",\n          value: eaveLength,\n          setValue: setEaveLength,\n          min: 0,\n          max: 1000,\n          step: 100,\n          onChange: (value) => handleControlChange(steps[1].controls[1], value, 1)\n        },\n        {\n          label: \"Wall Material\",\n          type: \"select\",\n          value: wallMaterial,\n          setValue: setWallMaterial,\n          options: [\n            { value: 'brick', label: 'Brick' },\n            { value: 'concrete', label: 'Concrete' },\n            { value: 'wood', label: 'Wood' },\n            { value: 'glass', label: 'Glass' }\n          ],\n          onChange: (value) => handleControlChange(steps[1].controls[2], value, 1)\n        }\n      ]\n    }\n  ];\n\n  const handleConfirm = async () => {\n    const currentStepData = steps[currentStep];\n    \n    // Generate confirmation message using ChatGPT\n    const context = {\n      step: currentStepData.title,\n      currentValues: {\n        bedroomCount,\n        floorCount,\n        floorHeight,\n        roofStyle,\n        eaveLength,\n        wallMaterial\n      }\n    };\n\n    const confirmationMessage = {\n      type: 'assistant',\n      content: await generateChatGPTResponse(\n        `Confirming the ${currentStepData.title} step with current values.`,\n        context\n      )\n    };\n    \n    setChatHistory(prev => [...prev, confirmationMessage]);\n\n    // Move to next step if available\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n\n  return (\n    <div className=\"chat-interface\">\n      <div className=\"chat-messages\" ref={messagesEndRef}>\n        {chatHistory.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            <div className=\"message-content\">{message.content}</div>\n          </div>\n        ))}\n        {isLoading && (\n          <div className=\"message assistant\">\n            <div className=\"message-content\">Thinking...</div>\n          </div>\n        )}\n      </div>\n      <div className=\"chat-input-container\">\n        <div className=\"step-title\">{steps[currentStep].title}</div>\n        <div className=\"slider-controls\">\n          {steps[currentStep].controls.map((control, index) => (\n            <div key={index} className=\"slider-group\">\n              <label>{control.label}</label>\n              {control.type === 'select' ? (\n                <select\n                  value={control.value}\n                  onChange={(e) => control.onChange(e.target.value)}\n                  className=\"select-input\"\n                >\n                  {control.options.map(option => (\n                    <option key={option.value} value={option.value}>\n                      {option.label}\n                    </option>\n                  ))}\n                </select>\n              ) : (\n                <input\n                  type=\"range\"\n                  min={control.min}\n                  max={control.max}\n                  step={control.step || 1}\n                  value={control.value}\n                  onChange={(e) => control.onChange(parseInt(e.target.value))}\n                  className=\"slider\"\n                />\n              )}\n              <div className=\"value-display\">{control.value}</div>\n            </div>\n          ))}\n        </div>\n        <button onClick={handleConfirm} className=\"confirm-button\" disabled={isLoading}>\n          Confirm {steps[currentStep].title}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}