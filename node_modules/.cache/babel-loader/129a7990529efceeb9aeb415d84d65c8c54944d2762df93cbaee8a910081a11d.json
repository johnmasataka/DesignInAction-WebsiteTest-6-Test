{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useStore } from '../store';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [chatHistory, setChatHistory] = useState([]);\n  const {\n    buildingData,\n    updateBuildingData\n  } = useStore();\n  const [bedroomCount, setBedroomCount] = useState(0);\n  const [floorCount, setFloorCount] = useState(1);\n  const [floorHeight, setFloorHeight] = useState(2500);\n  const [roofStyle, setRoofStyle] = useState('flat');\n  const [eaveLength, setEaveLength] = useState(500);\n  const [wallMaterial, setWallMaterial] = useState('brick');\n  const messagesEndRef = useRef(null);\n  const steps = [{\n    title: \"Basic Structure\",\n    controls: [{\n      label: \"Number of Bedrooms\",\n      value: bedroomCount,\n      setValue: setBedroomCount,\n      min: 0,\n      max: 6,\n      onChange: value => {\n        setBedroomCount(value);\n        const userMessage = {\n          type: 'user',\n          content: `I want ${value} bedrooms in the building.`\n        };\n        setChatHistory(prev => [...prev, userMessage]);\n      }\n    }, {\n      label: \"Number of Floors\",\n      value: floorCount,\n      setValue: setFloorCount,\n      min: 1,\n      max: 10,\n      onChange: value => {\n        setFloorCount(value);\n        const userMessage = {\n          type: 'user',\n          content: `I want ${value} floors in the building.`\n        };\n        setChatHistory(prev => [...prev, userMessage]);\n      }\n    }, {\n      label: \"Floor Height (mm)\",\n      value: floorHeight,\n      setValue: setFloorHeight,\n      min: 2000,\n      max: 4000,\n      step: 100,\n      onChange: value => {\n        setFloorHeight(value);\n        const userMessage = {\n          type: 'user',\n          content: `I want the floor height to be ${value}mm.`\n        };\n        setChatHistory(prev => [...prev, userMessage]);\n      }\n    }]\n  }, {\n    title: \"Exterior Design\",\n    controls: [{\n      label: \"Roof Style\",\n      type: \"select\",\n      value: roofStyle,\n      setValue: setRoofStyle,\n      options: [{\n        value: 'flat',\n        label: 'Flat Roof'\n      }, {\n        value: 'gable',\n        label: 'Gable Roof'\n      }, {\n        value: 'hip',\n        label: 'Hip Roof'\n      }],\n      onChange: value => {\n        setRoofStyle(value);\n        const userMessage = {\n          type: 'user',\n          content: `I want a ${value} roof.`\n        };\n        setChatHistory(prev => [...prev, userMessage]);\n      }\n    }, {\n      label: \"Eave Length (mm)\",\n      value: eaveLength,\n      setValue: setEaveLength,\n      min: 0,\n      max: 1000,\n      step: 100,\n      onChange: value => {\n        setEaveLength(value);\n        const userMessage = {\n          type: 'user',\n          content: `I want the eave length to be ${value}mm.`\n        };\n        setChatHistory(prev => [...prev, userMessage]);\n      }\n    }, {\n      label: \"Wall Material\",\n      type: \"select\",\n      value: wallMaterial,\n      setValue: setWallMaterial,\n      options: [{\n        value: 'brick',\n        label: 'Brick'\n      }, {\n        value: 'concrete',\n        label: 'Concrete'\n      }, {\n        value: 'wood',\n        label: 'Wood'\n      }, {\n        value: 'glass',\n        label: 'Glass'\n      }],\n      onChange: value => {\n        setWallMaterial(value);\n        const userMessage = {\n          type: 'user',\n          content: `I want ${value} walls.`\n        };\n        setChatHistory(prev => [...prev, userMessage]);\n      }\n    }]\n  }];\n  const handleConfirm = () => {\n    const currentStepData = steps[currentStep];\n    let updatedData = {\n      ...buildingData\n    };\n\n    // Update building data based on current step\n    if (currentStep === 0) {\n      updatedData.building = {\n        ...updatedData.building,\n        bedrooms: bedroomCount,\n        floors: floorCount,\n        floor_height: floorHeight\n      };\n    } else if (currentStep === 1) {\n      updatedData.building = {\n        ...updatedData.building,\n        roof_style: roofStyle,\n        eave_length: eaveLength,\n        wall_material: wallMaterial\n      };\n    }\n\n    // Update the building data\n    updateBuildingData(updatedData);\n\n    // Add confirmation message\n    const confirmationMessage = {\n      type: 'assistant',\n      content: `Great! I've confirmed your selections for ${currentStepData.title}. ${currentStep === 0 ? 'The basic structure is now set.' : 'The exterior design is now complete.'}`\n    };\n    setChatHistory(prev => [...prev, confirmationMessage]);\n\n    // Move to next step if available\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      ref: messagesEndRef,\n      children: chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"step-title\",\n        children: steps[currentStep].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-controls\",\n        children: steps[currentStep].controls.map((control, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: control.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), control.type === 'select' ? /*#__PURE__*/_jsxDEV(\"select\", {\n            value: control.value,\n            onChange: e => control.onChange(e.target.value),\n            className: \"select-input\",\n            children: control.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              children: option.label\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: control.min,\n            max: control.max,\n            step: control.step || 1,\n            value: control.value,\n            onChange: e => control.onChange(parseInt(e.target.value)),\n            className: \"slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"value-display\",\n            children: control.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirm,\n        className: \"confirm-button\",\n        children: [\"Confirm \", steps[currentStep].title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"pe1log9nO7hhMRBsM1B/BxONbDM=\", false, function () {\n  return [useStore];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useStore","jsxDEV","_jsxDEV","ChatInterface","_s","currentStep","setCurrentStep","chatHistory","setChatHistory","buildingData","updateBuildingData","bedroomCount","setBedroomCount","floorCount","setFloorCount","floorHeight","setFloorHeight","roofStyle","setRoofStyle","eaveLength","setEaveLength","wallMaterial","setWallMaterial","messagesEndRef","steps","title","controls","label","value","setValue","min","max","onChange","userMessage","type","content","prev","step","options","handleConfirm","currentStepData","updatedData","building","bedrooms","floors","floor_height","roof_style","eave_length","wall_material","confirmationMessage","length","className","children","ref","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","control","e","target","option","parseInt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useStore } from '../store';\nimport './ChatInterface.css';\n\nconst ChatInterface = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [chatHistory, setChatHistory] = useState([]);\n  const { buildingData, updateBuildingData } = useStore();\n  const [bedroomCount, setBedroomCount] = useState(0);\n  const [floorCount, setFloorCount] = useState(1);\n  const [floorHeight, setFloorHeight] = useState(2500);\n  const [roofStyle, setRoofStyle] = useState('flat');\n  const [eaveLength, setEaveLength] = useState(500);\n  const [wallMaterial, setWallMaterial] = useState('brick');\n  const messagesEndRef = useRef(null);\n\n  const steps = [\n    {\n      title: \"Basic Structure\",\n      controls: [\n        {\n          label: \"Number of Bedrooms\",\n          value: bedroomCount,\n          setValue: setBedroomCount,\n          min: 0,\n          max: 6,\n          onChange: (value) => {\n            setBedroomCount(value);\n            const userMessage = {\n              type: 'user',\n              content: `I want ${value} bedrooms in the building.`\n            };\n            setChatHistory(prev => [...prev, userMessage]);\n          }\n        },\n        {\n          label: \"Number of Floors\",\n          value: floorCount,\n          setValue: setFloorCount,\n          min: 1,\n          max: 10,\n          onChange: (value) => {\n            setFloorCount(value);\n            const userMessage = {\n              type: 'user',\n              content: `I want ${value} floors in the building.`\n            };\n            setChatHistory(prev => [...prev, userMessage]);\n          }\n        },\n        {\n          label: \"Floor Height (mm)\",\n          value: floorHeight,\n          setValue: setFloorHeight,\n          min: 2000,\n          max: 4000,\n          step: 100,\n          onChange: (value) => {\n            setFloorHeight(value);\n            const userMessage = {\n              type: 'user',\n              content: `I want the floor height to be ${value}mm.`\n            };\n            setChatHistory(prev => [...prev, userMessage]);\n          }\n        }\n      ]\n    },\n    {\n      title: \"Exterior Design\",\n      controls: [\n        {\n          label: \"Roof Style\",\n          type: \"select\",\n          value: roofStyle,\n          setValue: setRoofStyle,\n          options: [\n            { value: 'flat', label: 'Flat Roof' },\n            { value: 'gable', label: 'Gable Roof' },\n            { value: 'hip', label: 'Hip Roof' }\n          ],\n          onChange: (value) => {\n            setRoofStyle(value);\n            const userMessage = {\n              type: 'user',\n              content: `I want a ${value} roof.`\n            };\n            setChatHistory(prev => [...prev, userMessage]);\n          }\n        },\n        {\n          label: \"Eave Length (mm)\",\n          value: eaveLength,\n          setValue: setEaveLength,\n          min: 0,\n          max: 1000,\n          step: 100,\n          onChange: (value) => {\n            setEaveLength(value);\n            const userMessage = {\n              type: 'user',\n              content: `I want the eave length to be ${value}mm.`\n            };\n            setChatHistory(prev => [...prev, userMessage]);\n          }\n        },\n        {\n          label: \"Wall Material\",\n          type: \"select\",\n          value: wallMaterial,\n          setValue: setWallMaterial,\n          options: [\n            { value: 'brick', label: 'Brick' },\n            { value: 'concrete', label: 'Concrete' },\n            { value: 'wood', label: 'Wood' },\n            { value: 'glass', label: 'Glass' }\n          ],\n          onChange: (value) => {\n            setWallMaterial(value);\n            const userMessage = {\n              type: 'user',\n              content: `I want ${value} walls.`\n            };\n            setChatHistory(prev => [...prev, userMessage]);\n          }\n        }\n      ]\n    }\n  ];\n\n  const handleConfirm = () => {\n    const currentStepData = steps[currentStep];\n    let updatedData = { ...buildingData };\n\n    // Update building data based on current step\n    if (currentStep === 0) {\n      updatedData.building = {\n        ...updatedData.building,\n        bedrooms: bedroomCount,\n        floors: floorCount,\n        floor_height: floorHeight\n      };\n    } else if (currentStep === 1) {\n      updatedData.building = {\n        ...updatedData.building,\n        roof_style: roofStyle,\n        eave_length: eaveLength,\n        wall_material: wallMaterial\n      };\n    }\n\n    // Update the building data\n    updateBuildingData(updatedData);\n\n    // Add confirmation message\n    const confirmationMessage = {\n      type: 'assistant',\n      content: `Great! I've confirmed your selections for ${currentStepData.title}. ${\n        currentStep === 0 ? 'The basic structure is now set.' : 'The exterior design is now complete.'\n      }`\n    };\n    setChatHistory(prev => [...prev, confirmationMessage]);\n\n    // Move to next step if available\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n\n  return (\n    <div className=\"chat-interface\">\n      <div className=\"chat-messages\" ref={messagesEndRef}>\n        {chatHistory.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            <div className=\"message-content\">{message.content}</div>\n          </div>\n        ))}\n      </div>\n      <div className=\"chat-input-container\">\n        <div className=\"step-title\">{steps[currentStep].title}</div>\n        <div className=\"slider-controls\">\n          {steps[currentStep].controls.map((control, index) => (\n            <div key={index} className=\"slider-group\">\n              <label>{control.label}</label>\n              {control.type === 'select' ? (\n                <select\n                  value={control.value}\n                  onChange={(e) => control.onChange(e.target.value)}\n                  className=\"select-input\"\n                >\n                  {control.options.map(option => (\n                    <option key={option.value} value={option.value}>\n                      {option.label}\n                    </option>\n                  ))}\n                </select>\n              ) : (\n                <input\n                  type=\"range\"\n                  min={control.min}\n                  max={control.max}\n                  step={control.step || 1}\n                  value={control.value}\n                  onChange={(e) => control.onChange(parseInt(e.target.value))}\n                  className=\"slider\"\n                />\n              )}\n              <div className=\"value-display\">{control.value}</div>\n            </div>\n          ))}\n        </div>\n        <button onClick={handleConfirm} className=\"confirm-button\">\n          Confirm {steps[currentStep].title}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}