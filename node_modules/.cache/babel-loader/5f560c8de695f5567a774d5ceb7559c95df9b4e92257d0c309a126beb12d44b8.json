{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiang\\\\Documents\\\\GitHub\\\\DesignInAction-WebsiteTest-5\\\\src\\\\components\\\\DesignStudio.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\nimport { useStore } from '../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DesignStudio = () => {\n  _s();\n  const containerRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const transformControlsRef = useRef(null);\n  const meshesRef = useRef([]);\n  const selectedObjectRef = useRef(null);\n  const {\n    buildingData,\n    updateBuildingData\n  } = useStore();\n\n  // 更新模型函数\n  const updateModel = data => {\n    if (!sceneRef.current) return;\n    const scene = sceneRef.current;\n\n    // 清除现有网格\n    meshesRef.current.forEach(mesh => scene.remove(mesh));\n    meshesRef.current = [];\n\n    // 加载模型\n    data.objects.forEach((obj, index) => {\n      if (obj.geometry.vertices) {\n        // 计算几何体的边界框\n        const boundingBox = {\n          min: new THREE.Vector3(Infinity, Infinity, Infinity),\n          max: new THREE.Vector3(-Infinity, -Infinity, -Infinity)\n        };\n\n        // 找出边界框\n        obj.geometry.vertices.forEach(vertex => {\n          boundingBox.min.x = Math.min(boundingBox.min.x, vertex[0]);\n          boundingBox.min.y = Math.min(boundingBox.min.y, vertex[2]);\n          boundingBox.min.z = Math.min(boundingBox.min.z, vertex[1]);\n          boundingBox.max.x = Math.max(boundingBox.max.x, vertex[0]);\n          boundingBox.max.y = Math.max(boundingBox.max.y, vertex[2]);\n          boundingBox.max.z = Math.max(boundingBox.max.z, vertex[1]);\n        });\n\n        // 计算中心点\n        const center = new THREE.Vector3((boundingBox.min.x + boundingBox.max.x) / 2, (boundingBox.min.y + boundingBox.max.y) / 2, (boundingBox.min.z + boundingBox.max.z) / 2);\n\n        // 创建顶点\n        const vertexArray = new Float32Array(obj.geometry.vertices.flatMap(vertex => [vertex[0] - center.x, vertex[2] - center.y, vertex[1] - center.z]));\n        const geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\n\n        // 创建面索引\n        const indices = [];\n        obj.geometry.faces.forEach(face => {\n          if (face.length === 4) {\n            indices.push(face[0], face[1], face[2]);\n            indices.push(face[2], face[3], face[0]);\n          } else {\n            indices.push(...face);\n          }\n        });\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\n        geometry.computeVertexNormals();\n\n        // 创建材质\n        const material = new THREE.MeshPhongMaterial({\n          transparent: obj.material.transparency > 0,\n          opacity: 1 - obj.material.transparency,\n          side: THREE.DoubleSide,\n          roughness: obj.material.roughness || 0.5\n        });\n\n        // 加载纹理或设置颜色\n        if (obj.material.texture) {\n          const textureLoader = new THREE.TextureLoader();\n          textureLoader.load(obj.material.texture, texture => {\n            material.map = texture;\n            material.needsUpdate = true;\n          });\n        } else {\n          material.color = new THREE.Color(obj.material.color[0] / 255, obj.material.color[1] / 255, obj.material.color[2] / 255);\n        }\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.position.copy(center);\n        mesh.userData.id = obj.id;\n        mesh.userData.layer = obj.layer;\n        mesh.castShadow = true;\n        mesh.receiveShadow = true;\n        scene.add(mesh);\n        meshesRef.current.push(mesh);\n      }\n    });\n  };\n\n  // 加载和更新模型\n  useEffect(() => {\n    if (!sceneRef.current || !buildingData || !buildingData.building) return;\n    const scene = sceneRef.current;\n\n    // 清除现有对象\n    scene.children = scene.children.filter(child => child.type === 'GridHelper' || child.type === 'TransformControls' || child.type === 'DirectionalLight' || child.type === 'AmbientLight');\n\n    // 创建材质\n    const materials = {\n      wall: new THREE.MeshStandardMaterial({\n        color: 0xcccccc,\n        side: THREE.DoubleSide\n      }),\n      floor: new THREE.MeshStandardMaterial({\n        color: 0xeeeeee,\n        side: THREE.DoubleSide\n      }),\n      ceiling: new THREE.MeshStandardMaterial({\n        color: 0xdddddd,\n        side: THREE.DoubleSide\n      })\n    };\n\n    // 创建房间布局\n    const createRoom = (position, size, type) => {\n      const {\n        width,\n        depth,\n        height\n      } = size;\n      const {\n        x,\n        y,\n        z\n      } = position;\n\n      // 创建地板\n      const floorGeometry = new THREE.BoxGeometry(width, 1, depth);\n      const floor = new THREE.Mesh(floorGeometry, materials.floor);\n      floor.position.set(x, y, z);\n      floor.receiveShadow = true;\n      scene.add(floor);\n\n      // 创建天花板\n      const ceilingGeometry = new THREE.BoxGeometry(width, 1, depth);\n      const ceiling = new THREE.Mesh(ceilingGeometry, materials.ceiling);\n      ceiling.position.set(x, y + height, z);\n      ceiling.castShadow = true;\n      scene.add(ceiling);\n\n      // 创建墙体\n      const wallThickness = 20;\n      const wallHeight = height;\n\n      // 前墙\n      const frontWallGeometry = new THREE.BoxGeometry(width, wallHeight, wallThickness);\n      const frontWall = new THREE.Mesh(frontWallGeometry, materials.wall);\n      frontWall.position.set(x, y + wallHeight / 2, z + depth / 2);\n      frontWall.castShadow = true;\n      frontWall.receiveShadow = true;\n      scene.add(frontWall);\n\n      // 后墙\n      const backWallGeometry = new THREE.BoxGeometry(width, wallHeight, wallThickness);\n      const backWall = new THREE.Mesh(backWallGeometry, materials.wall);\n      backWall.position.set(x, y + wallHeight / 2, z - depth / 2);\n      backWall.castShadow = true;\n      backWall.receiveShadow = true;\n      scene.add(backWall);\n\n      // 左墙\n      const leftWallGeometry = new THREE.BoxGeometry(wallThickness, wallHeight, depth);\n      const leftWall = new THREE.Mesh(leftWallGeometry, materials.wall);\n      leftWall.position.set(x - width / 2, y + wallHeight / 2, z);\n      leftWall.castShadow = true;\n      leftWall.receiveShadow = true;\n      scene.add(leftWall);\n\n      // 右墙\n      const rightWallGeometry = new THREE.BoxGeometry(wallThickness, wallHeight, depth);\n      const rightWall = new THREE.Mesh(rightWallGeometry, materials.wall);\n      rightWall.position.set(x + width / 2, y + wallHeight / 2, z);\n      rightWall.castShadow = true;\n      rightWall.receiveShadow = true;\n      scene.add(rightWall);\n\n      // 为每个墙体添加用户数据\n      [floor, ceiling, frontWall, backWall, leftWall, rightWall].forEach(wall => {\n        wall.userData = {\n          id: `${type}-${Math.random().toString(36).substr(2, 9)}`,\n          type: type,\n          layer: 1\n        };\n      });\n    };\n\n    // 根据buildingData创建房间\n    const standardRoomHeight = buildingData.building.floor_height || 3000; // 使用配置文件中的高度\n    const standardRoomWidth = 6000; // 标准房间宽度\n    const standardRoomDepth = 4000; // 标准房间深度\n    const corridorWidth = 1500; // 走廊宽度\n    const wallThickness = buildingData.building.wall_thickness || 150; // 使用配置文件中的墙体厚度\n\n    // 创建客厅\n    createRoom({\n      x: 0,\n      y: 0,\n      z: 0\n    }, {\n      width: standardRoomWidth * 2,\n      depth: standardRoomDepth * 2,\n      height: standardRoomHeight\n    }, 'living-room');\n\n    // 根据卧室数量创建卧室\n    const bedroomCount = buildingData.building.bedrooms || 0;\n    if (bedroomCount > 0) {\n      // 计算卧室布局\n      const bedroomsPerRow = Math.ceil(bedroomCount / 2);\n      const totalWidth = standardRoomWidth * bedroomsPerRow + corridorWidth * (bedroomsPerRow - 1) + wallThickness * bedroomsPerRow;\n\n      // 创建卧室\n      for (let i = 0; i < bedroomCount; i++) {\n        const row = Math.floor(i / 2);\n        const col = i % 2;\n        const x = (col === 0 ? -totalWidth / 2 : totalWidth / 2) + (col === 0 ? standardRoomWidth / 2 : -standardRoomWidth / 2);\n        const z = row * (standardRoomDepth + corridorWidth + wallThickness) - standardRoomDepth * (bedroomsPerRow - 1) / 2;\n        createRoom({\n          x,\n          y: 0,\n          z\n        }, {\n          width: standardRoomWidth,\n          depth: standardRoomDepth,\n          height: standardRoomHeight\n        }, 'bedroom');\n      }\n    }\n  }, [buildingData]);\n\n  // 监听 buildingData 变化\n  useEffect(() => {\n    if (buildingData) {\n      updateModel(buildingData);\n    }\n  }, [buildingData]);\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // 初始化场景\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf0f0f0);\n    sceneRef.current = scene;\n\n    // 初始化相机\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth * 0.8 / window.innerHeight, 0.1, 50000);\n    camera.position.set(15000, 15000, 15000);\n    camera.lookAt(0, 0, 0);\n    cameraRef.current = camera;\n\n    // 初始化渲染器\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // 添加光源\n    const ambientLight = new THREE.AmbientLight(0x404040, 2);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 2);\n    directionalLight.position.set(10000, 20000, 10000);\n    scene.add(directionalLight);\n\n    // 添加网格\n    const gridHelper = new THREE.GridHelper(30000, 30);\n    scene.add(gridHelper);\n\n    // 初始化控制器\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.mouseButtons = {\n      LEFT: null,\n      MIDDLE: null,\n      RIGHT: THREE.MOUSE.ROTATE\n    };\n    controls.enablePan = true;\n    controls.enableZoom = true;\n    controls.panButton = THREE.MOUSE.MIDDLE;\n    controlsRef.current = controls;\n\n    // 初始化变换控制器\n    const transformControls = new TransformControls(camera, renderer.domElement);\n    transformControls.setSize(1);\n    transformControls.setTranslationSnap(100);\n    transformControls.setRotationSnap(THREE.MathUtils.degToRad(15));\n    transformControls.setScaleSnap(0.1);\n    scene.add(transformControls);\n    transformControlsRef.current = transformControls;\n\n    // 加载初始模型\n    fetch('/building.json').then(response => response.json()).then(jsonModel => {\n      updateBuildingData(jsonModel);\n    }).catch(error => console.error('Error loading model:', error));\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 窗口大小调整\n    const handleResize = () => {\n      if (!camera || !renderer) return;\n      camera.aspect = window.innerWidth * 0.8 / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // 清理函数\n    const container = containerRef.current;\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (container) {\n        container.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, [updateBuildingData]);\n\n  // 添加键盘快捷键支持\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (!selectedObjectRef.current || !transformControlsRef.current) return;\n      switch (event.key.toLowerCase()) {\n        case 'g':\n          transformControlsRef.current.setMode('translate');\n          break;\n        case 'r':\n          transformControlsRef.current.setMode('rotate');\n          break;\n        case 's':\n          transformControlsRef.current.setMode('scale');\n          break;\n        case 'escape':\n          if (selectedObjectRef.current) {\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\n            selectedObjectRef.current = null;\n            transformControlsRef.current.detach();\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"w-full h-full\",\n    onMouseDown: e => {\n      if (e.button === 0) {\n        // 左键点击\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2();\n        const rect = rendererRef.current.domElement.getBoundingClientRect();\n        mouse.x = (e.clientX - rect.left) / rect.width * 2 - 1;\n        mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\n        raycaster.setFromCamera(mouse, cameraRef.current);\n        const intersects = raycaster.intersectObjects(meshesRef.current);\n        if (intersects.length > 0) {\n          const object = intersects[0].object;\n          if (selectedObjectRef.current !== object) {\n            if (selectedObjectRef.current) {\n              selectedObjectRef.current.material.emissive.setHex(0x000000);\n            }\n            selectedObjectRef.current = object;\n            object.material.emissive.setHex(0x333333);\n            transformControlsRef.current.attach(object);\n          }\n        } else {\n          if (selectedObjectRef.current) {\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\n            selectedObjectRef.current = null;\n            transformControlsRef.current.detach();\n          }\n        }\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n};\n_s(DesignStudio, \"M1AJavCTjRgKD11qbW8T1hhlgz0=\", false, function () {\n  return [useStore];\n});\n_c = DesignStudio;\nexport default DesignStudio;\nvar _c;\n$RefreshReg$(_c, \"DesignStudio\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","TransformControls","useStore","jsxDEV","_jsxDEV","DesignStudio","_s","containerRef","sceneRef","cameraRef","rendererRef","controlsRef","transformControlsRef","meshesRef","selectedObjectRef","buildingData","updateBuildingData","updateModel","data","current","scene","forEach","mesh","remove","objects","obj","index","geometry","vertices","boundingBox","min","Vector3","Infinity","max","vertex","x","Math","y","z","center","vertexArray","Float32Array","flatMap","BufferGeometry","setAttribute","BufferAttribute","indices","faces","face","length","push","setIndex","Uint16Array","computeVertexNormals","material","MeshPhongMaterial","transparent","transparency","opacity","side","DoubleSide","roughness","texture","textureLoader","TextureLoader","load","map","needsUpdate","color","Color","Mesh","position","copy","userData","id","layer","castShadow","receiveShadow","add","building","children","filter","child","type","materials","wall","MeshStandardMaterial","floor","ceiling","createRoom","size","width","depth","height","floorGeometry","BoxGeometry","set","ceilingGeometry","wallThickness","wallHeight","frontWallGeometry","frontWall","backWallGeometry","backWall","leftWallGeometry","leftWall","rightWallGeometry","rightWall","random","toString","substr","standardRoomHeight","floor_height","standardRoomWidth","standardRoomDepth","corridorWidth","wall_thickness","bedroomCount","bedrooms","bedroomsPerRow","ceil","totalWidth","i","row","col","Scene","background","camera","PerspectiveCamera","window","innerWidth","innerHeight","lookAt","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","directionalLight","DirectionalLight","gridHelper","GridHelper","controls","mouseButtons","LEFT","MIDDLE","RIGHT","MOUSE","ROTATE","enablePan","enableZoom","panButton","transformControls","setTranslationSnap","setRotationSnap","MathUtils","degToRad","setScaleSnap","fetch","then","response","json","jsonModel","catch","error","console","animate","requestAnimationFrame","update","render","handleResize","aspect","updateProjectionMatrix","addEventListener","container","removeEventListener","removeChild","dispose","handleKeyDown","event","key","toLowerCase","setMode","emissive","setHex","detach","ref","className","onMouseDown","e","button","raycaster","Raycaster","mouse","Vector2","rect","getBoundingClientRect","clientX","left","clientY","top","setFromCamera","intersects","intersectObjects","object","attach","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jiang/Documents/GitHub/DesignInAction-WebsiteTest-5/src/components/DesignStudio.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\nimport { useStore } from '../store';\n\nconst DesignStudio = () => {\n  const containerRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const transformControlsRef = useRef(null);\n  const meshesRef = useRef([]);\n  const selectedObjectRef = useRef(null);\n  const { buildingData, updateBuildingData } = useStore();\n\n  // 更新模型函数\n  const updateModel = (data) => {\n    if (!sceneRef.current) return;\n\n    const scene = sceneRef.current;\n    \n    // 清除现有网格\n    meshesRef.current.forEach(mesh => scene.remove(mesh));\n    meshesRef.current = [];\n\n    // 加载模型\n    data.objects.forEach((obj, index) => {\n      if (obj.geometry.vertices) {\n        // 计算几何体的边界框\n        const boundingBox = {\n          min: new THREE.Vector3(Infinity, Infinity, Infinity),\n          max: new THREE.Vector3(-Infinity, -Infinity, -Infinity)\n        };\n        \n        // 找出边界框\n        obj.geometry.vertices.forEach(vertex => {\n          boundingBox.min.x = Math.min(boundingBox.min.x, vertex[0]);\n          boundingBox.min.y = Math.min(boundingBox.min.y, vertex[2]);\n          boundingBox.min.z = Math.min(boundingBox.min.z, vertex[1]);\n          boundingBox.max.x = Math.max(boundingBox.max.x, vertex[0]);\n          boundingBox.max.y = Math.max(boundingBox.max.y, vertex[2]);\n          boundingBox.max.z = Math.max(boundingBox.max.z, vertex[1]);\n        });\n        \n        // 计算中心点\n        const center = new THREE.Vector3(\n          (boundingBox.min.x + boundingBox.max.x) / 2,\n          (boundingBox.min.y + boundingBox.max.y) / 2,\n          (boundingBox.min.z + boundingBox.max.z) / 2\n        );\n\n        // 创建顶点\n        const vertexArray = new Float32Array(\n          obj.geometry.vertices.flatMap(vertex => [\n            vertex[0] - center.x,\n            vertex[2] - center.y,\n            vertex[1] - center.z\n          ])\n        );\n\n        const geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\n\n        // 创建面索引\n        const indices = [];\n        obj.geometry.faces.forEach(face => {\n          if (face.length === 4) {\n            indices.push(face[0], face[1], face[2]);\n            indices.push(face[2], face[3], face[0]);\n          } else {\n            indices.push(...face);\n          }\n        });\n\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\n        geometry.computeVertexNormals();\n\n        // 创建材质\n        const material = new THREE.MeshPhongMaterial({\n          transparent: obj.material.transparency > 0,\n          opacity: 1 - obj.material.transparency,\n          side: THREE.DoubleSide,\n          roughness: obj.material.roughness || 0.5\n        });\n\n        // 加载纹理或设置颜色\n        if (obj.material.texture) {\n          const textureLoader = new THREE.TextureLoader();\n          textureLoader.load(obj.material.texture, (texture) => {\n            material.map = texture;\n            material.needsUpdate = true;\n          });\n        } else {\n          material.color = new THREE.Color(\n            obj.material.color[0] / 255,\n            obj.material.color[1] / 255,\n            obj.material.color[2] / 255\n          );\n        }\n\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.position.copy(center);\n        mesh.userData.id = obj.id;\n        mesh.userData.layer = obj.layer;\n        mesh.castShadow = true;\n        mesh.receiveShadow = true;\n\n        scene.add(mesh);\n        meshesRef.current.push(mesh);\n      }\n    });\n  };\n\n  // 加载和更新模型\n  useEffect(() => {\n    if (!sceneRef.current || !buildingData || !buildingData.building) return;\n\n    const scene = sceneRef.current;\n    \n    // 清除现有对象\n    scene.children = scene.children.filter(child => \n      child.type === 'GridHelper' || \n      child.type === 'TransformControls' || \n      child.type === 'DirectionalLight' || \n      child.type === 'AmbientLight'\n    );\n\n    // 创建材质\n    const materials = {\n      wall: new THREE.MeshStandardMaterial({\n        color: 0xcccccc,\n        side: THREE.DoubleSide\n      }),\n      floor: new THREE.MeshStandardMaterial({\n        color: 0xeeeeee,\n        side: THREE.DoubleSide\n      }),\n      ceiling: new THREE.MeshStandardMaterial({\n        color: 0xdddddd,\n        side: THREE.DoubleSide\n      })\n    };\n\n    // 创建房间布局\n    const createRoom = (position, size, type) => {\n      const { width, depth, height } = size;\n      const { x, y, z } = position;\n\n      // 创建地板\n      const floorGeometry = new THREE.BoxGeometry(width, 1, depth);\n      const floor = new THREE.Mesh(floorGeometry, materials.floor);\n      floor.position.set(x, y, z);\n      floor.receiveShadow = true;\n      scene.add(floor);\n\n      // 创建天花板\n      const ceilingGeometry = new THREE.BoxGeometry(width, 1, depth);\n      const ceiling = new THREE.Mesh(ceilingGeometry, materials.ceiling);\n      ceiling.position.set(x, y + height, z);\n      ceiling.castShadow = true;\n      scene.add(ceiling);\n\n      // 创建墙体\n      const wallThickness = 20;\n      const wallHeight = height;\n\n      // 前墙\n      const frontWallGeometry = new THREE.BoxGeometry(width, wallHeight, wallThickness);\n      const frontWall = new THREE.Mesh(frontWallGeometry, materials.wall);\n      frontWall.position.set(x, y + wallHeight/2, z + depth/2);\n      frontWall.castShadow = true;\n      frontWall.receiveShadow = true;\n      scene.add(frontWall);\n\n      // 后墙\n      const backWallGeometry = new THREE.BoxGeometry(width, wallHeight, wallThickness);\n      const backWall = new THREE.Mesh(backWallGeometry, materials.wall);\n      backWall.position.set(x, y + wallHeight/2, z - depth/2);\n      backWall.castShadow = true;\n      backWall.receiveShadow = true;\n      scene.add(backWall);\n\n      // 左墙\n      const leftWallGeometry = new THREE.BoxGeometry(wallThickness, wallHeight, depth);\n      const leftWall = new THREE.Mesh(leftWallGeometry, materials.wall);\n      leftWall.position.set(x - width/2, y + wallHeight/2, z);\n      leftWall.castShadow = true;\n      leftWall.receiveShadow = true;\n      scene.add(leftWall);\n\n      // 右墙\n      const rightWallGeometry = new THREE.BoxGeometry(wallThickness, wallHeight, depth);\n      const rightWall = new THREE.Mesh(rightWallGeometry, materials.wall);\n      rightWall.position.set(x + width/2, y + wallHeight/2, z);\n      rightWall.castShadow = true;\n      rightWall.receiveShadow = true;\n      scene.add(rightWall);\n\n      // 为每个墙体添加用户数据\n      [floor, ceiling, frontWall, backWall, leftWall, rightWall].forEach(wall => {\n        wall.userData = {\n          id: `${type}-${Math.random().toString(36).substr(2, 9)}`,\n          type: type,\n          layer: 1\n        };\n      });\n    };\n\n    // 根据buildingData创建房间\n    const standardRoomHeight = buildingData.building.floor_height || 3000; // 使用配置文件中的高度\n    const standardRoomWidth = 6000;  // 标准房间宽度\n    const standardRoomDepth = 4000;  // 标准房间深度\n    const corridorWidth = 1500;      // 走廊宽度\n    const wallThickness = buildingData.building.wall_thickness || 150; // 使用配置文件中的墙体厚度\n\n    // 创建客厅\n    createRoom(\n      { x: 0, y: 0, z: 0 },\n      { width: standardRoomWidth * 2, depth: standardRoomDepth * 2, height: standardRoomHeight },\n      'living-room'\n    );\n\n    // 根据卧室数量创建卧室\n    const bedroomCount = buildingData.building.bedrooms || 0;\n    if (bedroomCount > 0) {\n      // 计算卧室布局\n      const bedroomsPerRow = Math.ceil(bedroomCount / 2);\n      const totalWidth = (standardRoomWidth * bedroomsPerRow) + \n                        (corridorWidth * (bedroomsPerRow - 1)) + \n                        (wallThickness * bedroomsPerRow);\n\n      // 创建卧室\n      for (let i = 0; i < bedroomCount; i++) {\n        const row = Math.floor(i / 2);\n        const col = i % 2;\n        const x = (col === 0 ? -totalWidth/2 : totalWidth/2) + \n                 (col === 0 ? standardRoomWidth/2 : -standardRoomWidth/2);\n        const z = (row * (standardRoomDepth + corridorWidth + wallThickness)) - \n                 (standardRoomDepth * (bedroomsPerRow - 1) / 2);\n\n        createRoom(\n          { x, y: 0, z },\n          { width: standardRoomWidth, depth: standardRoomDepth, height: standardRoomHeight },\n          'bedroom'\n        );\n      }\n    }\n  }, [buildingData]);\n\n  // 监听 buildingData 变化\n  useEffect(() => {\n    if (buildingData) {\n      updateModel(buildingData);\n    }\n  }, [buildingData]);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // 初始化场景\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf0f0f0);\n    sceneRef.current = scene;\n\n    // 初始化相机\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth * 0.8 / window.innerHeight,\n      0.1,\n      50000\n    );\n    camera.position.set(15000, 15000, 15000);\n    camera.lookAt(0, 0, 0);\n    cameraRef.current = camera;\n\n    // 初始化渲染器\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // 添加光源\n    const ambientLight = new THREE.AmbientLight(0x404040, 2);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 2);\n    directionalLight.position.set(10000, 20000, 10000);\n    scene.add(directionalLight);\n\n    // 添加网格\n    const gridHelper = new THREE.GridHelper(30000, 30);\n    scene.add(gridHelper);\n\n    // 初始化控制器\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.mouseButtons = {\n      LEFT: null,\n      MIDDLE: null,\n      RIGHT: THREE.MOUSE.ROTATE\n    };\n    controls.enablePan = true;\n    controls.enableZoom = true;\n    controls.panButton = THREE.MOUSE.MIDDLE;\n    controlsRef.current = controls;\n\n    // 初始化变换控制器\n    const transformControls = new TransformControls(camera, renderer.domElement);\n    transformControls.setSize(1);\n    transformControls.setTranslationSnap(100);\n    transformControls.setRotationSnap(THREE.MathUtils.degToRad(15));\n    transformControls.setScaleSnap(0.1);\n    scene.add(transformControls);\n    transformControlsRef.current = transformControls;\n\n    // 加载初始模型\n    fetch('/building.json')\n      .then(response => response.json())\n      .then(jsonModel => {\n        updateBuildingData(jsonModel);\n      })\n      .catch(error => console.error('Error loading model:', error));\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 窗口大小调整\n    const handleResize = () => {\n      if (!camera || !renderer) return;\n      camera.aspect = window.innerWidth * 0.8 / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth * 0.8, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // 清理函数\n    const container = containerRef.current;\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (container) {\n        container.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, [updateBuildingData]);\n\n  // 添加键盘快捷键支持\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (!selectedObjectRef.current || !transformControlsRef.current) return;\n      \n      switch (event.key.toLowerCase()) {\n        case 'g':\n          transformControlsRef.current.setMode('translate');\n          break;\n        case 'r':\n          transformControlsRef.current.setMode('rotate');\n          break;\n        case 's':\n          transformControlsRef.current.setMode('scale');\n          break;\n        case 'escape':\n          if (selectedObjectRef.current) {\n            selectedObjectRef.current.material.emissive.setHex(0x000000);\n            selectedObjectRef.current = null;\n            transformControlsRef.current.detach();\n          }\n          break;\n        default:\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  return (\n    <div \n      ref={containerRef} \n      className=\"w-full h-full\"\n      onMouseDown={(e) => {\n        if (e.button === 0) { // 左键点击\n          const raycaster = new THREE.Raycaster();\n          const mouse = new THREE.Vector2();\n          const rect = rendererRef.current.domElement.getBoundingClientRect();\n          \n          mouse.x = ((e.clientX - rect.left) / rect.width) * 2 - 1;\n          mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\n          \n          raycaster.setFromCamera(mouse, cameraRef.current);\n          const intersects = raycaster.intersectObjects(meshesRef.current);\n          \n          if (intersects.length > 0) {\n            const object = intersects[0].object;\n            if (selectedObjectRef.current !== object) {\n              if (selectedObjectRef.current) {\n                selectedObjectRef.current.material.emissive.setHex(0x000000);\n              }\n              selectedObjectRef.current = object;\n              object.material.emissive.setHex(0x333333);\n              transformControlsRef.current.attach(object);\n            }\n          } else {\n            if (selectedObjectRef.current) {\n              selectedObjectRef.current.material.emissive.setHex(0x000000);\n              selectedObjectRef.current = null;\n              transformControlsRef.current.detach();\n            }\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport default DesignStudio; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,2CAA2C;AACzE,SAASC,iBAAiB,QAAQ,+CAA+C;AACjF,SAASC,QAAQ,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,YAAY,GAAGT,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMU,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMW,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMY,WAAW,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMa,WAAW,GAAGb,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMc,oBAAoB,GAAGd,MAAM,CAAC,IAAI,CAAC;EACzC,MAAMe,SAAS,GAAGf,MAAM,CAAC,EAAE,CAAC;EAC5B,MAAMgB,iBAAiB,GAAGhB,MAAM,CAAC,IAAI,CAAC;EACtC,MAAM;IAAEiB,YAAY;IAAEC;EAAmB,CAAC,GAAGd,QAAQ,CAAC,CAAC;;EAEvD;EACA,MAAMe,WAAW,GAAIC,IAAI,IAAK;IAC5B,IAAI,CAACV,QAAQ,CAACW,OAAO,EAAE;IAEvB,MAAMC,KAAK,GAAGZ,QAAQ,CAACW,OAAO;;IAE9B;IACAN,SAAS,CAACM,OAAO,CAACE,OAAO,CAACC,IAAI,IAAIF,KAAK,CAACG,MAAM,CAACD,IAAI,CAAC,CAAC;IACrDT,SAAS,CAACM,OAAO,GAAG,EAAE;;IAEtB;IACAD,IAAI,CAACM,OAAO,CAACH,OAAO,CAAC,CAACI,GAAG,EAAEC,KAAK,KAAK;MACnC,IAAID,GAAG,CAACE,QAAQ,CAACC,QAAQ,EAAE;QACzB;QACA,MAAMC,WAAW,GAAG;UAClBC,GAAG,EAAE,IAAI/B,KAAK,CAACgC,OAAO,CAACC,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,CAAC;UACpDC,GAAG,EAAE,IAAIlC,KAAK,CAACgC,OAAO,CAAC,CAACC,QAAQ,EAAE,CAACA,QAAQ,EAAE,CAACA,QAAQ;QACxD,CAAC;;QAED;QACAP,GAAG,CAACE,QAAQ,CAACC,QAAQ,CAACP,OAAO,CAACa,MAAM,IAAI;UACtCL,WAAW,CAACC,GAAG,CAACK,CAAC,GAAGC,IAAI,CAACN,GAAG,CAACD,WAAW,CAACC,GAAG,CAACK,CAAC,EAAED,MAAM,CAAC,CAAC,CAAC,CAAC;UAC1DL,WAAW,CAACC,GAAG,CAACO,CAAC,GAAGD,IAAI,CAACN,GAAG,CAACD,WAAW,CAACC,GAAG,CAACO,CAAC,EAAEH,MAAM,CAAC,CAAC,CAAC,CAAC;UAC1DL,WAAW,CAACC,GAAG,CAACQ,CAAC,GAAGF,IAAI,CAACN,GAAG,CAACD,WAAW,CAACC,GAAG,CAACQ,CAAC,EAAEJ,MAAM,CAAC,CAAC,CAAC,CAAC;UAC1DL,WAAW,CAACI,GAAG,CAACE,CAAC,GAAGC,IAAI,CAACH,GAAG,CAACJ,WAAW,CAACI,GAAG,CAACE,CAAC,EAAED,MAAM,CAAC,CAAC,CAAC,CAAC;UAC1DL,WAAW,CAACI,GAAG,CAACI,CAAC,GAAGD,IAAI,CAACH,GAAG,CAACJ,WAAW,CAACI,GAAG,CAACI,CAAC,EAAEH,MAAM,CAAC,CAAC,CAAC,CAAC;UAC1DL,WAAW,CAACI,GAAG,CAACK,CAAC,GAAGF,IAAI,CAACH,GAAG,CAACJ,WAAW,CAACI,GAAG,CAACK,CAAC,EAAEJ,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC;;QAEF;QACA,MAAMK,MAAM,GAAG,IAAIxC,KAAK,CAACgC,OAAO,CAC9B,CAACF,WAAW,CAACC,GAAG,CAACK,CAAC,GAAGN,WAAW,CAACI,GAAG,CAACE,CAAC,IAAI,CAAC,EAC3C,CAACN,WAAW,CAACC,GAAG,CAACO,CAAC,GAAGR,WAAW,CAACI,GAAG,CAACI,CAAC,IAAI,CAAC,EAC3C,CAACR,WAAW,CAACC,GAAG,CAACQ,CAAC,GAAGT,WAAW,CAACI,GAAG,CAACK,CAAC,IAAI,CAC5C,CAAC;;QAED;QACA,MAAME,WAAW,GAAG,IAAIC,YAAY,CAClChB,GAAG,CAACE,QAAQ,CAACC,QAAQ,CAACc,OAAO,CAACR,MAAM,IAAI,CACtCA,MAAM,CAAC,CAAC,CAAC,GAAGK,MAAM,CAACJ,CAAC,EACpBD,MAAM,CAAC,CAAC,CAAC,GAAGK,MAAM,CAACF,CAAC,EACpBH,MAAM,CAAC,CAAC,CAAC,GAAGK,MAAM,CAACD,CAAC,CACrB,CACH,CAAC;QAED,MAAMX,QAAQ,GAAG,IAAI5B,KAAK,CAAC4C,cAAc,CAAC,CAAC;QAC3ChB,QAAQ,CAACiB,YAAY,CAAC,UAAU,EAAE,IAAI7C,KAAK,CAAC8C,eAAe,CAACL,WAAW,EAAE,CAAC,CAAC,CAAC;;QAE5E;QACA,MAAMM,OAAO,GAAG,EAAE;QAClBrB,GAAG,CAACE,QAAQ,CAACoB,KAAK,CAAC1B,OAAO,CAAC2B,IAAI,IAAI;UACjC,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;YACrBH,OAAO,CAACI,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;YACvCF,OAAO,CAACI,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;UACzC,CAAC,MAAM;YACLF,OAAO,CAACI,IAAI,CAAC,GAAGF,IAAI,CAAC;UACvB;QACF,CAAC,CAAC;QAEFrB,QAAQ,CAACwB,QAAQ,CAAC,IAAIpD,KAAK,CAAC8C,eAAe,CAAC,IAAIO,WAAW,CAACN,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QACzEnB,QAAQ,CAAC0B,oBAAoB,CAAC,CAAC;;QAE/B;QACA,MAAMC,QAAQ,GAAG,IAAIvD,KAAK,CAACwD,iBAAiB,CAAC;UAC3CC,WAAW,EAAE/B,GAAG,CAAC6B,QAAQ,CAACG,YAAY,GAAG,CAAC;UAC1CC,OAAO,EAAE,CAAC,GAAGjC,GAAG,CAAC6B,QAAQ,CAACG,YAAY;UACtCE,IAAI,EAAE5D,KAAK,CAAC6D,UAAU;UACtBC,SAAS,EAAEpC,GAAG,CAAC6B,QAAQ,CAACO,SAAS,IAAI;QACvC,CAAC,CAAC;;QAEF;QACA,IAAIpC,GAAG,CAAC6B,QAAQ,CAACQ,OAAO,EAAE;UACxB,MAAMC,aAAa,GAAG,IAAIhE,KAAK,CAACiE,aAAa,CAAC,CAAC;UAC/CD,aAAa,CAACE,IAAI,CAACxC,GAAG,CAAC6B,QAAQ,CAACQ,OAAO,EAAGA,OAAO,IAAK;YACpDR,QAAQ,CAACY,GAAG,GAAGJ,OAAO;YACtBR,QAAQ,CAACa,WAAW,GAAG,IAAI;UAC7B,CAAC,CAAC;QACJ,CAAC,MAAM;UACLb,QAAQ,CAACc,KAAK,GAAG,IAAIrE,KAAK,CAACsE,KAAK,CAC9B5C,GAAG,CAAC6B,QAAQ,CAACc,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAC3B3C,GAAG,CAAC6B,QAAQ,CAACc,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAC3B3C,GAAG,CAAC6B,QAAQ,CAACc,KAAK,CAAC,CAAC,CAAC,GAAG,GAC1B,CAAC;QACH;QAEA,MAAM9C,IAAI,GAAG,IAAIvB,KAAK,CAACuE,IAAI,CAAC3C,QAAQ,EAAE2B,QAAQ,CAAC;QAC/ChC,IAAI,CAACiD,QAAQ,CAACC,IAAI,CAACjC,MAAM,CAAC;QAC1BjB,IAAI,CAACmD,QAAQ,CAACC,EAAE,GAAGjD,GAAG,CAACiD,EAAE;QACzBpD,IAAI,CAACmD,QAAQ,CAACE,KAAK,GAAGlD,GAAG,CAACkD,KAAK;QAC/BrD,IAAI,CAACsD,UAAU,GAAG,IAAI;QACtBtD,IAAI,CAACuD,aAAa,GAAG,IAAI;QAEzBzD,KAAK,CAAC0D,GAAG,CAACxD,IAAI,CAAC;QACfT,SAAS,CAACM,OAAO,CAAC+B,IAAI,CAAC5B,IAAI,CAAC;MAC9B;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACAzB,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,QAAQ,CAACW,OAAO,IAAI,CAACJ,YAAY,IAAI,CAACA,YAAY,CAACgE,QAAQ,EAAE;IAElE,MAAM3D,KAAK,GAAGZ,QAAQ,CAACW,OAAO;;IAE9B;IACAC,KAAK,CAAC4D,QAAQ,GAAG5D,KAAK,CAAC4D,QAAQ,CAACC,MAAM,CAACC,KAAK,IAC1CA,KAAK,CAACC,IAAI,KAAK,YAAY,IAC3BD,KAAK,CAACC,IAAI,KAAK,mBAAmB,IAClCD,KAAK,CAACC,IAAI,KAAK,kBAAkB,IACjCD,KAAK,CAACC,IAAI,KAAK,cACjB,CAAC;;IAED;IACA,MAAMC,SAAS,GAAG;MAChBC,IAAI,EAAE,IAAItF,KAAK,CAACuF,oBAAoB,CAAC;QACnClB,KAAK,EAAE,QAAQ;QACfT,IAAI,EAAE5D,KAAK,CAAC6D;MACd,CAAC,CAAC;MACF2B,KAAK,EAAE,IAAIxF,KAAK,CAACuF,oBAAoB,CAAC;QACpClB,KAAK,EAAE,QAAQ;QACfT,IAAI,EAAE5D,KAAK,CAAC6D;MACd,CAAC,CAAC;MACF4B,OAAO,EAAE,IAAIzF,KAAK,CAACuF,oBAAoB,CAAC;QACtClB,KAAK,EAAE,QAAQ;QACfT,IAAI,EAAE5D,KAAK,CAAC6D;MACd,CAAC;IACH,CAAC;;IAED;IACA,MAAM6B,UAAU,GAAGA,CAAClB,QAAQ,EAAEmB,IAAI,EAAEP,IAAI,KAAK;MAC3C,MAAM;QAAEQ,KAAK;QAAEC,KAAK;QAAEC;MAAO,CAAC,GAAGH,IAAI;MACrC,MAAM;QAAEvD,CAAC;QAAEE,CAAC;QAAEC;MAAE,CAAC,GAAGiC,QAAQ;;MAE5B;MACA,MAAMuB,aAAa,GAAG,IAAI/F,KAAK,CAACgG,WAAW,CAACJ,KAAK,EAAE,CAAC,EAAEC,KAAK,CAAC;MAC5D,MAAML,KAAK,GAAG,IAAIxF,KAAK,CAACuE,IAAI,CAACwB,aAAa,EAAEV,SAAS,CAACG,KAAK,CAAC;MAC5DA,KAAK,CAAChB,QAAQ,CAACyB,GAAG,CAAC7D,CAAC,EAAEE,CAAC,EAAEC,CAAC,CAAC;MAC3BiD,KAAK,CAACV,aAAa,GAAG,IAAI;MAC1BzD,KAAK,CAAC0D,GAAG,CAACS,KAAK,CAAC;;MAEhB;MACA,MAAMU,eAAe,GAAG,IAAIlG,KAAK,CAACgG,WAAW,CAACJ,KAAK,EAAE,CAAC,EAAEC,KAAK,CAAC;MAC9D,MAAMJ,OAAO,GAAG,IAAIzF,KAAK,CAACuE,IAAI,CAAC2B,eAAe,EAAEb,SAAS,CAACI,OAAO,CAAC;MAClEA,OAAO,CAACjB,QAAQ,CAACyB,GAAG,CAAC7D,CAAC,EAAEE,CAAC,GAAGwD,MAAM,EAAEvD,CAAC,CAAC;MACtCkD,OAAO,CAACZ,UAAU,GAAG,IAAI;MACzBxD,KAAK,CAAC0D,GAAG,CAACU,OAAO,CAAC;;MAElB;MACA,MAAMU,aAAa,GAAG,EAAE;MACxB,MAAMC,UAAU,GAAGN,MAAM;;MAEzB;MACA,MAAMO,iBAAiB,GAAG,IAAIrG,KAAK,CAACgG,WAAW,CAACJ,KAAK,EAAEQ,UAAU,EAAED,aAAa,CAAC;MACjF,MAAMG,SAAS,GAAG,IAAItG,KAAK,CAACuE,IAAI,CAAC8B,iBAAiB,EAAEhB,SAAS,CAACC,IAAI,CAAC;MACnEgB,SAAS,CAAC9B,QAAQ,CAACyB,GAAG,CAAC7D,CAAC,EAAEE,CAAC,GAAG8D,UAAU,GAAC,CAAC,EAAE7D,CAAC,GAAGsD,KAAK,GAAC,CAAC,CAAC;MACxDS,SAAS,CAACzB,UAAU,GAAG,IAAI;MAC3ByB,SAAS,CAACxB,aAAa,GAAG,IAAI;MAC9BzD,KAAK,CAAC0D,GAAG,CAACuB,SAAS,CAAC;;MAEpB;MACA,MAAMC,gBAAgB,GAAG,IAAIvG,KAAK,CAACgG,WAAW,CAACJ,KAAK,EAAEQ,UAAU,EAAED,aAAa,CAAC;MAChF,MAAMK,QAAQ,GAAG,IAAIxG,KAAK,CAACuE,IAAI,CAACgC,gBAAgB,EAAElB,SAAS,CAACC,IAAI,CAAC;MACjEkB,QAAQ,CAAChC,QAAQ,CAACyB,GAAG,CAAC7D,CAAC,EAAEE,CAAC,GAAG8D,UAAU,GAAC,CAAC,EAAE7D,CAAC,GAAGsD,KAAK,GAAC,CAAC,CAAC;MACvDW,QAAQ,CAAC3B,UAAU,GAAG,IAAI;MAC1B2B,QAAQ,CAAC1B,aAAa,GAAG,IAAI;MAC7BzD,KAAK,CAAC0D,GAAG,CAACyB,QAAQ,CAAC;;MAEnB;MACA,MAAMC,gBAAgB,GAAG,IAAIzG,KAAK,CAACgG,WAAW,CAACG,aAAa,EAAEC,UAAU,EAAEP,KAAK,CAAC;MAChF,MAAMa,QAAQ,GAAG,IAAI1G,KAAK,CAACuE,IAAI,CAACkC,gBAAgB,EAAEpB,SAAS,CAACC,IAAI,CAAC;MACjEoB,QAAQ,CAAClC,QAAQ,CAACyB,GAAG,CAAC7D,CAAC,GAAGwD,KAAK,GAAC,CAAC,EAAEtD,CAAC,GAAG8D,UAAU,GAAC,CAAC,EAAE7D,CAAC,CAAC;MACvDmE,QAAQ,CAAC7B,UAAU,GAAG,IAAI;MAC1B6B,QAAQ,CAAC5B,aAAa,GAAG,IAAI;MAC7BzD,KAAK,CAAC0D,GAAG,CAAC2B,QAAQ,CAAC;;MAEnB;MACA,MAAMC,iBAAiB,GAAG,IAAI3G,KAAK,CAACgG,WAAW,CAACG,aAAa,EAAEC,UAAU,EAAEP,KAAK,CAAC;MACjF,MAAMe,SAAS,GAAG,IAAI5G,KAAK,CAACuE,IAAI,CAACoC,iBAAiB,EAAEtB,SAAS,CAACC,IAAI,CAAC;MACnEsB,SAAS,CAACpC,QAAQ,CAACyB,GAAG,CAAC7D,CAAC,GAAGwD,KAAK,GAAC,CAAC,EAAEtD,CAAC,GAAG8D,UAAU,GAAC,CAAC,EAAE7D,CAAC,CAAC;MACxDqE,SAAS,CAAC/B,UAAU,GAAG,IAAI;MAC3B+B,SAAS,CAAC9B,aAAa,GAAG,IAAI;MAC9BzD,KAAK,CAAC0D,GAAG,CAAC6B,SAAS,CAAC;;MAEpB;MACA,CAACpB,KAAK,EAAEC,OAAO,EAAEa,SAAS,EAAEE,QAAQ,EAAEE,QAAQ,EAAEE,SAAS,CAAC,CAACtF,OAAO,CAACgE,IAAI,IAAI;QACzEA,IAAI,CAACZ,QAAQ,GAAG;UACdC,EAAE,EAAE,GAAGS,IAAI,IAAI/C,IAAI,CAACwE,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;UACxD3B,IAAI,EAAEA,IAAI;UACVR,KAAK,EAAE;QACT,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMoC,kBAAkB,GAAGhG,YAAY,CAACgE,QAAQ,CAACiC,YAAY,IAAI,IAAI,CAAC,CAAC;IACvE,MAAMC,iBAAiB,GAAG,IAAI,CAAC,CAAE;IACjC,MAAMC,iBAAiB,GAAG,IAAI,CAAC,CAAE;IACjC,MAAMC,aAAa,GAAG,IAAI,CAAC,CAAM;IACjC,MAAMjB,aAAa,GAAGnF,YAAY,CAACgE,QAAQ,CAACqC,cAAc,IAAI,GAAG,CAAC,CAAC;;IAEnE;IACA3B,UAAU,CACR;MAAEtD,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC,EACpB;MAAEqD,KAAK,EAAEsB,iBAAiB,GAAG,CAAC;MAAErB,KAAK,EAAEsB,iBAAiB,GAAG,CAAC;MAAErB,MAAM,EAAEkB;IAAmB,CAAC,EAC1F,aACF,CAAC;;IAED;IACA,MAAMM,YAAY,GAAGtG,YAAY,CAACgE,QAAQ,CAACuC,QAAQ,IAAI,CAAC;IACxD,IAAID,YAAY,GAAG,CAAC,EAAE;MACpB;MACA,MAAME,cAAc,GAAGnF,IAAI,CAACoF,IAAI,CAACH,YAAY,GAAG,CAAC,CAAC;MAClD,MAAMI,UAAU,GAAIR,iBAAiB,GAAGM,cAAc,GACnCJ,aAAa,IAAII,cAAc,GAAG,CAAC,CAAE,GACrCrB,aAAa,GAAGqB,cAAe;;MAElD;MACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,YAAY,EAAEK,CAAC,EAAE,EAAE;QACrC,MAAMC,GAAG,GAAGvF,IAAI,CAACmD,KAAK,CAACmC,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAME,GAAG,GAAGF,CAAC,GAAG,CAAC;QACjB,MAAMvF,CAAC,GAAG,CAACyF,GAAG,KAAK,CAAC,GAAG,CAACH,UAAU,GAAC,CAAC,GAAGA,UAAU,GAAC,CAAC,KACzCG,GAAG,KAAK,CAAC,GAAGX,iBAAiB,GAAC,CAAC,GAAG,CAACA,iBAAiB,GAAC,CAAC,CAAC;QACjE,MAAM3E,CAAC,GAAIqF,GAAG,IAAIT,iBAAiB,GAAGC,aAAa,GAAGjB,aAAa,CAAC,GAC1DgB,iBAAiB,IAAIK,cAAc,GAAG,CAAC,CAAC,GAAG,CAAE;QAEvD9B,UAAU,CACR;UAAEtD,CAAC;UAAEE,CAAC,EAAE,CAAC;UAAEC;QAAE,CAAC,EACd;UAAEqD,KAAK,EAAEsB,iBAAiB;UAAErB,KAAK,EAAEsB,iBAAiB;UAAErB,MAAM,EAAEkB;QAAmB,CAAC,EAClF,SACF,CAAC;MACH;IACF;EACF,CAAC,EAAE,CAAChG,YAAY,CAAC,CAAC;;EAElB;EACAlB,SAAS,CAAC,MAAM;IACd,IAAIkB,YAAY,EAAE;MAChBE,WAAW,CAACF,YAAY,CAAC;IAC3B;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElBlB,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,YAAY,CAACY,OAAO,EAAE;;IAE3B;IACA,MAAMC,KAAK,GAAG,IAAIrB,KAAK,CAAC8H,KAAK,CAAC,CAAC;IAC/BzG,KAAK,CAAC0G,UAAU,GAAG,IAAI/H,KAAK,CAACsE,KAAK,CAAC,QAAQ,CAAC;IAC5C7D,QAAQ,CAACW,OAAO,GAAGC,KAAK;;IAExB;IACA,MAAM2G,MAAM,GAAG,IAAIhI,KAAK,CAACiI,iBAAiB,CACxC,EAAE,EACFC,MAAM,CAACC,UAAU,GAAG,GAAG,GAAGD,MAAM,CAACE,WAAW,EAC5C,GAAG,EACH,KACF,CAAC;IACDJ,MAAM,CAACxD,QAAQ,CAACyB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IACxC+B,MAAM,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACtB3H,SAAS,CAACU,OAAO,GAAG4G,MAAM;;IAE1B;IACA,MAAMM,QAAQ,GAAG,IAAItI,KAAK,CAACuI,aAAa,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAC7DF,QAAQ,CAACG,OAAO,CAACP,MAAM,CAACC,UAAU,GAAG,GAAG,EAAED,MAAM,CAACE,WAAW,CAAC;IAC7DE,QAAQ,CAACI,SAAS,CAACC,OAAO,GAAG,IAAI;IACjCnI,YAAY,CAACY,OAAO,CAACwH,WAAW,CAACN,QAAQ,CAACO,UAAU,CAAC;IACrDlI,WAAW,CAACS,OAAO,GAAGkH,QAAQ;;IAE9B;IACA,MAAMQ,YAAY,GAAG,IAAI9I,KAAK,CAAC+I,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;IACxD1H,KAAK,CAAC0D,GAAG,CAAC+D,YAAY,CAAC;IAEvB,MAAME,gBAAgB,GAAG,IAAIhJ,KAAK,CAACiJ,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChED,gBAAgB,CAACxE,QAAQ,CAACyB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAClD5E,KAAK,CAAC0D,GAAG,CAACiE,gBAAgB,CAAC;;IAE3B;IACA,MAAME,UAAU,GAAG,IAAIlJ,KAAK,CAACmJ,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC;IAClD9H,KAAK,CAAC0D,GAAG,CAACmE,UAAU,CAAC;;IAErB;IACA,MAAME,QAAQ,GAAG,IAAInJ,aAAa,CAAC+H,MAAM,EAAEM,QAAQ,CAACO,UAAU,CAAC;IAC/DO,QAAQ,CAACC,YAAY,GAAG;MACtBC,IAAI,EAAE,IAAI;MACVC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAExJ,KAAK,CAACyJ,KAAK,CAACC;IACrB,CAAC;IACDN,QAAQ,CAACO,SAAS,GAAG,IAAI;IACzBP,QAAQ,CAACQ,UAAU,GAAG,IAAI;IAC1BR,QAAQ,CAACS,SAAS,GAAG7J,KAAK,CAACyJ,KAAK,CAACF,MAAM;IACvC3I,WAAW,CAACQ,OAAO,GAAGgI,QAAQ;;IAE9B;IACA,MAAMU,iBAAiB,GAAG,IAAI5J,iBAAiB,CAAC8H,MAAM,EAAEM,QAAQ,CAACO,UAAU,CAAC;IAC5EiB,iBAAiB,CAACrB,OAAO,CAAC,CAAC,CAAC;IAC5BqB,iBAAiB,CAACC,kBAAkB,CAAC,GAAG,CAAC;IACzCD,iBAAiB,CAACE,eAAe,CAAChK,KAAK,CAACiK,SAAS,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC/DJ,iBAAiB,CAACK,YAAY,CAAC,GAAG,CAAC;IACnC9I,KAAK,CAAC0D,GAAG,CAAC+E,iBAAiB,CAAC;IAC5BjJ,oBAAoB,CAACO,OAAO,GAAG0I,iBAAiB;;IAEhD;IACAM,KAAK,CAAC,gBAAgB,CAAC,CACpBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,SAAS,IAAI;MACjBvJ,kBAAkB,CAACuJ,SAAS,CAAC;IAC/B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;;IAE/D;IACA,MAAME,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BxB,QAAQ,CAAC0B,MAAM,CAAC,CAAC;MACjBxC,QAAQ,CAACyC,MAAM,CAAC1J,KAAK,EAAE2G,MAAM,CAAC;IAChC,CAAC;IACD4C,OAAO,CAAC,CAAC;;IAET;IACA,MAAMI,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAI,CAAChD,MAAM,IAAI,CAACM,QAAQ,EAAE;MAC1BN,MAAM,CAACiD,MAAM,GAAG/C,MAAM,CAACC,UAAU,GAAG,GAAG,GAAGD,MAAM,CAACE,WAAW;MAC5DJ,MAAM,CAACkD,sBAAsB,CAAC,CAAC;MAC/B5C,QAAQ,CAACG,OAAO,CAACP,MAAM,CAACC,UAAU,GAAG,GAAG,EAAED,MAAM,CAACE,WAAW,CAAC;IAC/D,CAAC;IACDF,MAAM,CAACiD,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;;IAE/C;IACA,MAAMI,SAAS,GAAG5K,YAAY,CAACY,OAAO;IACtC,OAAO,MAAM;MACX8G,MAAM,CAACmD,mBAAmB,CAAC,QAAQ,EAAEL,YAAY,CAAC;MAClD,IAAII,SAAS,EAAE;QACbA,SAAS,CAACE,WAAW,CAAChD,QAAQ,CAACO,UAAU,CAAC;MAC5C;MACAP,QAAQ,CAACiD,OAAO,CAAC,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,CAACtK,kBAAkB,CAAC,CAAC;;EAExB;EACAnB,SAAS,CAAC,MAAM;IACd,MAAM0L,aAAa,GAAIC,KAAK,IAAK;MAC/B,IAAI,CAAC1K,iBAAiB,CAACK,OAAO,IAAI,CAACP,oBAAoB,CAACO,OAAO,EAAE;MAEjE,QAAQqK,KAAK,CAACC,GAAG,CAACC,WAAW,CAAC,CAAC;QAC7B,KAAK,GAAG;UACN9K,oBAAoB,CAACO,OAAO,CAACwK,OAAO,CAAC,WAAW,CAAC;UACjD;QACF,KAAK,GAAG;UACN/K,oBAAoB,CAACO,OAAO,CAACwK,OAAO,CAAC,QAAQ,CAAC;UAC9C;QACF,KAAK,GAAG;UACN/K,oBAAoB,CAACO,OAAO,CAACwK,OAAO,CAAC,OAAO,CAAC;UAC7C;QACF,KAAK,QAAQ;UACX,IAAI7K,iBAAiB,CAACK,OAAO,EAAE;YAC7BL,iBAAiB,CAACK,OAAO,CAACmC,QAAQ,CAACsI,QAAQ,CAACC,MAAM,CAAC,QAAQ,CAAC;YAC5D/K,iBAAiB,CAACK,OAAO,GAAG,IAAI;YAChCP,oBAAoB,CAACO,OAAO,CAAC2K,MAAM,CAAC,CAAC;UACvC;UACA;QACF;UACE;MACJ;IACF,CAAC;IAED7D,MAAM,CAACiD,gBAAgB,CAAC,SAAS,EAAEK,aAAa,CAAC;IACjD,OAAO,MAAMtD,MAAM,CAACmD,mBAAmB,CAAC,SAAS,EAAEG,aAAa,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnL,OAAA;IACE2L,GAAG,EAAExL,YAAa;IAClByL,SAAS,EAAC,eAAe;IACzBC,WAAW,EAAGC,CAAC,IAAK;MAClB,IAAIA,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;QAAE;QACpB,MAAMC,SAAS,GAAG,IAAIrM,KAAK,CAACsM,SAAS,CAAC,CAAC;QACvC,MAAMC,KAAK,GAAG,IAAIvM,KAAK,CAACwM,OAAO,CAAC,CAAC;QACjC,MAAMC,IAAI,GAAG9L,WAAW,CAACS,OAAO,CAACyH,UAAU,CAAC6D,qBAAqB,CAAC,CAAC;QAEnEH,KAAK,CAACnK,CAAC,GAAI,CAAC+J,CAAC,CAACQ,OAAO,GAAGF,IAAI,CAACG,IAAI,IAAIH,IAAI,CAAC7G,KAAK,GAAI,CAAC,GAAG,CAAC;QACxD2G,KAAK,CAACjK,CAAC,GAAG,EAAE,CAAC6J,CAAC,CAACU,OAAO,GAAGJ,IAAI,CAACK,GAAG,IAAIL,IAAI,CAAC3G,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;QAEzDuG,SAAS,CAACU,aAAa,CAACR,KAAK,EAAE7L,SAAS,CAACU,OAAO,CAAC;QACjD,MAAM4L,UAAU,GAAGX,SAAS,CAACY,gBAAgB,CAACnM,SAAS,CAACM,OAAO,CAAC;QAEhE,IAAI4L,UAAU,CAAC9J,MAAM,GAAG,CAAC,EAAE;UACzB,MAAMgK,MAAM,GAAGF,UAAU,CAAC,CAAC,CAAC,CAACE,MAAM;UACnC,IAAInM,iBAAiB,CAACK,OAAO,KAAK8L,MAAM,EAAE;YACxC,IAAInM,iBAAiB,CAACK,OAAO,EAAE;cAC7BL,iBAAiB,CAACK,OAAO,CAACmC,QAAQ,CAACsI,QAAQ,CAACC,MAAM,CAAC,QAAQ,CAAC;YAC9D;YACA/K,iBAAiB,CAACK,OAAO,GAAG8L,MAAM;YAClCA,MAAM,CAAC3J,QAAQ,CAACsI,QAAQ,CAACC,MAAM,CAAC,QAAQ,CAAC;YACzCjL,oBAAoB,CAACO,OAAO,CAAC+L,MAAM,CAACD,MAAM,CAAC;UAC7C;QACF,CAAC,MAAM;UACL,IAAInM,iBAAiB,CAACK,OAAO,EAAE;YAC7BL,iBAAiB,CAACK,OAAO,CAACmC,QAAQ,CAACsI,QAAQ,CAACC,MAAM,CAAC,QAAQ,CAAC;YAC5D/K,iBAAiB,CAACK,OAAO,GAAG,IAAI;YAChCP,oBAAoB,CAACO,OAAO,CAAC2K,MAAM,CAAC,CAAC;UACvC;QACF;MACF;IACF;EAAE;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAAChN,EAAA,CA/ZID,YAAY;EAAA,QAS6BH,QAAQ;AAAA;AAAAqN,EAAA,GATjDlN,YAAY;AAialB,eAAeA,YAAY;AAAC,IAAAkN,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}